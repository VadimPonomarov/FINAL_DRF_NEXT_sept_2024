#!/usr/bin/env python3
"""
Docker Cleanup Script - –û—á–∏—Å—Ç–∫–∞ Docker –≤—ñ–¥ —Å–º—ñ—Ç—Ç—è
===================================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ Docker –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –º—ñ—Å—Ü—è —Ç–∞
—É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö images/containers/volumes.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python docker-cleanup.py                    # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    python docker-cleanup.py --auto             # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞
    python docker-cleanup.py --deep             # –ì–ª–∏–±–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∞ (–≤—Å–µ)
    python docker-cleanup.py --safe             # –ë–µ–∑–ø–µ—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (—Ç—ñ–ª—å–∫–∏ stopped)

–©–æ –æ—á–∏—â–∞—î—Ç—å—Å—è:
- Stopped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
- Dangling images (–±–µ–∑ —Ç–µ–≥—ñ–≤)
- Unused volumes
- Build cache
- Networks (–∫—Ä—ñ–º default)
"""

import subprocess
import sys
import argparse
from pathlib import Path

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'='*60}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{message}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'='*60}{Colors.ENDC}\n")

def print_success(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    print(f"{Colors.OKGREEN}‚úÖ {message}{Colors.ENDC}")

def print_warning(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"""
    print(f"{Colors.WARNING}‚ö†Ô∏è  {message}{Colors.ENDC}")

def print_error(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–º–∏–ª–∫—É"""
    print(f"{Colors.FAIL}‚ùå {message}{Colors.ENDC}")

def print_info(message):
    """–í–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
    print(f"{Colors.OKCYAN}‚ÑπÔ∏è  {message}{Colors.ENDC}")

def run_command(command, description, ignore_errors=False):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É Docker"""
    print(f"{Colors.OKBLUE}üîß {description}...{Colors.ENDC}")
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        
        if result.returncode == 0:
            output = result.stdout.strip()
            if output:
                print(f"   {output}")
            print_success(f"{description} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
        else:
            if ignore_errors:
                print_warning(f"{description} - –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏)")
                return True
            else:
                print_error(f"{description} - –ø–æ–º–∏–ª–∫–∞: {result.stderr}")
                return False
    except Exception as e:
        print_error(f"{description} - –≤–∏–Ω—è—Ç–æ–∫: {str(e)}")
        return False

def get_docker_info():
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Docker"""
    print_header("üìä –ê–ù–ê–õ–Ü–ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø DOCKER")
    
    commands = [
        ("docker system df", "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É"),
        ("docker ps -a --format 'table {{.Names}}\t{{.Status}}'", "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"),
        ("docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.Size}}'", "Images"),
    ]
    
    for cmd, desc in commands:
        print(f"\n{Colors.OKCYAN}{desc}:{Colors.ENDC}")
        subprocess.run(cmd, shell=True)

def safe_cleanup():
    """–ë–µ–∑–ø–µ—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (—Ç—ñ–ª—å–∫–∏ stopped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ç–∞ dangling images)"""
    print_header("üßπ –ë–ï–ó–ü–ï–ß–ù–ê –û–ß–ò–°–¢–ö–ê DOCKER")
    
    tasks = [
        ("docker container prune -f", "–í–∏–¥–∞–ª–µ–Ω–Ω—è stopped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤", True),
        ("docker image prune -f", "–í–∏–¥–∞–ª–µ–Ω–Ω—è dangling images", True),
        ("docker network prune -f", "–í–∏–¥–∞–ª–µ–Ω–Ω—è unused networks", True),
    ]
    
    for cmd, desc, ignore in tasks:
        run_command(cmd, desc, ignore)

def moderate_cleanup():
    """–ü–æ–º—ñ—Ä–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (+ unused volumes —Ç–∞ build cache)"""
    print_header("üßπ –ü–û–ú–Ü–†–ù–ê –û–ß–ò–°–¢–ö–ê DOCKER")
    
    safe_cleanup()
    
    additional_tasks = [
        ("docker volume prune -f", "–í–∏–¥–∞–ª–µ–Ω–Ω—è unused volumes", True),
        ("docker builder prune -f", "–û—á–∏—Å—Ç–∫–∞ build cache", True),
    ]
    
    for cmd, desc, ignore in additional_tasks:
        run_command(cmd, desc, ignore)

def deep_cleanup():
    """–ì–ª–∏–±–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∞ (–≤—Å–µ, –∫—Ä—ñ–º running –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤)"""
    print_header("üßπ –ì–õ–ò–ë–û–ö–ê –û–ß–ò–°–¢–ö–ê DOCKER")
    
    print_warning("–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü unused Docker –æ–±'—î–∫—Ç–∏!")
    
    if not auto_mode:
        response = input(f"{Colors.WARNING}–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): {Colors.ENDC}").lower()
        if response != 'y':
            print_info("–ì–ª–∏–±–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
            return
    
    tasks = [
        ("docker system prune -a -f --volumes", "–ì–ª–∏–±–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–∏", True),
    ]
    
    for cmd, desc, ignore in tasks:
        run_command(cmd, desc, ignore)

def project_specific_cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É"""
    print_header("üéØ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–£ AutoRia")
    
    project_name = "final_drf_next_sept_2024"
    
    print_info(f"–ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É {project_name}...")
    run_command("docker-compose down", "–ó—É–ø–∏–Ω–∫–∞ docker-compose", True)
    
    print_info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è volumes –ø—Ä–æ–µ–∫—Ç—É...")
    run_command(
        f"docker volume ls -q -f name={project_name} | ForEach-Object {{ docker volume rm $_ }}",
        "–í–∏–¥–∞–ª–µ–Ω–Ω—è project volumes",
        True
    )
    
    print_info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è images –ø—Ä–æ–µ–∫—Ç—É...")
    run_command(
        f"docker images -q {project_name}* | ForEach-Object {{ docker rmi $_ }}",
        "–í–∏–¥–∞–ª–µ–Ω–Ω—è project images",
        True
    )

def interactive_menu():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –æ—á–∏—Å—Ç–∫–∏"""
    print_header("üê≥ DOCKER CLEANUP - –ú–ï–ù–Æ")
    
    print("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏:\n")
    print("1. üîç –ê–Ω–∞–ª—ñ–∑ (—Ç—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é)")
    print("2. üßπ –ë–µ–∑–ø–µ—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (stopped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ + dangling images)")
    print("3. üßΩ –ü–æ–º—ñ—Ä–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (+ unused volumes + build cache)")
    print("4. üí• –ì–ª–∏–±–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∞ (–í–°–ï unused –æ–±'—î–∫—Ç–∏)")
    print("5. üéØ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç—É (—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –¥–ª—è AutoRia)")
    print("0. ‚ùå –í–∏—Ö—ñ–¥\n")
    
    choice = input(f"{Colors.OKCYAN}–í–∞—à –≤–∏–±—ñ—Ä (0-5): {Colors.ENDC}").strip()
    
    if choice == '1':
        get_docker_info()
    elif choice == '2':
        safe_cleanup()
    elif choice == '3':
        moderate_cleanup()
    elif choice == '4':
        deep_cleanup()
    elif choice == '5':
        project_specific_cleanup()
    elif choice == '0':
        print_info("–í–∏—Ö—ñ–¥...")
        sys.exit(0)
    else:
        print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
        return interactive_menu()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    global auto_mode
    
    parser = argparse.ArgumentParser(description='Docker Cleanup Script')
    parser.add_argument('--auto', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–æ–º—ñ—Ä–Ω–∞ –æ—á–∏—Å—Ç–∫–∞')
    parser.add_argument('--safe', action='store_true', help='–ë–µ–∑–ø–µ—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞')
    parser.add_argument('--deep', action='store_true', help='–ì–ª–∏–±–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∞')
    parser.add_argument('--project', action='store_true', help='–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
    parser.add_argument('--info', action='store_true', help='–¢—ñ–ª—å–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
    
    args = parser.parse_args()
    auto_mode = args.auto or args.safe or args.deep or args.project or args.info
    
    print_header("üê≥ DOCKER CLEANUP SCRIPT")
    print_info("–û—á–∏—Å—Ç–∫–∞ Docker –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É AutoRia")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    try:
        subprocess.run("docker --version", shell=True, check=True, capture_output=True)
    except:
        print_error("Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        sys.exit(1)
    
    if args.info:
        get_docker_info()
    elif args.safe:
        safe_cleanup()
    elif args.deep:
        deep_cleanup()
    elif args.project:
        project_specific_cleanup()
    elif args.auto:
        moderate_cleanup()
    else:
        interactive_menu()
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫
    print_header("üìä –ü–Ü–î–°–£–ú–û–ö –ü–Ü–°–õ–Ø –û–ß–ò–°–¢–ö–ò")
    subprocess.run("docker system df", shell=True)
    
    print_success("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()

