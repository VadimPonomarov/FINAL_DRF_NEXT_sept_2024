[tool.poetry]
name = "drf-lessons-sept-2024"
version = "0.1.0"
description = "Django REST Framework lessons project"
authors = ["Vadim <pvs.versia@gmail.com>"]
readme = "README.md"
packages = [{include = "apps"}, {include = "config"}, {include = "core"}]


[tool.poetry.dependencies]
# =============================================================================
# CORE RUNTIME DEPENDENCIES (нужны в Docker)
# =============================================================================
python = ">=3.12,<3.13"

# Django Core
django = "^5.2.4"
djangorestframework = "^3.15.2"
djangorestframework-simplejwt = "^5.5.0"
django-filter = "^25.1"
django-cors-headers = "^4.7.0"
drf-yasg = "^1.21.10"
drf-spectacular = "^0.27.0"
django-ninja = "^1.4.3"

# Database
psycopg2 = "^2.9.10"

# Data Analysis & Visualization
pandas = "^2.1.4"
matplotlib = "^3.8.2"
seaborn = "^0.13.0"
numpy = "^2.2.0"
plotly = "^5.17.0"
# Экспорт отчетов
reportlab = "^4.0.0"
openpyxl = "^3.1.0"
# LLM интеграция
openai = "^1.3.0"

# WebSockets & Channels
channels = "^4.2.2"
channels-redis = "^4.2.1"
django-redis = "^6.0.0"
redis = "^5.0.0"
djangochannelsrestframework = "^1.3.0"
daphne = "^4.1.2"

# Task Queue
celery = "^5.4.0"
django-celery-beat = "^2.6.0"
pika = "^1.3.2"

# Configuration & Environment
python-dotenv = "^1.0.0"
pytz = "^2025.2"

# Validation & Serialization
pydantic = {extras = ["email"], version = "^2.10.6"}
orjson = "^3.10.12"

# HTTP & Networking
requests = "^2.32.3"
httpx = "^0.28.1"

# OAuth2 Provider
django-oauth-toolkit = "^3.0.0"

# Security & Crypto
cryptography = "^44.0.2"
pycryptodomex = "^3.23.0"
django-ratelimit = "^4.1.0"

# File Processing & Media
pillow = "^10.4.0"
lxml = "^5.2.2"
beautifulsoup4 = "^4.12.3"
markdown = "^3.6"
chardet = "^5.2.0"
python-dateutil = "^2.9.0.post0"
dateparser = "^1.2.2"

# AI & LangChain (для чат-агента) - ENHANCED VERSION WITH ALL TOOLS
# =============================================================================
g4f = {extras = ["all"], version = "^0.5.1.5"}
langgraph = "^0.2.50"
langchain = "^0.3.10"
langchain-core = "^0.3.20"
langchain-community = "^0.3.10"
langchain-openai = "^0.2.10"
langchain-anthropic = "^0.2.0"
langchain-google-genai = "^2.0.0"

# Mathematical computation engines
sympy = "^1.13.0"
scipy = "^1.14.0"
numexpr = "^2.10.0"
numpy = "^2.2.0"

# Async HTTP clients for web scraping and API calls
aiohttp = "^3.10.0"
httpx = {extras = ["http2", "socks"], version = "^0.28.1"}
urllib3 = "^2.2.0"

# Advanced file processing and document parsing
pandas = {extras = ["excel", "xml", "parquet"], version = "^2.2.0"}
openpyxl = "^3.1.2"
python-docx = "^1.1.0"
PyPDF2 = "^3.0.1"
python-pptx = "^0.6.23"
xlrd = "^2.0.1"

# HTML/XML parsing and web scraping
lxml = "^5.2.2"
beautifulsoup4 = {extras = ["lxml"], version = "^4.12.3"}
html5lib = "^1.1"
cssselect = "^1.2.0"

# Data serialization and validation
pydantic = {extras = ["email", "dotenv"], version = "^2.10.6"}
pydantic-settings = "^2.5.0"
marshmallow = "^3.21.0"

# Image processing and computer vision
Pillow = "^10.4.0"
opencv-python = "^4.10.0"
pytesseract = "^0.3.10"

# Audio processing (for future audio features)
librosa = "^0.10.0"
soundfile = "^0.12.0"

# Date and time utilities
tzdata = "^2024.1"
zoneinfo = "^0.2.0"  # For Python < 3.9

# Security and cryptography
cryptography = "^44.0.2"
PyJWT = "^2.9.0"

# Task scheduling and execution
schedule = "^1.2.0"
APScheduler = "^3.10.0"

# Caching and performance
joblib = "^1.4.0"
cachetools = "^5.5.0"

# Network and connectivity
websockets = "^13.0.0"
requests = {extras = ["socks"], version = "^2.32.3"}

# Development and debugging
rich = "^13.9.0"
tqdm = "^4.66.0"
colorama = "^0.4.6"  # For Windows console colors

# Logging
loguru = "^0.7.2"


# =============================================================================
# DEVELOPMENT DEPENDENCIES (НЕ нужны в Docker продакшене)
# =============================================================================
# Enhanced development dependencies for comprehensive testing and development
# =============================================================================
black = "^24.10.0"
isort = "^5.13.2"
flake8 = "^7.1.1"
ruff = "^0.9.2"

# Type checking and validation
mypy = "^1.13.0"
types-requests = "^2.32.0"
types-beautifulsoup4 = "^4.12.0"
types-lxml = "^2024.9.0"

# Testing frameworks
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-django = "^4.9.0"
pytest-mock = "^3.14.0"
httpx = "^0.28.1"  # For async testing

# Documentation
sphinx = "^8.1.0"
sphinx-rtd-theme = "^2.0.0"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.0"

# API testing and mocking
responses = "^0.25.0"
freezegun = "^1.5.0"

# Performance monitoring
pytest-benchmark = "^5.1.0"
memory-profiler = "^0.61.0"

# Jupyter and interactive development
jupyter = "^1.1.0"
ipykernel = "^6.29.0"
notebook = "^7.2.0"

# Code quality and security
bandit = "^1.7.0"
safety = "^3.2.0"
pre-commit = "^4.0.0"

# Database tools for development
pgcli = "^4.1.0"
sqlite3 = "^0.1.0"

# Additional stubs for better IDE support
types-redis = "^4.6.0"
types-pillow = "^10.2.0"
types-setuptools = "^75.1.0"

# =============================================================================
# OPTIONAL FEATURES (устанавливаются по необходимости)
# =============================================================================
[tool.poetry.group.analytics.dependencies]
# Data analysis (только если нужна аналитика)
pandas = "^2.2.2"
numpy = "^2.2.6"
matplotlib = "^3.10.3"
seaborn = "^0.13.2"

[tool.poetry.group.documents.dependencies]
# Document processing (только если нужна обработка документов)
PyPDF2 = "^3.0.1"
python-docx = "^1.0.1"
openpyxl = "^3.1.2"
rarfile = "^4.1"

[tool.poetry.group.ocr.dependencies]
# OCR capabilities (только если нужно распознавание текста)
pytesseract = "^0.3.10"

[tool.poetry.group.maps.dependencies]
# Maps integration (только если нужны карты)
googlemaps = "^4.10.0"

[tool.poetry.group.cloud.dependencies]
# Cloud storage (только если используется AWS S3)
boto3 = "^1.37.15"
django-storages = {extras = ["boto3"], version = "^1.14.5"}

# Web scraping and crawling (CRITICAL for chatbot functionality)
# =============================================================================
crawl4ai = ">=0.6.3,<0.7.0"
readability-lxml = "^0.8.4.1"
curl-cffi = "^0.11.4"
selenium = "^4.25.0"
playwright = "^1.48.0"
browser-cookie3 = "^0.19.1"

# Advanced text processing and NLP
nltk = "^3.9.1"
spacy = "^3.8.0"
textstat = "^0.7.4"
sumy = "^0.11.0"

# API integrations and external services
tavily-python = "^0.5.0"
serpapi = "^0.1.5"
google-search-results-serpapi = "^2.13.0"
duckduckgo-search = "^6.3.0"

# Database and storage
sqlalchemy = "^2.0.35"
alembic = "^1.14.0"
redis = "^5.0.0"

# Monitoring and observability
sentry-sdk = "^2.17.0"
structlog = "^24.4.0"

[tool.poetry.group.interactive.dependencies]
# Interactive features (НЕ нужны в Docker)
keyboard = "^0.13.5"
inputimeout = "^1.0.4"

# Удаляем legacy зависимости для оптимизации Docker образа

[[tool.poetry.source]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple/"
priority = "primary"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
known_third_party = [
    "fastapi",
    "requests",
    "uvicorn",
    "numpy",
    "pandas",
    "sqlalchemy",
    "pydantic",
    "starlette"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

[tool.ruff.lint]
select = ["E", "F", "W", "C", "N", "B", "Q", "S", "I"]
ignore = ["E501", "S105"]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
package-mode = false
