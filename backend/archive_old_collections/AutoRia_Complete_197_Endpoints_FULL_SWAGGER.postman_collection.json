{
  "info": {
    "name": "AutoRia API - Complete 197 Endpoints (Full Swagger)",
    "description": "–ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤—Å–µ—Ö 197 —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏–∑ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
          "console.log('üîÑ Pre-request script executed for:', pm.info.requestName);"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "üìÅ üè¢ Account Management (7 endpoints)",
      "item": [
        {
          "name": "GET /api/accounts/ - üìã List My Accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/accounts/ - ‚ûï Create New Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/profile/account-settings/ - ‚öôÔ∏è Account Settings Tab Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/profile/account-settings/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "profile",
                "account-settings"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/{id}/ - üîç Get Account Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/accounts/{id}/ - Update user account",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/accounts/{id}/ - Partially update user account",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/{id}/ - Delete user account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üìç Addresses (20 endpoints)",
      "item": [
        {
          "name": "POST /api/accounts/addresses/create/ - Create address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/create/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "create"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/addresses/filtered/ - Get filtered addresses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/filtered/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "filtered"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/addresses/raw/ - List all raw addresses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/accounts/addresses/raw/ - Create a new raw address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/addresses/raw/{id}/ - Retrieve a raw address",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/accounts/addresses/raw/{id}/ - Update a raw address (full update)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/accounts/addresses/raw/{id}/ - Partially update a raw address",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/addresses/raw/{id}/ - Delete a raw address",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/addresses/raw/{id}/delete/ - Delete a raw account address",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/raw/{{account_id}}/delete/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "raw",
                "{{account_id}}",
                "delete"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/addresses/{id}/detail/ - Get address details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/{{account_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "{{account_id}}",
                "detail"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/accounts/addresses/{id}/detail/ - Update address",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/{{account_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "{{account_id}}",
                "detail"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/accounts/addresses/{id}/detail/ - Partially update address",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/{{account_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "{{account_id}}",
                "detail"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/addresses/{id}/detail/ - Delete address",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/addresses/{{account_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "addresses",
                "{{account_id}}",
                "detail"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/profile/addresses/ - üìç Addresses Tab Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/profile/addresses/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "profile",
                "addresses"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/{account_pk}/addresses/raw/ - List all raw addresses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/addresses/raw/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "addresses",
                "raw"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/accounts/{account_pk}/addresses/raw/ - Create a new raw address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/addresses/raw/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "addresses",
                "raw"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/{account_pk}/addresses/raw/{id}/ - Retrieve a raw address",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/accounts/{account_pk}/addresses/raw/{id}/ - Update a raw address (full update)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/accounts/{account_pk}/addresses/raw/{id}/ - Partially update a raw address",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/{account_pk}/addresses/raw/{id}/ - Delete a raw address",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/addresses/raw/{{account_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "addresses",
                "raw",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üëë Admin (3 endpoints)",
      "item": [
        {
          "name": "POST /api/accounts/admin/bulk/type/update/ - Bulk change account types",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/admin/bulk/type/update/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "admin",
                "bulk",
                "type",
                "update"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/admin/stats/ - Get account type statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/admin/stats/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "admin",
                "stats"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/accounts/admin/{account_id}/type/ - üîß Change Account Type",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/admin/{account_id}/type/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "admin",
                "{account_id}",
                "type"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üìû Contacts (12 endpoints)",
      "item": [
        {
          "name": "GET /api/accounts/contacts/ - List all contacts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/contacts/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "contacts"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/accounts/contacts/ - Create a new contact",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/contacts/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "contacts"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/contacts/{id} - Retrieve a contact",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/contacts/{{account_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "contacts",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/accounts/contacts/{id} - Update a contact",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/contacts/{{account_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "contacts",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/contacts/{id} - Delete a contact",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/contacts/{{account_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "contacts",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/{account_pk}/contacts/ - List all contacts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/contacts/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "contacts"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/accounts/{account_pk}/contacts/ - Create a new contact",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/contacts/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "contacts"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/{account_pk}/contacts/{id} - Retrieve a contact",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/contacts/{{account_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "contacts",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/accounts/{account_pk}/contacts/{id} - Update a contact",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/contacts/{{account_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "contacts",
                "{{account_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/accounts/{account_pk}/contacts/{id} - Delete a contact",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/{account_pk}/contacts/{{account_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "{account_pk}",
                "contacts",
                "{{account_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/{ad_pk}/contacts - List contacts for an ad's account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/contacts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "contacts"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/{ad_pk}/contacts/{id} - Retrieve a specific contact",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/contacts/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "contacts",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üìç Geocoding (2 endpoints)",
      "item": [
        {
          "name": "POST /api/accounts/geocoding/detailed/ - Get detailed geocoded address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/geocoding/detailed/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "geocoding",
                "detailed"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": \"{{user_id}}\",\n  \"account_type\": \"basic\",\n  \"phone\": \"+380501234567\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/geocoding/formatted/{address_id}/ - Get formatted address by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/geocoding/formatted/{address_id}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "geocoding",
                "formatted",
                "{address_id}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üë§ Users (24 endpoints)",
      "item": [
        {
          "name": "GET /api/accounts/profile/full/ - üë§ Full Profile Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/profile/full/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "profile",
                "full"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/profile/personal-info/ - üë§ Personal Info Tab Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/profile/personal-info/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "profile",
                "personal-info"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/accounts/profile/stats/ - üìä Profile Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/accounts/profile/stats/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "accounts",
                "profile",
                "stats"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/ - List users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/admin/list/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/admin/list/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "admin",
                "list"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/admin/{id}/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/admin/{{user_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "admin",
                "{{user_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/admin/{id}/grant-staff-rights/ - Grant staff rights",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/admin/{{user_id}}/grant-staff-rights/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "admin",
                "{{user_id}}",
                "grant-staff-rights"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/users/admin/{id}/grant-staff-rights/ - Update staff rights",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/admin/{{user_id}}/grant-staff-rights/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "admin",
                "{{user_id}}",
                "grant-staff-rights"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/create/ - Create a user",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/create/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "create"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/generate-image/ - üé® Universal AI Image Generator",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/generate-image/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "generate-image"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/profile/ - Get current user profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "profile"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/users/profile/ - Update current user profile (full)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "profile"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/users/profile/ - Update current user profile (partial)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "profile"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/profile/download-avatar/ - üì• Download Avatar",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile/download-avatar/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "profile",
                "download-avatar"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/profile/generate-avatar/ - Generate AI Avatar",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile/generate-avatar/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "profile",
                "generate-avatar"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/public/list/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/public/list/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "public",
                "list"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/{id}/detail/ - Retrieve user details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "detail"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/users/{id}/detail/ - Update user (full)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "detail"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/users/{id}/detail/ - Update user details (partial)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "detail"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/users/{id}/detail/ - Delete user",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "detail"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/{id}/profile/avatar/ - Get user avatar",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/profile/avatar/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "profile",
                "avatar"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/users/{id}/profile/avatar/ - Update user avatar (full)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/profile/avatar/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "profile",
                "avatar"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/users/{id}/profile/avatar/ - Update user avatar (partial)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/profile/avatar/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "profile",
                "avatar"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/users/{id}/profile/avatar/ - Delete user avatar",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/profile/avatar/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "profile",
                "avatar"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üöó Advertisements (26 endpoints)",
      "item": [
        {
          "name": "POST /api/ads/admin/bulk/status/update/ - üì¶ Bulk Status Update",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/bulk/status/update/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "bulk",
                "status",
                "update"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/admin/moderation/dashboard/ - üìä Moderation Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/moderation/dashboard/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "moderation",
                "dashboard"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/admin/moderation/list/ - üìã Ads Pending Review",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/moderation/list/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "moderation",
                "list"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/admin/{ad_id}/approve/ - ‚úÖ Approve Advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/{ad_id}/approve/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "{ad_id}",
                "approve"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/admin/{ad_id}/reject/ - ‚ùå Reject Advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/{ad_id}/reject/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "{ad_id}",
                "reject"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/admin/{ad_id}/status/ - Retrieve detailed status information for an ad",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/{ad_id}/status/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "{ad_id}",
                "status"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/admin/{ad_id}/status/update/ - Update ad status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/admin/{ad_id}/status/update/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "admin",
                "{ad_id}",
                "status",
                "update"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/ - üöó Browse Car Ads",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/check-limits - Check ad creation limits",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/check-limits",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "check-limits"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/create - üìù Post New Car Ad",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/create",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "create"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/my - üìã My Car Advertisements",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/my",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "my"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/statistics - Get car ad statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/statistics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "statistics"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/test-moderation/ - üß™ Test Moderation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/test-moderation/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "test-moderation"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/{ad_id}/analytics - Get ad analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/{ad_id}/analytics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "{ad_id}",
                "analytics"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/{id} - üîç View Car Ad Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/cars/{id}/delete - üóëÔ∏è Remove Car Ad",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/{{id}}/delete",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "{{id}}",
                "delete"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/cars/{id}/update - ‚úèÔ∏è Edit My Car Ad",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/{{id}}/update",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "{{id}}",
                "update"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/cars/{id}/update - Partially update car advertisement",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/{{id}}/update",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "{{id}}",
                "update"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/{id}/validate - Validate car ad content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/{{id}}/validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "{{id}}",
                "validate"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/legacy/ - List advertisements",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/legacy/ - Create advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/legacy/{ad_id}/publish - Toggle advertisement publication status",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/{ad_id}/publish",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy",
                "{ad_id}",
                "publish"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/legacy/{id} - Retrieve advertisement",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/legacy/{id} - Update advertisement",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy",
                "{{id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/legacy/{id} - Partially update advertisement",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy",
                "{{id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/legacy/{id} - Delete advertisement",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/legacy/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "legacy",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üìä Analytics (9 endpoints)",
      "item": [
        {
          "name": "POST /api/ads/analytics/ad/reset-counters/ - üßπ Reset Ad Counters",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/ad/reset-counters/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "ad",
                "reset-counters"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/analytics/ad/{ad_id}/ - üìä Get Ad Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/ad/{ad_id}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "ad",
                "{ad_id}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/analytics/ad/{ad_id}/card/ - üìä Get Ad Analytics for Card",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/ad/{ad_id}/card/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "ad",
                "{ad_id}",
                "card"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/analytics/track/ad-interaction/ - üìä Track Ad Interaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/track/ad-interaction/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "track",
                "ad-interaction"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/analytics/track/ad-view-detail/ - üìä Track Ad View Detail",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/track/ad-view-detail/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "track",
                "ad-view-detail"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/analytics/track/page-view/ - üìä Track Page View",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/track/page-view/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "track",
                "page-view"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/analytics/track/phone-view/ - üìû Track Phone View",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/track/phone-view/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "track",
                "phone-view"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/analytics/track/search-query/ - üìä Track Search Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/track/search-query/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "track",
                "search-query"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/analytics/track/update-page-metrics/ - üìä Update Page View Metrics",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/track/update-page-metrics/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "track",
                "update-page-metrics"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ api (6 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/analytics/dashboard/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/dashboard/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "dashboard"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/analytics/forecast/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/forecast/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "forecast"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/analytics/search/insights/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/search/insights/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "search",
                "insights"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/analytics/search/series/",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/analytics/search/series/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "analytics",
                "search",
                "series"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/counters/ad/{ad_id}/reset/",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/counters/ad/{ad_id}/reset/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "counters",
                "ad",
                "{ad_id}",
                "reset"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/chat/generate-car-images-mock/",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/chat/generate-car-images-mock/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "chat",
                "generate-car-images-mock"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üõ°Ô∏è Moderation (7 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/cars/moderation/queue - üîç Moderation Queue",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/queue",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "queue"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/cars/moderation/statistics - üìä Moderation Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/statistics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "statistics"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/moderation/{ad_id}/activate - ‚úÖ Activate Advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/{ad_id}/activate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "{ad_id}",
                "activate"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/moderation/{ad_id}/approve - ‚úÖ Approve Advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/{ad_id}/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "{ad_id}",
                "approve"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/moderation/{ad_id}/block - üö´ Block Advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/{ad_id}/block",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "{ad_id}",
                "block"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/moderation/{ad_id}/reject - ‚ùå Reject Advertisement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/{ad_id}/reject",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "{ad_id}",
                "reject"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/cars/moderation/{ad_id}/review - üîÑ Request Review",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/cars/moderation/{ad_id}/review",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "cars",
                "moderation",
                "{ad_id}",
                "review"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ ‚ù§Ô∏è Favorites (3 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/favorites/ - ‚ù§Ô∏è Get Favorite Ads",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/favorites/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "favorites"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/favorites/check/{car_ad_id}/ - ‚ù§Ô∏è Check Favorite Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/favorites/check/{car_ad_id}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "favorites",
                "check",
                "{car_ad_id}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/favorites/toggle/ - ‚ù§Ô∏è Toggle Favorite Status",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/favorites/toggle/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "favorites",
                "toggle"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üèôÔ∏è Cities (1 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/cities/ - Get cities list",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/cities/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "cities"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üé® Colors (8 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/colors/ - Get colors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/reference/colors/ - Create car color",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Color {{$timestamp}}\",\n  \"hex_code\": \"#FF0000\",\n  \"is_metallic\": false,\n  \"is_pearlescent\": false,\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/colors/choices/ - üé® Get Colors Choices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/choices/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors",
                "choices"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/colors/popular/ - üé® Get Popular Colors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/popular/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors",
                "popular"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/colors/{id}/ - Get car color details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/{{color_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors",
                "{{color_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/reference/colors/{id}/ - Update car color",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/{{color_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors",
                "{{color_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Color {{$timestamp}}\",\n  \"hex_code\": \"#FF0000\",\n  \"is_metallic\": false,\n  \"is_pearlescent\": false,\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/reference/colors/{id}/ - Partially update car color",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/{{color_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors",
                "{{color_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Color {{$timestamp}}\",\n  \"hex_code\": \"#FF0000\",\n  \"is_metallic\": false,\n  \"is_pearlescent\": false,\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/reference/colors/{id}/ - Delete car color",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/colors/{{color_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "colors",
                "{{color_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üìÖ Car Generations (8 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/generations/ - üìÖ Browse Car Generations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/reference/generations/ - üìÖ Create Car Generation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Generation {{$timestamp}}\",\n  \"model\": \"{{model_id}}\",\n  \"year_start\": 2020,\n  \"year_end\": 2025\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/generations/by_model/ - Get car generations by model",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/by_model/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations",
                "by_model"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/generations/{id}/ - üìÖ Get Car Generation Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/{{generation_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations",
                "{{generation_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/reference/generations/{id}/ - üìÖ Update Car Generation",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/{{generation_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations",
                "{{generation_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Generation {{$timestamp}}\",\n  \"model\": \"{{model_id}}\",\n  \"year_start\": 2020,\n  \"year_end\": 2025\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/reference/generations/{id}/ - üìÖ Update Car Generation",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/{{generation_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations",
                "{{generation_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Generation {{$timestamp}}\",\n  \"model\": \"{{model_id}}\",\n  \"year_start\": 2020,\n  \"year_end\": 2025\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/reference/generations/{id}/ - üìÖ Delete Car Generation",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/{{generation_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations",
                "{{generation_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/generations/{id}/with_modifications/ - Get car generations with modifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/generations/{{modification_id}}/with_modifications/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "generations",
                "{{modification_id}}",
                "with_modifications"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üè∑Ô∏è Car Marks (9 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/marks/ - List car marks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/reference/marks/ - Create car mark",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Mark {{$timestamp}}\",\n  \"vehicle_type\": 1,\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/marks/choices/ - Get car marks choices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/choices/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "choices"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/marks/popular/ - Get popular car marks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/popular/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "popular"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/marks/{id}/ - Get car mark details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/{{mark_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "{{mark_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/reference/marks/{id}/ - Update car mark",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/{{mark_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "{{mark_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Mark {{$timestamp}}\",\n  \"vehicle_type\": 1,\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/reference/marks/{id}/ - Partially update car mark",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/{{mark_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "{{mark_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Mark {{$timestamp}}\",\n  \"vehicle_type\": 1,\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/reference/marks/{id}/ - Delete car mark",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/{{mark_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "{{mark_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/marks/{id}/with_models/ - Get car mark with models",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/marks/{{mark_id}}/with_models/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "marks",
                "{{mark_id}}",
                "with_models"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üöó Car Models (10 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/models/ - List car models",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/reference/models/ - Create car model",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Model {{$timestamp}}\",\n  \"mark\": \"{{mark_id}}\",\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/models/by_mark/ - Get car models by mark",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/by_mark/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "by_mark"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/models/choices/ - Get car models choices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/choices/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "choices"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/models/popular/ - Get popular car models",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/popular/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "popular"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/models/{id}/ - Get car model details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/{{model_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "{{model_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/reference/models/{id}/ - Update car model",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/{{model_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "{{model_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Model {{$timestamp}}\",\n  \"mark\": \"{{mark_id}}\",\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/reference/models/{id}/ - Partially update car model",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/{{model_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "{{model_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Model {{$timestamp}}\",\n  \"mark\": \"{{mark_id}}\",\n  \"is_popular\": false\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/reference/models/{id}/ - Delete car model",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/{{model_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "{{model_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/models/{id}/with_generations/ - Get car models with generations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/models/{{model_id}}/with_generations/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "models",
                "{{model_id}}",
                "with_generations"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ ‚öôÔ∏è Car Modifications (7 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/modifications/ - Get car modifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/reference/modifications/ - Get car modifications",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Modification {{$timestamp}}\",\n  \"generation\": \"{{generation_id}}\",\n  \"engine_type\": \"gasoline\",\n  \"engine_volume\": \"2.0\",\n  \"power_hp\": 150,\n  \"transmission\": \"manual\",\n  \"drive_type\": \"front\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/modifications/by_generation/ - Get car modifications by generation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/by_generation/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications",
                "by_generation"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/modifications/{id}/ - ‚öôÔ∏è Get Car Modification Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/{{modification_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications",
                "{{modification_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /api/ads/reference/modifications/{id}/ - ‚öôÔ∏è Update Car Modification",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/{{modification_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications",
                "{{modification_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Modification {{$timestamp}}\",\n  \"generation\": \"{{generation_id}}\",\n  \"engine_type\": \"gasoline\",\n  \"engine_volume\": \"2.0\",\n  \"power_hp\": 150,\n  \"transmission\": \"manual\",\n  \"drive_type\": \"front\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/reference/modifications/{id}/ - ‚öôÔ∏è Update Car Modification",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/{{modification_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications",
                "{{modification_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Modification {{$timestamp}}\",\n  \"generation\": \"{{generation_id}}\",\n  \"engine_type\": \"gasoline\",\n  \"engine_volume\": \"2.0\",\n  \"power_hp\": 150,\n  \"transmission\": \"manual\",\n  \"drive_type\": \"front\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/reference/modifications/{id}/ - ‚öôÔ∏è Delete Car Modification",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/modifications/{{modification_id}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "modifications",
                "{{modification_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üåç Regions (1 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/regions/ - Get regions list",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/regions/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "regions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üöô Vehicle Types (2 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/reference/vehicle-types/ - Get vehicle types list",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/vehicle-types/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "vehicle-types"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/reference/vehicle-types/choices/ - Get vehicle types choices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/reference/vehicle-types/choices/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "reference",
                "vehicle-types",
                "choices"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üìä Statistics (6 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/statistics/ - üìä Platform Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/statistics/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "statistics"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/statistics/daily-report/ - üìä Daily Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/statistics/daily-report/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "statistics",
                "daily-report"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/statistics/quick/ - ‚ö° Quick Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/statistics/quick/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "statistics",
                "quick"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/statistics/task-status/{task_id}/ - üìä Analytics Task Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/statistics/task-status/{task_id}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "statistics",
                "task-status",
                "{task_id}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/statistics/user/ - üë§ User Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/statistics/user/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "statistics",
                "user"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/statistics/user/insights/ - üí° User Insights",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/statistics/user/insights/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "statistics",
                "user",
                "insights"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üì∏ Advertisement Images (7 endpoints)",
      "item": [
        {
          "name": "GET /api/ads/{ad_pk}/images - List advertisement images",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/images",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "images"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/ads/{ad_pk}/images - Upload advertisement image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/images",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "images"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/ads/{ad_pk}/images/{id} - Retrieve advertisement image",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/images/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "images",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/ads/{ad_pk}/images/{id} - Update advertisement image",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/images/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "images",
                "{{id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /api/ads/{ad_pk}/images/{id} - Delete advertisement image",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/ads/{ad_pk}/images/{{id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "ads",
                "{ad_pk}",
                "images",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/chat/generate-car-images/ - üöó Generate Car Images",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/chat/generate-car-images/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "chat",
                "generate-car-images"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /generate-car-images/ - üöó Generate Car Images",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/generate-car-images/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "generate-car-images"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üîê Authentication (8 endpoints)",
      "item": [
        {
          "name": "POST /api/auth/login - üîê User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/auth/logout - üö™ User Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "logout"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/auth/refresh - üîÑ Refresh JWT Tokens",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "refresh"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/activate/ - Activate a user",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/activate/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "activate"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/activate/ - Activate a user (POST)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/activate/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "activate"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /api/users/reset-password-confirm/ - Reset password",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/reset-password-confirm/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "reset-password-confirm"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/users/reset-password/ - Request password reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/reset-password/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "reset-password"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/users/{id}/reset-password-token/ - Request password reset token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/reset-password-token/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}",
                "reset-password-token"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ ü§ñ AI Services (2 endpoints)",
      "item": [
        {
          "name": "POST /api/chat/generate-image/ - üé® Generate AI Image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/chat/generate-image/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "chat",
                "generate-image"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /generate-image/ - üé® Generate AI Image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/generate-image/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "generate-image"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üîß Configuration (1 endpoints)",
      "item": [
        {
          "name": "GET /api/config/google-maps-key/ - üó∫Ô∏è Get Google Maps API Key",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/config/google-maps-key/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "config",
                "google-maps-key"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ üí± Currency (6 endpoints)",
      "item": [
        {
          "name": "POST /api/currency/convert/ - Convert currency amount",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/currency/convert/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "currency",
                "convert"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/currency/logs/ - Get currency update logs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/currency/logs/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "currency",
                "logs"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/currency/rates/ - Get current currency rates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/currency/rates/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "currency",
                "rates"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/currency/rates/{base_currency}/{target_currency}/ - Get specific currency rate",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/currency/rates/{base_currency}/{target_currency}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "currency",
                "rates",
                "{base_currency}",
                "{target_currency}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /api/currency/status/ - Get currency system status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/currency/status/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "currency",
                "status"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /api/currency/update/{base_currency}/{target_currency}/ - Update currency rate",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/currency/update/{base_currency}/{target_currency}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "currency",
                "update",
                "{base_currency}",
                "{target_currency}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ generate-car-images-mock (1 endpoints)",
      "item": [
        {
          "name": "POST /generate-car-images-mock/",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/generate-car-images-mock/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "generate-car-images-mock"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Data {{$timestamp}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÅ ‚ù§Ô∏è Health Check (1 endpoints)",
      "item": [
        {
          "name": "GET /health/ - ‚ù§Ô∏è Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/health/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                  "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('No server errors (500)', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞",
                  "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.access) {",
                  "            pm.environment.set('access_token', response.access);",
                  "            console.log('‚úÖ Access token updated');",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}",
                  "",
                  "// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            const requestName = pm.info.requestName.toLowerCase();",
                  "            if (requestName.includes('modification')) {",
                  "                pm.environment.set('created_modification_id', response.id);",
                  "            } else if (requestName.includes('color')) {",
                  "                pm.environment.set('created_color_id', response.id);",
                  "            } else if (requestName.includes('mark')) {",
                  "                pm.environment.set('created_mark_id', response.id);",
                  "            } else if (requestName.includes('model')) {",
                  "                pm.environment.set('created_model_id', response.id);",
                  "            } else if (requestName.includes('generation')) {",
                  "                pm.environment.set('created_generation_id', response.id);",
                  "            } else if (requestName.includes('user')) {",
                  "                pm.environment.set('created_user_id', response.id);",
                  "            } else if (requestName.includes('account')) {",
                  "                pm.environment.set('created_account_id', response.id);",
                  "            }",
                  "        }",
                  "    } catch (e) {",
                  "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}