# Dockerfile for running Django with automatic RabbitMQ consumers
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=config.settings

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        build-essential \
        libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy project
COPY . /app/

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🚀 Starting Django with automatic RabbitMQ consumers..."\n\
\n\
# Wait for database\n\
echo "⏳ Waiting for database..."\n\
python manage.py wait_for_db\n\
\n\
# Run migrations\n\
echo "📊 Running migrations..."\n\
python manage.py migrate --noinput\n\
\n\
# Create notification templates\n\
echo "📧 Creating notification templates..."\n\
python manage.py create_notification_templates\n\
\n\
# Setup permissions\n\
echo "🔐 Setting up permissions..."\n\
python manage.py setup_permissions\n\
\n\
# Start Django server (consumers will auto-start)\n\
echo "🎧 Starting Django server with automatic consumer listening..."\n\
exec python manage.py runserver 0.0.0.0:8000\n\
' > /app/entrypoint.sh

RUN chmod +x /app/entrypoint.sh

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Run entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
