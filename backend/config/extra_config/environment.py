"""
Environment loading configuration.
Handles loading of environment variables from different sources.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent.parent  # backend directory
ROOT_DIR = BASE_DIR.parent  # project root directory

def load_environment():
    """
    Optimized environment loading without branching logic
    Uses file manipulation instead of complex conditionals
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ ENV_SETUP.md
    # –ü–æ—Ä—è–¥–æ–∫: base ‚Üí secrets ‚Üí local ‚Üí service-specific
    env_files = [
        ROOT_DIR / "env-config" / ".env.base",      # 1. –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        ROOT_DIR / "env-config" / ".env.secrets",   # 2. –°–µ–∫—Ä–µ—Ç—ã
        ROOT_DIR / "env-config" / ".env.local",     # 3. –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏—è
        BASE_DIR / ".env"                           # 4. Backend-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    ]

    print("üîß Loading Django environment...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–æ—Ä—è–¥–∫—É (–±–µ–∑ –≤–µ—Ç–≤–ª–µ–Ω–∏–π!)
    for i, env_file in enumerate(env_files, 1):
        if env_file.exists():
            load_dotenv(env_file, override=True)
            print(f"  {i}. ‚úÖ {env_file.relative_to(ROOT_DIR)}")
        else:
            print(f"  {i}. ‚ö†Ô∏è {env_file.relative_to(ROOT_DIR)} (not found)")

    print("üéâ Django environment loaded!")

# Load environment variables when module is imported
load_environment()

# Export environment info
__all__ = [
    'load_environment',
    'BASE_DIR',
    'ROOT_DIR',
]
