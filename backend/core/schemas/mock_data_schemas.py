"""
Pydantic schemas for mock data generation.
Define the structure of data to be generated by LLM.
"""
from typing import Optional, List
from decimal import Decimal
from datetime import datetime, date
from pydantic import BaseModel, EmailStr, Field, validator
from enum import Enum


class AccountTypeEnum(str, Enum):
    BASIC = "basic"
    PREMIUM = "premium"


class RoleEnum(str, Enum):
    BUYER = "buyer"
    SELLER = "seller"
    MANAGER = "manager"
    ADMIN = "admin"


class CurrencyEnum(str, Enum):
    UAH = "UAH"
    USD = "USD"
    EUR = "EUR"


class SellerTypeEnum(str, Enum):
    PRIVATE = "private"
    DEALER = "dealer"


# User and Profile Schemas
class MockUserSchema(BaseModel):
    """Schema for generating user data."""
    email: EmailStr = Field(..., description="Unique email address")
    is_active: bool = Field(default=True, description="Whether user is active")
    is_staff: bool = Field(default=False, description="Whether user is staff")
    is_superuser: bool = Field(default=False, description="Whether user is superuser")


class MockProfileSchema(BaseModel):
    """Schema for generating user profile data."""
    name: str = Field(..., min_length=2, max_length=50, description="First name")
    surname: str = Field(..., min_length=2, max_length=50, description="Last name")
    age: Optional[int] = Field(None, ge=18, le=100, description="Age between 18 and 100")


class MockAccountSchema(BaseModel):
    """Schema for generating account data."""
    account_type: AccountTypeEnum = Field(default=AccountTypeEnum.BASIC)
    role: RoleEnum = Field(default=RoleEnum.SELLER)
    organization_name: Optional[str] = Field(None, max_length=255, description="Organization name for dealers")
    stats_enabled: bool = Field(default=False, description="Whether statistics are enabled")


class MockContactSchema(BaseModel):
    """Schema for generating contact data."""
    contact_type: str = Field(..., description="Type of contact (phone, email, etc.)")
    contact_value: str = Field(..., description="Contact value (phone number, email, etc.)")
    is_primary: bool = Field(default=False, description="Whether this is primary contact")
    is_verified: bool = Field(default=False, description="Whether contact is verified")


class MockAddressSchema(BaseModel):
    """Schema for generating address data."""
    country: str = Field(default="Україна", description="Country name")
    region: str = Field(..., description="Region/Oblast name")
    district: Optional[str] = Field(None, description="District name")
    locality: str = Field(..., description="City or village name")
    street: Optional[str] = Field(None, description="Street name")
    building: Optional[str] = Field(None, description="Building number")
    apartment: Optional[str] = Field(None, description="Apartment number")
    postal_code: Optional[str] = Field(None, description="Postal code")


# Car Advertisement Schemas
class MockCarAdSchema(BaseModel):
    """Schema for generating car advertisement data."""
    title: str = Field(..., min_length=10, max_length=255, description="Advertisement title")
    description: str = Field(..., min_length=50, max_length=2000, description="Detailed car description")
    price: Decimal = Field(..., gt=0, description="Car price")
    currency: CurrencyEnum = Field(default=CurrencyEnum.UAH)
    year: int = Field(..., ge=1990, le=2024, description="Car manufacture year")
    mileage: int = Field(..., ge=0, le=500000, description="Car mileage in km")
    seller_type: SellerTypeEnum = Field(default=SellerTypeEnum.PRIVATE)
    
    @validator('price')
    def validate_price(cls, v):
        if v <= 0:
            raise ValueError('Price must be positive')
        return v


class MockCarSpecificationSchema(BaseModel):
    """Schema for generating car specification data."""
    engine_volume: Optional[float] = Field(None, ge=0.8, le=8.0, description="Engine volume in liters")
    fuel_type: Optional[str] = Field(None, description="Fuel type (petrol, diesel, electric, etc.)")
    transmission: Optional[str] = Field(None, description="Transmission type")
    drive_type: Optional[str] = Field(None, description="Drive type (front, rear, all)")
    body_type: Optional[str] = Field(None, description="Body type (sedan, hatchback, SUV, etc.)")
    condition: Optional[str] = Field(None, description="Car condition")
    number_of_doors: Optional[int] = Field(None, ge=2, le=5, description="Number of doors")
    number_of_seats: Optional[int] = Field(None, ge=2, le=9, description="Number of seats")


class MockCarMetadataSchema(BaseModel):
    """Schema for generating car metadata."""
    is_active: bool = Field(default=True)
    is_verified: bool = Field(default=False)
    is_vip: bool = Field(default=False)
    is_premium: bool = Field(default=False)
    is_highlighted: bool = Field(default=False)
    is_urgent: bool = Field(default=False)
    views_count: int = Field(default=0, ge=0)
    phone_views_count: int = Field(default=0, ge=0)


# Reference Data Schemas
class MockRegionSchema(BaseModel):
    """Schema for generating region data."""
    name: str = Field(..., description="Region name in Ukrainian")
    name_en: Optional[str] = Field(None, description="Region name in English")
    code: Optional[str] = Field(None, description="Region code")
    is_active: bool = Field(default=True)


class MockCitySchema(BaseModel):
    """Schema for generating city data."""
    name: str = Field(..., description="City name in Ukrainian")
    name_en: Optional[str] = Field(None, description="City name in English")
    population: Optional[int] = Field(None, ge=1000, description="City population")
    is_regional_center: bool = Field(default=False)
    is_active: bool = Field(default=True)


# Statistics and Analytics Schemas
class MockAdViewSchema(BaseModel):
    """Schema for generating ad view data."""
    ip_address: str = Field(..., description="Viewer IP address")
    user_agent: Optional[str] = Field(None, description="Browser user agent")
    view_type: str = Field(default="full", description="Type of view (full, preview, etc.)")
    view_duration: Optional[int] = Field(None, ge=1, description="View duration in seconds")


class MockSavedSearchSchema(BaseModel):
    """Schema for generating saved search data."""
    name: str = Field(..., description="Search name")
    search_criteria: dict = Field(default_factory=dict, description="Search criteria as JSON")
    is_active: bool = Field(default=True)
    notification_enabled: bool = Field(default=True)


# Exchange Rate Schema
class MockExchangeRateSchema(BaseModel):
    """Schema for generating exchange rate data."""
    from_currency: CurrencyEnum = Field(...)
    to_currency: CurrencyEnum = Field(...)
    rate: Decimal = Field(..., gt=0, description="Exchange rate")
    source: str = Field(default="PrivatBank", description="Rate source")
    
    @validator('rate')
    def validate_rate(cls, v):
        if v <= 0:
            raise ValueError('Exchange rate must be positive')
        return v


# Complex schemas for related data
class MockUserWithProfileSchema(BaseModel):
    """Schema for generating user with profile data."""
    user: MockUserSchema
    profile: MockProfileSchema


class MockSellerWithAccountSchema(BaseModel):
    """Schema for generating seller with account data."""
    user: MockUserSchema
    profile: MockProfileSchema
    account: MockAccountSchema
    contacts: List[MockContactSchema] = Field(default_factory=list)
    addresses: List[MockAddressSchema] = Field(default_factory=list)


class MockCarAdWithDetailsSchema(BaseModel):
    """Schema for generating complete car advertisement."""
    ad: MockCarAdSchema
    specifications: MockCarSpecificationSchema
    metadata: MockCarMetadataSchema


# Batch generation schemas
class MockDataBatchSchema(BaseModel):
    """Schema for batch data generation configuration."""
    users_count: int = Field(default=50, ge=1, le=1000)
    sellers_count: int = Field(default=30, ge=1, le=500)
    managers_count: int = Field(default=5, ge=1, le=20)
    admins_count: int = Field(default=2, ge=1, le=5)
    car_ads_count: int = Field(default=200, ge=1, le=2000)
    regions_count: int = Field(default=25, ge=1, le=50)
    cities_per_region: int = Field(default=10, ge=1, le=50)
    
    @validator('*')
    def validate_counts(cls, v):
        if v < 1:
            raise ValueError('Count must be at least 1')
        return v
