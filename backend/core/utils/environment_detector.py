"""
Environment Detection Utility
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ –∫–æ—Å–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º, –∞ –Ω–µ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import socket
import subprocess
from pathlib import Path
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class EnvironmentDetector:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –∫–æ—Å–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º.
    """
    
    _cache: Dict[str, Any] = {}
    
    @classmethod
    def is_docker(cls) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é IS_DOCKER, –∫–æ—Ç–æ—Ä–∞—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ docker-compose.yml
        """
        if 'is_docker' in cls._cache:
            return cls._cache['is_docker']

        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è IS_DOCKER –∏–∑ docker-compose.yml
        is_docker_env = os.environ.get('IS_DOCKER', '').lower() == 'true'

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        additional_checks = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ /.dockerenv
        dockerenv_exists = os.path.exists('/.dockerenv')
        additional_checks.append(('dockerenv_file', dockerenv_exists))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ hostname (Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ hex –∏–º–µ–Ω–∞)
        hostname_docker = False
        try:
            hostname = socket.gethostname()
            if len(hostname) == 12 and all(c in '0123456789abcdef' for c in hostname.lower()):
                hostname_docker = True
        except:
            pass
        additional_checks.append(('hostname_pattern', hostname_docker))

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        is_docker = is_docker_env or dockerenv_exists  # IS_DOCKER –∏–ª–∏ /.dockerenv

        cls._cache['is_docker'] = is_docker

        logger.info(f"Environment detection:")
        logger.info(f"  IS_DOCKER env var: {is_docker_env}")
        logger.info(f"  Additional checks: {additional_checks}")
        logger.info(f"  Final result: {'üê≥ Docker' if is_docker else 'üíª Local'}")

        return is_docker
    
    @classmethod
    def get_database_config(cls) -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        if cls.is_docker():
            # –í Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ docker-compose.yml
            return {
                'HOST': 'pg',  # –¢–æ—á–Ω–æ–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ docker-compose.yml
                'PORT': '5432',
                'NAME': os.environ.get('POSTGRES_DB', os.environ.get('POSTGRES_NAME', 'db')),
                'USER': os.environ.get('POSTGRES_USER', 'user'),
                'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'password'),
            }
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
            return {
                'HOST': 'localhost',
                'PORT': '5432',
                'NAME': os.environ.get('POSTGRES_DB', 'db'),
                'USER': os.environ.get('POSTGRES_USER', 'user'),
                'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'password'),
            }
    
    @classmethod
    def get_redis_config(cls) -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Redis –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        if cls.is_docker():
            return {
                'HOST': 'redis',  # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose.yml
                'PORT': '6379',
                'DB': '0',
            }
        else:
            return {
                'HOST': 'localhost',
                'PORT': '6379',
                'DB': '0',
            }
    
    @classmethod
    def should_run_seeds(cls) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å seeds –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        # –í Docker seeds –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        if cls.is_docker():
            # –í Docker –∑–∞–ø—É—Å–∫–∞–µ–º seeds —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
            return os.environ.get('RUN_SEEDS', 'false').lower() == 'true'
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º seeds –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return os.environ.get('RUN_SEEDS', 'true').lower() == 'true'
    
    @classmethod
    def get_allowed_hosts(cls) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        if cls.is_docker():
            return ['*']  # –í Docker —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ö–æ—Å—Ç—ã
        else:
            return ['localhost', '127.0.0.1', '0.0.0.0']
    
    @classmethod
    def get_cors_origins(cls) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö CORS origins –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        if cls.is_docker():
            return [
                'http://localhost:3000',
                'http://127.0.0.1:3000',
                'http://frontend:3000',  # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ Docker
            ]
        else:
            return [
                'http://localhost:3000',
                'http://127.0.0.1:3000',
            ]
    
    @classmethod
    def print_environment_info(cls):
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
        """
        is_docker = cls.is_docker()
        db_config = cls.get_database_config()
        redis_config = cls.get_redis_config()
        
        print("üîç ENVIRONMENT DETECTION RESULTS:")
        print("=" * 50)
        print(f"Environment: {'üê≥ Docker Container' if is_docker else 'üíª Local Development'}")
        print(f"Database Host: {db_config['HOST']}")
        print(f"Redis Host: {redis_config['HOST']}")
        print(f"Run Seeds: {cls.should_run_seeds()}")
        print(f"Allowed Hosts: {cls.get_allowed_hosts()}")
        print("=" * 50)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
env_detector = EnvironmentDetector()
