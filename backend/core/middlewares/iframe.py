"""
Middleware –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ iframe
DRY –ø—Ä–∏–Ω—Ü–∏–ø - –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö iframe –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import logging

logger = logging.getLogger(__name__)

class AllowIframeMiddleware:
    """
    Middleware –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è X-Frame-Options –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (Django, nginx, –¥—Ä—É–≥–∏–µ middleware)
    """

    # –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ iframe
    IFRAME_ALLOWED_PATHS = [
        '/api/doc',      # Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        '/api/doc/',     # Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å —Å–ª–µ—à–µ–º
        '/api/docs',     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        '/api/docs/',    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Å–ª–µ—à–µ–º
        '/admin/doc',    # Django admin –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        '/admin/doc/',   # Django admin –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å —Å–ª–µ—à–µ–º
        '/health',       # Health check
        '/static/drf-yasg/',  # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã Swagger UI
    ]

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        print(f"üîß AllowIframeMiddleware: Processing {request.path}")
        logger.info(f"üîß AllowIframeMiddleware: Processing {request.path}")

        response = self.get_response(request)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        original_frame_options = response.get('X-Frame-Options', '–ù–ï–¢')
        logger.info(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–π X-Frame-Options: {original_frame_options}")

        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã X-Frame-Options –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers_to_remove = [
            'X-Frame-Options',
            'x-frame-options',
            'X-FRAME-OPTIONS',
            'x-Frame-Options'
        ]

        removed_headers = []
        for header in headers_to_remove:
            if header in response:
                del response[header]
                removed_headers.append(header)

        if removed_headers:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏: {removed_headers}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø—É—Ç—å –¥–ª—è iframe
        path_allowed = any(
            request.path.startswith(allowed_path)
            for allowed_path in self.IFRAME_ALLOWED_PATHS
        )

        if path_allowed:
            # –î–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è iframe
            logger.info(f"‚úÖ –ü—É—Ç—å {request.path} —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è iframe - –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º X-Frame-Options")
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SAMEORIGIN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            response['X-Frame-Options'] = 'SAMEORIGIN'
            logger.info(f"üîí –ü—É—Ç—å {request.path} –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è iframe - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SAMEORIGIN")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_frame_options = response.get('X-Frame-Options', '–ù–ï–¢')
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π X-Frame-Options: {final_frame_options}")

        return response
