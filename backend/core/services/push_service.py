"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import json
import logging
import requests
from typing import Dict, List, Optional, Any
from django.conf import settings
from celery import shared_task

logger = logging.getLogger(__name__)


class PushNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.firebase_server_key = os.environ.get('FIREBASE_SERVER_KEY', '')
        self.firebase_url = 'https://fcm.googleapis.com/fcm/send'
        self.vapid_public_key = os.environ.get('VAPID_PUBLIC_KEY', '')
        self.vapid_private_key = os.environ.get('VAPID_PRIVATE_KEY', '')
    
    def send_to_device(self, 
                      device_token: str, 
                      title: str, 
                      body: str, 
                      data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
        Args:
            device_token: FCM —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            body: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not self.firebase_server_key:
            logger.warning("‚ö†Ô∏è Firebase Server Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {'success': False, 'error': 'Firebase not configured'}
        
        headers = {
            'Authorization': f'key={self.firebase_server_key}',
            'Content-Type': 'application/json'
        }
        
        payload = {
            'to': device_token,
            'notification': {
                'title': title,
                'body': body,
                'icon': '/static/icons/notification-icon.png',
                'click_action': 'FLUTTER_NOTIFICATION_CLICK'
            }
        }
        
        if data:
            payload['data'] = data
        
        try:
            response = requests.post(
                self.firebase_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            logger.info(f"‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {device_token[:20]}...")
            return {'success': True, 'result': result}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {'success': False, 'error': str(e)}
    
    def send_to_multiple_devices(self, 
                               device_tokens: List[str], 
                               title: str, 
                               body: str, 
                               data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.firebase_server_key:
            logger.warning("‚ö†Ô∏è Firebase Server Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {'success': False, 'error': 'Firebase not configured'}
        
        headers = {
            'Authorization': f'key={self.firebase_server_key}',
            'Content-Type': 'application/json'
        }
        
        payload = {
            'registration_ids': device_tokens,
            'notification': {
                'title': title,
                'body': body,
                'icon': '/static/icons/notification-icon.png'
            }
        }
        
        if data:
            payload['data'] = data
        
        try:
            response = requests.post(
                self.firebase_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            logger.info(f"‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(device_tokens)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return {'success': True, 'result': result}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ push: {e}")
            return {'success': False, 'error': str(e)}
    
    def send_to_topic(self, 
                     topic: str, 
                     title: str, 
                     body: str, 
                     data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–æ–ø–∏–∫—É"""
        if not self.firebase_server_key:
            logger.warning("‚ö†Ô∏è Firebase Server Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {'success': False, 'error': 'Firebase not configured'}
        
        headers = {
            'Authorization': f'key={self.firebase_server_key}',
            'Content-Type': 'application/json'
        }
        
        payload = {
            'to': f'/topics/{topic}',
            'notification': {
                'title': title,
                'body': body,
                'icon': '/static/icons/notification-icon.png'
            }
        }
        
        if data:
            payload['data'] = data
        
        try:
            response = requests.post(
                self.firebase_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            logger.info(f"‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ç–æ–ø–∏–∫—É: {topic}")
            return {'success': True, 'result': result}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –ø–æ —Ç–æ–ø–∏–∫—É: {e}")
            return {'success': False, 'error': str(e)}


# Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@shared_task(bind=True, max_retries=3)
def send_push_notification_async(self, device_token: str, title: str, body: str, data: Dict[str, Any] = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        push_service = PushNotificationService()
        result = push_service.send_to_device(device_token, title, body, data)
        
        if not result['success']:
            raise Exception(result.get('error', 'Unknown error'))
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ push: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise


@shared_task(bind=True, max_retries=3)
def send_bulk_push_notification_async(self, device_tokens: List[str], title: str, body: str, data: Dict[str, Any] = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        push_service = PushNotificationService()
        result = push_service.send_to_multiple_devices(device_tokens, title, body, data)
        
        if not result['success']:
            raise Exception(result.get('error', 'Unknown error'))
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ push: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class AutoriaPushNotifications:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è AutoRia"""
    
    @staticmethod
    def send_ad_approved_push(device_token: str, ad_title: str, ad_id: int):
        """Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        data = {
            'type': 'ad_approved',
            'ad_id': str(ad_id),
            'action': 'open_ad'
        }
        send_push_notification_async.delay(
            device_token=device_token,
            title='‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!',
            body=f'–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "{ad_title}" —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
            data=data
        )
    
    @staticmethod
    def send_new_message_push(device_token: str, sender_name: str, ad_title: str):
        """Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        data = {
            'type': 'new_message',
            'action': 'open_messages'
        }
        send_push_notification_async.delay(
            device_token=device_token,
            title='üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            body=f'{sender_name} –Ω–∞–ø–∏—Å–∞–ª –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é "{ad_title}"',
            data=data
        )
    
    @staticmethod
    def send_price_drop_alert_push(device_tokens: List[str], brand: str, model: str, new_price: str):
        """Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        data = {
            'type': 'price_drop',
            'action': 'open_search'
        }
        send_bulk_push_notification_async.delay(
            device_tokens=device_tokens,
            title='üí∞ –¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞!',
            body=f'{brand} {model} —Ç–µ–ø–µ—Ä—å –æ—Ç {new_price}',
            data=data
        )
    
    @staticmethod
    def send_premium_upgrade_push(device_token: str):
        """Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ Premium"""
        data = {
            'type': 'premium_upgrade',
            'action': 'open_premium'
        }
        send_push_notification_async.delay(
            device_token=device_token,
            title='üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Premium!',
            body='–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            data=data
        )


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'PushNotificationService',
    'AutoriaPushNotifications',
    'send_push_notification_async',
    'send_bulk_push_notification_async'
]
