"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º mailing
"""

import os
import json
import logging
import requests
from typing import Dict, List, Optional, Any
from django.conf import settings
from celery import shared_task

logger = logging.getLogger(__name__)


class MailingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å mailing"""
    
    def __init__(self):
        self.mailing_service_url = os.environ.get('MAILING_SERVICE_URL', 'http://mailing-service:8001')
        self.api_key = os.environ.get('MAILING_API_KEY', 'dev-api-key')
        self.timeout = int(os.environ.get('MAILING_TIMEOUT', '30'))
        
    def _make_request(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É mailing"""
        url = f"{self.mailing_service_url}/api/v1/{endpoint}"
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}',
            'X-Service': 'autoria-backend'
        }
        
        try:
            response = requests.post(
                url, 
                json=data, 
                headers=headers, 
                timeout=self.timeout
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            raise MailingServiceError(f"Failed to send email: {e}")
    
    def send_email(self, 
                   to_email: str, 
                   subject: str, 
                   template: str, 
                   context: Dict[str, Any],
                   priority: str = 'normal') -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å mailing
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            template: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low, normal, high)
        """
        data = {
            'to_email': to_email,
            'subject': subject,
            'template': template,
            'context': context,
            'priority': priority,
            'service': 'autoria'
        }
        
        logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email: {to_email} | {subject}")
        return self._make_request('send-email', data)
    
    def send_bulk_email(self, 
                       recipients: List[str], 
                       subject: str, 
                       template: str, 
                       context: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        data = {
            'recipients': recipients,
            'subject': subject,
            'template': template,
            'context': context,
            'service': 'autoria'
        }
        
        logger.info(f"üìß –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        return self._make_request('send-bulk-email', data)


class MailingServiceError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ mailing"""
    pass


# Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email
@shared_task(bind=True, max_retries=3)
def send_email_async(self, to_email: str, subject: str, template: str, context: Dict[str, Any]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email"""
    try:
        mailing_service = MailingService()
        result = mailing_service.send_email(to_email, subject, template, context)
        logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {to_email}")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise


@shared_task(bind=True, max_retries=3)
def send_bulk_email_async(self, recipients: List[str], subject: str, template: str, context: Dict[str, Any]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        mailing_service = MailingService()
        result = mailing_service.send_bulk_email(recipients, subject, template, context)
        logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    @staticmethod
    def send_ad_approved_notification(user_email: str, ad_title: str, ad_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        context = {
            'ad_title': ad_title,
            'ad_id': ad_id,
            'ad_url': f"{settings.FRONTEND_URL}/ads/{ad_id}"
        }
        send_email_async.delay(
            to_email=user_email,
            subject='‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!',
            template='ad_approved',
            context=context
        )
    
    @staticmethod
    def send_ad_rejected_notification(user_email: str, ad_title: str, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        context = {
            'ad_title': ad_title,
            'reason': reason,
            'support_url': f"{settings.FRONTEND_URL}/support"
        }
        send_email_async.delay(
            to_email=user_email,
            subject='‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            template='ad_rejected',
            context=context
        )
    
    @staticmethod
    def send_ad_needs_review_notification(user_email: str, ad_title: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        context = {
            'ad_title': ad_title,
            'edit_url': f"{settings.FRONTEND_URL}/my-ads"
        }
        send_email_async.delay(
            to_email=user_email,
            subject='‚è≥ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            template='ad_needs_review',
            context=context
        )
    
    @staticmethod
    def send_premium_upgrade_notification(user_email: str, user_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ Premium"""
        context = {
            'user_name': user_name,
            'premium_features_url': f"{settings.FRONTEND_URL}/premium-features"
        }
        send_email_async.delay(
            to_email=user_email,
            subject='üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Premium!',
            template='premium_upgrade',
            context=context
        )
    
    @staticmethod
    def send_new_message_notification(user_email: str, sender_name: str, ad_title: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        context = {
            'sender_name': sender_name,
            'ad_title': ad_title,
            'messages_url': f"{settings.FRONTEND_URL}/messages"
        }
        send_email_async.delay(
            to_email=user_email,
            subject='üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é',
            template='new_message',
            context=context
        )


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'MailingService',
    'MailingServiceError',
    'NotificationService',
    'send_email_async',
    'send_bulk_email_async'
]
