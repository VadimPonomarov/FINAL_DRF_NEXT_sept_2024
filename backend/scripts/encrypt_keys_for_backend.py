#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π –¥–ª—è backend Django.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ —Å–∏—Å—Ç–µ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ backend.
"""

import os
import sys
import base64
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('backend')

def get_encryption_key() -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Django SECRET_KEY.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ backend/core/security/encryption_service.py
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ SECRET_KEY, —á—Ç–æ –∏ –≤ .env.secrets
    secret_key = "django-secure-k8x9m2n4p6q8r1s3t5u7v9w2x4y6z8a1b3c5d7e9f2g4h6i8j1k3l5m7n9o2p4q6r8s1t3u5v7w9x2y4z6"
    
    if not secret_key:
        raise ValueError("Django SECRET_KEY is required for encryption")
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å–æ–ª—å, —á—Ç–æ –∏ –≤ backend
    salt = b"api_key_encryption_salt_v1"
    
    # Derive key using PBKDF2
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )
    
    key = base64.urlsafe_b64encode(kdf.derive(secret_key.encode()))
    return key

def encrypt_api_key(data: str, context: str = "data") -> str:
    """
    –®–∏—Ñ—Ä—É–µ—Ç API –∫–ª—é—á.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ backend.
    """
    if not data:
        raise ValueError(f"Cannot encrypt empty {context}")
        
    key = get_encryption_key()
    fernet = Fernet(key)
    
    try:
        encrypted_bytes = fernet.encrypt(data.encode('utf-8'))
        encrypted_str = base64.urlsafe_b64encode(encrypted_bytes).decode('utf-8')
        print(f"‚úÖ Successfully encrypted {context}")
        return encrypted_str
    except Exception as e:
        print(f"‚ùå Failed to encrypt {context}: {e}")
        raise ValueError(f"Encryption failed for {context}: {e}")

def main():
    """–®–∏—Ñ—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –¥–ª—è backend."""
    
    print("üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è backend Django")
    print("=" * 50)
    
    # –ö–ª—é—á–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    keys_to_encrypt = {
        'GOOGLE_CLIENT_SECRET': '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',
        'TAVILY_API_KEY': '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',
        # Placeholder –∫–ª—é—á–∏ (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        'GOOGLE_API_KEY': 'AIzaSyC_PLACEHOLDER_NEED_REAL_GOOGLE_API_KEY_HERE_39chars',
        'GOOGLE_MAPS_API_KEY': 'AIzaSyC_PLACEHOLDER_NEED_REAL_GOOGLE_MAPS_KEY_HERE_39chars',
    }
    
    encrypted_keys = {}
    
    for key_name, key_value in keys_to_encrypt.items():
        try:
            encrypted_value = encrypt_api_key(key_value, key_name)
            encrypted_key_name = f"ENCRYPTED_{key_name}"
            encrypted_keys[encrypted_key_name] = encrypted_value
            
            print(f"üîë {key_name}:")
            print(f"   {encrypted_key_name}={encrypted_value}")
            print()
            
        except Exception as e:
            print(f"‚ùå Error encrypting {key_name}: {e}")
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ env-config/.env.secrets:")
    print("=" * 60)
    print("# =============================================================================")
    print("# –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ï –ö–õ–Æ–ß–ò –î–õ–Ø BACKEND (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã)")
    print("# =============================================================================")
    
    for encrypted_key_name, encrypted_value in encrypted_keys.items():
        print(f"{encrypted_key_name}={encrypted_value}")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ env-config/.env.secrets")
    print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
    print("- Backend –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å —ç—Ç–∏ –∫–ª—é—á–∏")
    print("- Placeholder –∫–ª—é—á–∏ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è")
    print("- –°–∏—Å—Ç–µ–º–∞ fallback: –µ—Å–ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π")

if __name__ == "__main__":
    main()
