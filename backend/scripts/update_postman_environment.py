#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Postman
—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.ads.models import CarAd, CarModificationModel, CarColorModel, CarMarkModel, CarModel, CarGenerationModel, AdView
from apps.accounts.models import AddsAccount

User = get_user_model()

def get_real_data_from_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    data = {}
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    try:
        modifications = list(CarModificationModel.objects.values_list('id', flat=True)[:50])
        data['modification_ids'] = modifications
        data['modification_id'] = modifications[0] if modifications else 1
        print(f"‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(modifications)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}")
        data['modification_ids'] = [1]
        data['modification_id'] = 1

    # –ü–æ–ª—É—á–∞–µ–º ID —Ü–≤–µ—Ç–æ–≤
    try:
        colors = list(CarColorModel.objects.values_list('id', flat=True)[:50])
        data['color_ids'] = colors
        data['color_id'] = colors[0] if colors else 1
        print(f"‚úÖ –¶–≤–µ—Ç–∞: {len(colors)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤: {e}")
        data['color_ids'] = [1]
        data['color_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ä–æ–∫
    try:
        marks = list(CarMarkModel.objects.values_list('id', flat=True)[:50])
        data['mark_ids'] = marks
        data['mark_id'] = marks[0] if marks else 1
        print(f"‚úÖ –ú–∞—Ä–∫–∏: {len(marks)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–æ–∫: {e}")
        data['mark_ids'] = [1]
        data['mark_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–µ–π
    try:
        models = list(CarModel.objects.values_list('id', flat=True)[:50])
        data['model_ids'] = models
        data['model_id'] = models[0] if models else 1
        print(f"‚úÖ –ú–æ–¥–µ–ª–∏: {len(models)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        data['model_ids'] = [1]
        data['model_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∫–æ–ª–µ–Ω–∏–π
    try:
        generations = list(CarGenerationModel.objects.values_list('id', flat=True)[:50])
        data['generation_ids'] = generations
        data['generation_id'] = generations[0] if generations else 1
        print(f"‚úÖ –ü–æ–∫–æ–ª–µ–Ω–∏—è: {len(generations)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏–π: {e}")
        data['generation_ids'] = [1]
        data['generation_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        users = list(User.objects.values_list('id', flat=True)[:50])
        data['user_ids'] = users
        data['user_id'] = users[0] if users else 1
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        data['user_ids'] = [1]
        data['user_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    try:
        accounts = list(AddsAccount.objects.values_list('id', flat=True)[:50])
        data['account_ids'] = accounts
        data['account_id'] = accounts[0] if accounts else 1
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã: {len(accounts)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        data['account_ids'] = [1]
        data['account_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    try:
        ads = list(CarAd.objects.values_list('id', flat=True)[:50])
        data['ad_ids'] = ads
        data['ad_id'] = ads[0] if ads else 1
        print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è: {len(ads)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        data['ad_ids'] = [1]
        data['ad_id'] = 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        data['total_ads'] = CarAd.objects.count()
        data['active_ads'] = CarAd.objects.filter(status='active').count()
        data['total_users'] = User.objects.count()
        data['total_accounts'] = AddsAccount.objects.count()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {data['total_ads']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, {data['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        data['total_ads'] = 0
        data['active_ads'] = 0
        data['total_users'] = 0
        data['total_accounts'] = 0
    
    return data

def update_postman_environment(real_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è Postman —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    env_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_DYNAMIC_IDS.postman_environment.json"
    
    if not env_file.exists():
        print(f"‚ùå –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        with open(env_file, 'r', encoding='utf-8') as f:
            environment = json.load(f)
        
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for value in environment['values']:
            key = value['key']
            
            if key in real_data:
                if isinstance(real_data[key], list):
                    value['value'] = json.dumps(real_data[key])
                else:
                    value['value'] = str(real_data[key])
                print(f"  ‚úÖ {key}: {value['value'][:50]}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_found = False
        for value in environment['values']:
            if value['key'] == 'last_updated':
                value['value'] = str(int(time.time()))
                metadata_found = True
                break
        
        if not metadata_found:
            environment['values'].append({
                "key": "last_updated",
                "value": str(int(time.time())),
                "enabled": True
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        with open(env_file, 'w', encoding='utf-8') as f:
            json.dump(environment, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {env_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def create_dynamic_environment_script():
    """–°–æ–∑–¥–∞–µ—Ç JavaScript —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ Postman"""
    script_content = f"""
// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ë–î
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomId(arrayVar, fallback = '1') {{
    try {{
        const ids = JSON.parse(pm.environment.get(arrayVar) || '[]');
        if (ids.length > 0) {{
            return ids[Math.floor(Math.random() * ids.length)];
        }}
    }} catch (e) {{
        console.log('Error getting random ID for', arrayVar, ':', e);
    }}
    return fallback;
}}

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
pm.environment.set('dynamic_modification_id', getRandomId('modification_ids'));
pm.environment.set('dynamic_color_id', getRandomId('color_ids'));
pm.environment.set('dynamic_mark_id', getRandomId('mark_ids'));
pm.environment.set('dynamic_model_id', getRandomId('model_ids'));
pm.environment.set('dynamic_generation_id', getRandomId('generation_ids'));
pm.environment.set('dynamic_user_id', getRandomId('user_ids'));
pm.environment.set('dynamic_account_id', getRandomId('account_ids'));
pm.environment.set('dynamic_ad_id', getRandomId('ad_ids'));

// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîÑ Dynamic IDs updated:', {{
    modification: pm.environment.get('dynamic_modification_id'),
    color: pm.environment.get('dynamic_color_id'),
    mark: pm.environment.get('dynamic_mark_id'),
    model: pm.environment.get('dynamic_model_id'),
    generation: pm.environment.get('dynamic_generation_id'),
    user: pm.environment.get('dynamic_user_id'),
    account: pm.environment.get('dynamic_account_id'),
    ad: pm.environment.get('dynamic_ad_id')
}});
"""
    
    script_file = Path(__file__).parent.parent / "postman_dynamic_script.js"
    with open(script_file, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è Postman: {script_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Postman —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    real_data = get_real_data_from_db()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Postman
    if update_postman_environment(real_data):
        print("\n‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç
    create_dynamic_environment_script()
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î")
    print("2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ Postman")
    print("3. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã - –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID")
    print("4. –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏")
    
    return True

if __name__ == "__main__":
    import time
    main()
