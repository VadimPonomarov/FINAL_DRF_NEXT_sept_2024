#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å 184 —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
"""

import subprocess
import json
import sys
from pathlib import Path

def run_full_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å Newman"""
    print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å 184 —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏")
    print("=" * 50)
    
    collection_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_FULL_SWAGGER.postman_collection.json"
    environment_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_DYNAMIC_IDS.postman_environment.json"
    
    if not collection_file.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {collection_file}")
        return False
    
    if not environment_file.exists():
        print(f"‚ùå –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {environment_file}")
        return False
    
    print(f"üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection_file.name}")
    print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {environment_file.name}")
    
    # –ö–æ–º–∞–Ω–¥–∞ Newman
    cmd = [
        'newman', 'run', str(collection_file),
        '-e', str(environment_file),
        '--delay-request', '500',  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        '--timeout-request', '10000',
        '--reporters', 'cli,json',
        '--reporter-json-export', 'full_test_results.json',
        '--bail'  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    ]
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Newman...")
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=collection_file.parent)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(result.stderr)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyze_results()
        
        return result.returncode == 0
        
    except FileNotFoundError:
        print("‚ùå Newman –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Newman:")
        print("   npm install -g newman")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Newman: {e}")
        return False

def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    results_file = Path(__file__).parent.parent / "full_test_results.json"
    
    if not results_file.exists():
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(results_file, 'r', encoding='utf-8') as f:
            results = json.load(f)
        
        run_stats = results.get('run', {}).get('stats', {})
        
        print("\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {run_stats.get('requests', {}).get('total', 0)}")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {run_stats.get('requests', {}).get('total', 0) - run_stats.get('requests', {}).get('failed', 0)}")
        print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {run_stats.get('requests', {}).get('failed', 0)}")
        
        print(f"  üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {run_stats.get('assertions', {}).get('total', 0)}")
        print(f"  ‚úÖ –ü—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤: {run_stats.get('assertions', {}).get('total', 0) - run_stats.get('assertions', {}).get('failed', 0)}")
        print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {run_stats.get('assertions', {}).get('failed', 0)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
        failures = results.get('run', {}).get('failures', [])
        if failures:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´ ({len(failures)}):")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
            error_types = {}
            for failure in failures:
                error = failure.get('error', {})
                error_name = error.get('name', 'Unknown error')
                
                if error_name not in error_types:
                    error_types[error_name] = []
                error_types[error_name].append(failure)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
            for error_type, type_failures in error_types.items():
                print(f"\n  üî¥ {error_type} ({len(type_failures)} —Å–ª—É—á–∞–µ–≤):")
                for i, failure in enumerate(type_failures[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    source = failure.get('source', {})
                    request_name = source.get('name', 'Unknown request')
                    print(f"    {i}. {request_name}")
                
                if len(type_failures) > 5:
                    print(f"    ... –∏ –µ—â–µ {len(type_failures) - 5} —Å–ª—É—á–∞–µ–≤")
        else:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTTP –æ—à–∏–±–∫–∏
        executions = results.get('run', {}).get('executions', [])
        http_errors = {}
        
        for execution in executions:
            response = execution.get('response', {})
            code = response.get('code')
            
            if code and code >= 400:
                if code not in http_errors:
                    http_errors[code] = []
                
                request = execution.get('item', {})
                request_name = request.get('name', 'Unknown')
                http_errors[code].append(request_name)
        
        if http_errors:
            print(f"\nüö® HTTP –û–®–ò–ë–ö–ò:")
            for code, requests in http_errors.items():
                print(f"  {code}: {len(requests)} –∑–∞–ø—Ä–æ—Å–æ–≤")
                for req in requests[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"    - {req}")
                if len(requests) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(requests) - 3}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = run_full_tests()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print("2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ API")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main()
