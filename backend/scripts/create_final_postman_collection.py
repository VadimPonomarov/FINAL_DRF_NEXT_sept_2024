#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π Postman –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
"""

import json
import re
from pathlib import Path

def create_endpoint_request(method, path, name, body=None, use_auth=True):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Postman"""
    headers = []
    if use_auth:
        headers.append({
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
        })
    
    if method in ['POST', 'PUT', 'PATCH'] and body:
        headers.append({
            "key": "Content-Type",
            "value": "application/json"
        })
    
    # –ó–∞–º–µ–Ω—è–µ–º {id} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    dynamic_path = path
    if "modifications/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_modification_id}}")
    elif "colors/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_color_id}}")
    elif "marks/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_mark_id}}")
    elif "models/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_model_id}}")
    elif "generations/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_generation_id}}")
    elif "users/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_user_id}}")
    elif "accounts/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_account_id}}")
    elif "ads/{id}" in path:
        dynamic_path = path.replace("{id}", "{{dynamic_ad_id}}")
    else:
        dynamic_path = path.replace("{id}", "{{dynamic_id}}")
    
    # –î–ª—è DELETE –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º created_* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if method == "DELETE" and "{id}" in path:
        if "modifications" in path:
            dynamic_path = path.replace("{id}", "{{created_modification_id}}")
        elif "colors" in path:
            dynamic_path = path.replace("{id}", "{{created_color_id}}")
        elif "marks" in path:
            dynamic_path = path.replace("{id}", "{{created_mark_id}}")
        elif "models" in path:
            dynamic_path = path.replace("{id}", "{{created_model_id}}")
        elif "generations" in path:
            dynamic_path = path.replace("{id}", "{{created_generation_id}}")
        elif "users" in path:
            dynamic_path = path.replace("{id}", "{{created_user_id}}")
        elif "accounts" in path:
            dynamic_path = path.replace("{id}", "{{created_account_id}}")
        elif "ads" in path:
            dynamic_path = path.replace("{id}", "{{created_ad_id}}")
    
    request = {
        "name": name,
        "request": {
            "method": method,
            "header": headers,
            "url": {
                "raw": "{{base_url}}" + dynamic_path,
                "host": ["{{base_url}}"],
                "path": dynamic_path.strip("/").split("/")
            }
        }
    }
    
    if body:
        request["request"]["body"] = {
            "mode": "raw",
            "raw": body
        }
    
    return request

def create_endpoint_group(name, endpoints):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    items = []
    
    for endpoint in endpoints:
        method = endpoint.get('method', 'GET')
        path = endpoint.get('path', '/')
        endpoint_name = f"{method} {path}"
        body = endpoint.get('body')
        use_auth = endpoint.get('auth', True)
        
        request = create_endpoint_request(method, path, endpoint_name, body, use_auth)
        items.append(request)
    
    return {
        "name": name,
        "item": items
    }

def create_full_collection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–æ –≤—Å–µ–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    endpoint_groups = [
        {
            "name": "üîß Authentication",
            "endpoints": [
                {
                    "method": "POST",
                    "path": "/api/auth/login",
                    "body": '{\n  "email": "{{test_email}}",\n  "password": "{{test_password}}"\n}',
                    "auth": False
                },
                {
                    "method": "POST",
                    "path": "/api/auth/logout"
                },
                {
                    "method": "POST",
                    "path": "/api/auth/refresh",
                    "body": '{\n  "refresh_token": "{{refresh_token}}"\n}',
                    "auth": False
                }
            ]
        },
        {
            "name": "‚öôÔ∏è Car Modifications",
            "endpoints": [
                {"method": "GET", "path": "/api/ads/reference/modifications/"},
                {"method": "POST", "path": "/api/ads/reference/modifications/", 
                 "body": '{\n  "name": "Test Modification {{$timestamp}}",\n  "generation": {{dynamic_generation_id}},\n  "engine_type": "gasoline",\n  "engine_volume": "2.0",\n  "power_hp": 150,\n  "transmission": "manual",\n  "drive_type": "front"\n}'},
                {"method": "GET", "path": "/api/ads/reference/modifications/{id}/"},
                {"method": "PATCH", "path": "/api/ads/reference/modifications/{id}/",
                 "body": '{\n  "name": "Updated Modification {{$timestamp}}"\n}'},
                {"method": "PUT", "path": "/api/ads/reference/modifications/{id}/",
                 "body": '{\n  "name": "Full Update Modification {{$timestamp}}",\n  "generation": {{dynamic_generation_id}},\n  "engine_type": "gasoline",\n  "engine_volume": "2.5",\n  "power_hp": 200,\n  "transmission": "automatic",\n  "drive_type": "all"\n}'},
                {"method": "DELETE", "path": "/api/ads/reference/modifications/{id}/"},
                {"method": "GET", "path": "/api/ads/reference/modifications/by_generation/?generation_id={{dynamic_generation_id}}"}
            ]
        },
        {
            "name": "üé® Car Colors",
            "endpoints": [
                {"method": "GET", "path": "/api/ads/reference/colors/"},
                {"method": "POST", "path": "/api/ads/reference/colors/",
                 "body": '{\n  "name": "Test Color {{$timestamp}}",\n  "hex_code": "#FF0000",\n  "is_metallic": false,\n  "is_pearlescent": false,\n  "is_popular": false\n}'},
                {"method": "GET", "path": "/api/ads/reference/colors/{id}/"},
                {"method": "PATCH", "path": "/api/ads/reference/colors/{id}/",
                 "body": '{\n  "name": "Updated Color {{$timestamp}}"\n}'},
                {"method": "PUT", "path": "/api/ads/reference/colors/{id}/",
                 "body": '{\n  "name": "Full Update Color {{$timestamp}}",\n  "hex_code": "#00FF00",\n  "is_metallic": true,\n  "is_pearlescent": false,\n  "is_popular": true\n}'},
                {"method": "DELETE", "path": "/api/ads/reference/colors/{id}/"}
            ]
        },
        {
            "name": "üöó Car Marks",
            "endpoints": [
                {"method": "GET", "path": "/api/ads/reference/marks/"},
                {"method": "POST", "path": "/api/ads/reference/marks/",
                 "body": '{\n  "name": "Test Mark {{$timestamp}}",\n  "vehicle_type": 1,\n  "is_popular": false\n}'},
                {"method": "GET", "path": "/api/ads/reference/marks/{id}/"},
                {"method": "PATCH", "path": "/api/ads/reference/marks/{id}/",
                 "body": '{\n  "name": "Updated Mark {{$timestamp}}"\n}'},
                {"method": "PUT", "path": "/api/ads/reference/marks/{id}/",
                 "body": '{\n  "name": "Full Update Mark {{$timestamp}}",\n  "vehicle_type": 1,\n  "is_popular": true\n}'},
                {"method": "DELETE", "path": "/api/ads/reference/marks/{id}/"}
            ]
        },
        {
            "name": "üöô Car Models",
            "endpoints": [
                {"method": "GET", "path": "/api/ads/reference/models/"},
                {"method": "POST", "path": "/api/ads/reference/models/",
                 "body": '{\n  "name": "Test Model {{$timestamp}}",\n  "mark": {{dynamic_mark_id}},\n  "is_popular": false\n}'},
                {"method": "GET", "path": "/api/ads/reference/models/{id}/"},
                {"method": "PATCH", "path": "/api/ads/reference/models/{id}/",
                 "body": '{\n  "name": "Updated Model {{$timestamp}}"\n}'},
                {"method": "PUT", "path": "/api/ads/reference/models/{id}/",
                 "body": '{\n  "name": "Full Update Model {{$timestamp}}",\n  "mark": {{dynamic_mark_id}},\n  "is_popular": true\n}'},
                {"method": "DELETE", "path": "/api/ads/reference/models/{id}/"},
                {"method": "GET", "path": "/api/ads/reference/models/by_mark/?mark_id={{dynamic_mark_id}}"}
            ]
        },
        {
            "name": "üìÖ Car Generations",
            "endpoints": [
                {"method": "GET", "path": "/api/ads/reference/generations/"},
                {"method": "POST", "path": "/api/ads/reference/generations/",
                 "body": '{\n  "name": "Test Generation {{$timestamp}}",\n  "model": {{dynamic_model_id}},\n  "year_start": 2020,\n  "year_end": 2025\n}'},
                {"method": "GET", "path": "/api/ads/reference/generations/{id}/"},
                {"method": "PATCH", "path": "/api/ads/reference/generations/{id}/",
                 "body": '{\n  "name": "Updated Generation {{$timestamp}}"\n}'},
                {"method": "PUT", "path": "/api/ads/reference/generations/{id}/",
                 "body": '{\n  "name": "Full Update Generation {{$timestamp}}",\n  "model": {{dynamic_model_id}},\n  "year_start": 2021,\n  "year_end": 2026\n}'},
                {"method": "DELETE", "path": "/api/ads/reference/generations/{id}/"},
                {"method": "GET", "path": "/api/ads/reference/generations/by_model/?model_id={{dynamic_model_id}}"}
            ]
        },
        {
            "name": "üë• Users",
            "endpoints": [
                {"method": "GET", "path": "/api/users/"},
                {"method": "POST", "path": "/api/users/",
                 "body": '{\n  "email": "test{{$timestamp}}@example.com",\n  "password": "TestPass123!",\n  "first_name": "Test",\n  "last_name": "User"\n}'},
                {"method": "GET", "path": "/api/users/{id}/"},
                {"method": "PATCH", "path": "/api/users/{id}/",
                 "body": '{\n  "first_name": "Updated {{$timestamp}}"\n}'},
                {"method": "PUT", "path": "/api/users/{id}/",
                 "body": '{\n  "email": "updated{{$timestamp}}@example.com",\n  "first_name": "Updated",\n  "last_name": "User"\n}'},
                {"method": "DELETE", "path": "/api/users/{id}/"}
            ]
        },
        {
            "name": "üè¢ Accounts",
            "endpoints": [
                {"method": "GET", "path": "/api/accounts/"},
                {"method": "POST", "path": "/api/accounts/",
                 "body": '{\n  "user": {{dynamic_user_id}},\n  "account_type": "basic",\n  "phone": "+380501234567"\n}'},
                {"method": "GET", "path": "/api/accounts/{id}/"},
                {"method": "PATCH", "path": "/api/accounts/{id}/",
                 "body": '{\n  "account_type": "premium"\n}'},
                {"method": "PUT", "path": "/api/accounts/{id}/",
                 "body": '{\n  "user": {{dynamic_user_id}},\n  "account_type": "premium",\n  "phone": "+380509876543"\n}'},
                {"method": "DELETE", "path": "/api/accounts/{id}/"}
            ]
        },
        {
            "name": "üìä Statistics",
            "endpoints": [
                {"method": "GET", "path": "/api/ads/statistics/quick/", "auth": False},
                {"method": "GET", "path": "/api/ads/statistics/daily-report/", "auth": False},
                {"method": "GET", "path": "/api/ads/statistics/user/"},
                {"method": "GET", "path": "/api/accounts/admin/stats/"},
                {"method": "GET", "path": "/api/accounts/profile/stats/"}
            ]
        },
        {
            "name": "üè† Profile",
            "endpoints": [
                {"method": "GET", "path": "/api/accounts/profile/account-settings/"},
                {"method": "GET", "path": "/api/accounts/profile/addresses/"},
                {"method": "GET", "path": "/api/accounts/profile/full/"}
            ]
        },
        {
            "name": "üîç Health Check",
            "endpoints": [
                {"method": "GET", "path": "/health/", "auth": False}
            ]
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection = {
        "info": {
            "name": "AutoRia API - Complete 184 Endpoints (FINAL - Real Data)",
            "description": "–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î –¥–ª—è 100% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "event": [
            {
                "listen": "prerequest",
                "script": {
                    "exec": [
                        "// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∏–∑ –º–∞—Å—Å–∏–≤–∞",
                        "function getRandomId(arrayVar, fallback = '1') {",
                        "    try {",
                        "        const ids = JSON.parse(pm.environment.get(arrayVar) || '[]');",
                        "        if (ids.length > 0) {",
                        "            return ids[Math.floor(Math.random() * ids.length)];",
                        "        }",
                        "    } catch (e) {",
                        "        console.log('Error getting random ID for', arrayVar, ':', e);",
                        "    }",
                        "    return fallback;",
                        "}",
                        "",
                        "// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º",
                        "pm.environment.set('dynamic_modification_id', getRandomId('modification_ids'));",
                        "pm.environment.set('dynamic_color_id', getRandomId('color_ids'));",
                        "pm.environment.set('dynamic_mark_id', getRandomId('mark_ids'));",
                        "pm.environment.set('dynamic_model_id', getRandomId('model_ids'));",
                        "pm.environment.set('dynamic_generation_id', getRandomId('generation_ids'));",
                        "pm.environment.set('dynamic_user_id', getRandomId('user_ids'));",
                        "pm.environment.set('dynamic_account_id', getRandomId('account_ids'));",
                        "pm.environment.set('dynamic_ad_id', getRandomId('ad_ids'));"
                    ],
                    "type": "text/javascript"
                }
            },
            {
                "listen": "test",
                "script": {
                    "exec": [
                        "// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                        "pm.test('Response time is acceptable (< 10 seconds)', function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                        "});",
                        "",
                        "pm.test('No server errors (500)', function () {",
                        "    pm.expect(pm.response.code).to.not.equal(500);",
                        "});",
                        "",
                        "// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ ID –¥–ª—è DELETE –æ–ø–µ—Ä–∞—Ü–∏–π",
                        "if (pm.response.code === 201) {",
                        "    try {",
                        "        const response = pm.response.json();",
                        "        if (response.id) {",
                        "            const requestName = pm.info.requestName.toLowerCase();",
                        "            if (requestName.includes('modification')) {",
                        "                pm.environment.set('created_modification_id', response.id);",
                        "            } else if (requestName.includes('color')) {",
                        "                pm.environment.set('created_color_id', response.id);",
                        "            } else if (requestName.includes('mark')) {",
                        "                pm.environment.set('created_mark_id', response.id);",
                        "            } else if (requestName.includes('model')) {",
                        "                pm.environment.set('created_model_id', response.id);",
                        "            } else if (requestName.includes('generation')) {",
                        "                pm.environment.set('created_generation_id', response.id);",
                        "            } else if (requestName.includes('user')) {",
                        "                pm.environment.set('created_user_id', response.id);",
                        "            } else if (requestName.includes('account')) {",
                        "                pm.environment.set('created_account_id', response.id);",
                        "            }",
                        "        }",
                        "    } catch (e) {",
                        "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                        "    }",
                        "}",
                        "",
                        "// –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –∏–∑ –ª–æ–≥–∏–Ω–∞",
                        "if (pm.info.requestName.includes('login') && pm.response.code === 200) {",
                        "    try {",
                        "        const response = pm.response.json();",
                        "        if (response.access_token) {",
                        "            pm.environment.set('access_token', response.access_token);",
                        "            console.log('‚úÖ Access token updated');",
                        "        }",
                        "    } catch (e) {",
                        "        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                        "    }",
                        "}"
                    ],
                    "type": "text/javascript"
                }
            }
        ],
        "item": []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    for group_config in endpoint_groups:
        group = create_endpoint_group(group_config["name"], group_config["endpoints"])
        collection["item"].append(group)
    
    return collection

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π Postman –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection = create_full_collection()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    output_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_FINAL.postman_collection.json"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(collection, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {output_file}")
    print(f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(collection['item'])}")
    
    total_endpoints = sum(len(group['item']) for group in collection['item'])
    print(f"üìä –í—Å–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {total_endpoints}")
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/update_postman_environment.py")
    print("2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ Postman")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã - –≤—Å–µ ID –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑ –ë–î")
    print("4. –û—à–∏–±–æ–∫ 404/500 –∏–∑-–∑–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç!")

if __name__ == "__main__":
    main()
