#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Postman —Ç–µ—Å—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ ID —á–µ—Ä–µ–∑ Newman
"""

import subprocess
import json
import sys
from pathlib import Path

def check_newman_installed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Newman"""
    try:
        result = subprocess.run(['newman', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Newman —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Newman –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Newman –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def install_newman():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Newman —á–µ—Ä–µ–∑ npm"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Newman...")
    try:
        result = subprocess.run(['npm', 'install', '-g', 'newman'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Newman —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Newman: {result.stderr}")
            return False
    except FileNotFoundError:
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å–Ω–∞—á–∞–ª–∞")
        return False

def run_setup_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Setup —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID"""
    print("üîß –ó–∞–ø—É—Å–∫–∞–µ–º Setup —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID...")
    
    collection_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_DYNAMIC_IDS_FIXED.postman_collection.json"
    environment_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_DYNAMIC_IDS.postman_environment.json"
    
    if not collection_file.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {collection_file}")
        return False
    
    if not environment_file.exists():
        print(f"‚ùå –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {environment_file}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Setup –ø–∞–ø–∫—É
    cmd = [
        'newman', 'run', str(collection_file),
        '-e', str(environment_file),
        '--folder', 'üîß Setup - Get All IDs (Run First!)',
        '--delay-request', '1000',
        '--timeout-request', '10000',
        '--reporters', 'cli,json',
        '--reporter-json-export', 'setup_results.json'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=collection_file.parent)
        
        if result.returncode == 0:
            print("‚úÖ Setup —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(result.stdout)
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ Setup —Ç–µ—Å—Ç–∞—Ö:")
            print(result.stderr)
            print(result.stdout)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Newman: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã...")
    
    collection_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_DYNAMIC_IDS_FIXED.postman_collection.json"
    environment_file = Path(__file__).parent.parent / "AutoRia_Complete_184_Endpoints_DYNAMIC_IDS.postman_environment.json"
    
    cmd = [
        'newman', 'run', str(collection_file),
        '-e', str(environment_file),
        '--delay-request', '1000',
        '--timeout-request', '10000',
        '--reporters', 'cli,json,htmlextra',
        '--reporter-json-export', 'dynamic_test_results.json',
        '--reporter-htmlextra-export', 'dynamic_test_results.html'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=collection_file.parent)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        print(result.stdout)
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            print(result.stderr)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyze_results()
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Newman: {e}")
        return False

def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    results_file = Path(__file__).parent.parent / "dynamic_test_results.json"
    
    if not results_file.exists():
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(results_file, 'r', encoding='utf-8') as f:
            results = json.load(f)
        
        run_stats = results.get('run', {}).get('stats', {})
        
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {run_stats.get('requests', {}).get('total', 0)}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {run_stats.get('requests', {}).get('pending', 0)}")
        print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {run_stats.get('requests', {}).get('failed', 0)}")
        
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {run_stats.get('assertions', {}).get('total', 0)}")
        print(f"  –ü—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤: {run_stats.get('assertions', {}).get('pending', 0)}")
        print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {run_stats.get('assertions', {}).get('failed', 0)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
        failures = results.get('run', {}).get('failures', [])
        if failures:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´ ({len(failures)}):")
            for i, failure in enumerate(failures[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                error = failure.get('error', {})
                print(f"  {i}. {error.get('name', 'Unknown error')}")
                print(f"     {error.get('message', 'No message')}")
        else:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        old_results_file = Path(__file__).parent.parent / "AutoRia API - Complete 184 Endpoints (Fixed for 100%).postman_test_run.json"
        if old_results_file.exists():
            with open(old_results_file, 'r', encoding='utf-8') as f:
                old_results = json.load(f)
            
            old_pass = old_results.get('totalPass', 0)
            old_fail = old_results.get('totalFail', 0)
            
            new_pass = run_stats.get('assertions', {}).get('pending', 0)
            new_fail = run_stats.get('assertions', {}).get('failed', 0)
            
            print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
            print(f"  –ë—ã–ª–æ: {old_pass} —É—Å–ø–µ—à–Ω—ã—Ö, {old_fail} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
            print(f"  –°—Ç–∞–ª–æ: {new_pass} —É—Å–ø–µ—à–Ω—ã—Ö, {new_fail} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
            print(f"  –£–ª—É—á—à–µ–Ω–∏–µ: {new_pass - old_pass:+d} —É—Å–ø–µ—à–Ω—ã—Ö, {new_fail - old_fail:+d} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ Postman —Ç–µ—Å—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ ID")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Newman
    if not check_newman_installed():
        if not install_newman():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Newman. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
            print("   npm install -g newman")
            print("   npm install -g newman-reporter-htmlextra")
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω...")
    try:
        import requests
        response = requests.get('http://localhost:8000/health/', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Setup —Ç–µ—Å—Ç—ã
    if not run_setup_tests():
        print("‚ùå Setup —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –¥–∞–Ω–Ω—ã–µ.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    success = run_all_tests()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print("üìÑ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print("  - dynamic_test_results.json (JSON)")
    print("  - dynamic_test_results.html (HTML)")

if __name__ == "__main__":
    main()
