from django.core.management.base import BaseCommand
from apps.users.models import UserModel


class Command(BaseCommand):
    help = '–ö–æ–ø–∏—Ä—É–µ—Ç —Ö–µ—à –ø–∞—Ä–æ–ª—è –æ—Ç pvs.versia@gmail.com –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'

    def handle(self, *args, **options):
        self.stdout.write("üîß –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è –æ—Ç pvs.versia@gmail.com –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        self.stdout.write("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –æ—Ç pvs.versia@gmail.com
        try:
            pvs_user = UserModel.objects.get(email='pvs.versia@gmail.com')
            source_password_hash = pvs_user.password
            self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {pvs_user.email}")
            self.stdout.write(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è: {source_password_hash[:50]}...")
        except UserModel.DoesNotExist:
            self.stdout.write(self.style.ERROR("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å pvs.versia@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω!"))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        other_users = UserModel.objects.exclude(email='pvs.versia@gmail.com')
        self.stdout.write(f"\nüë• –ù–∞–π–¥–µ–Ω–æ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {other_users.count()}")
        
        if other_users.count() == 0:
            self.stdout.write("‚ÑπÔ∏è –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
        updated_count = 0
        for user in other_users:
            if user.password != source_password_hash:
                user.password = source_password_hash
                user.save()
                updated_count += 1
                self.stdout.write(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ö–µ—à –¥–ª—è {user.email}")
            else:
                self.stdout.write(f"‚úÖ –•–µ—à —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω –¥–ª—è {user.email}")
        
        self.stdout.write(f"\nüéâ –ì–æ—Ç–æ–≤–æ!")
        self.stdout.write(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_count}")
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {UserModel.objects.count()}")
        self.stdout.write(f"üîë –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —Ç–æ—Ç –∂–µ —Ö–µ—à –ø–∞—Ä–æ–ª—è, —á—Ç–æ –∏ pvs.versia@gmail.com")
        self.stdout.write(f"üîë –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: 12345678")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.stdout.write("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        for user in UserModel.objects.all()[:10]:
            status = "‚úÖ" if user.password == source_password_hash else "‚ùå"
            self.stdout.write(f"{status} {user.email} - –∞–∫—Ç–∏–≤–µ–Ω: {user.is_active} - —Å—É–ø–µ—Ä—é–∑–µ—Ä: {user.is_superuser}")
