"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
"""
from celery import shared_task, group, chord
from django.core.cache import cache
from django.utils import timezone
import logging
import json
import asyncio
import aiohttp
import urllib.parse
from typing import List, Dict, Any
from concurrent.futures import ThreadPoolExecutor, as_completed
import hashlib
import time

logger = logging.getLogger(__name__)

@shared_task(bind=True, max_retries=2)
def generate_single_car_image_async(self, car_data: Dict, angle: str, style: str = 'realistic'):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞
    """
    try:
        task_id = self.request.id
        logger.info(f"[ImageTask-{task_id}] üé® Starting image generation: {angle}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è
        from apps.chat.views.image_generation_views import create_car_image_prompt
        from apps.ads.management.commands.generate_car_ads import GenerateCarAdsCommand
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        canonical_data = {
            'brand': car_data.get('brand', 'Unknown'),
            'model': car_data.get('model', 'Unknown'),
            'year': car_data.get('year', 2020),
            'color': car_data.get('color', 'silver'),
            'body_type': car_data.get('body_type', 'sedan'),
            'vehicle_type': car_data.get('vehicle_type', 'car'),
            'condition': car_data.get('condition', 'used'),
            'session_id': car_data.get('session_id', f"ASYNC-{task_id}")
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        session_data = f"{canonical_data['brand']}_{canonical_data['model']}_{canonical_data['year']}_{canonical_data['color']}"
        car_session_id = hashlib.md5(session_data.encode()).hexdigest()[:8]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —à–∏–ª–¥–∏–∫–æ–≤
        prompt = create_car_image_prompt(canonical_data, angle, style, car_session_id)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        mock_cmd = GenerateCarAdsCommand()
        english_prompt = mock_cmd._simple_translate_to_english(prompt, canonical_data)
        
        # üöÄ –ë–´–°–¢–†–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø —á–µ—Ä–µ–∑ pollinations.ai
        # –í–ê–ñ–ù–û: seed –†–ê–ó–ù–´–ô –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–ê–ó–ù–´–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º angle –≤ seed –¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ + nologo=true –¥–ª—è —á–∏—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        angle_seed = abs(hash(f"{car_session_id}_{angle}_{canonical_data['brand']}_{canonical_data['model']}")) % 1000000
        encoded_prompt = urllib.parse.quote(english_prompt)
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=800&height=600&model=flux&enhance=true&seed={angle_seed}&nologo=true"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        import requests
        response = requests.head(image_url, timeout=5)
        success = response.status_code == 200
        
        result = {
            'url': image_url,
            'angle': angle,
            'title': f"{canonical_data['brand']} {canonical_data['model']} - {angle}",
            'isMain': angle == 'front',
            'prompt': english_prompt,
            'success': success,
            'generated_at': timezone.now().isoformat(),
            'task_id': task_id,
            'session_id': car_session_id
        }
        
        logger.info(f"[ImageTask-{task_id}] ‚úÖ Image generated: {angle} - Success: {success}")
        return result
        
    except Exception as e:
        logger.error(f"[ImageTask-{task_id}] ‚ùå Image generation failed: {e}")
        self.retry(countdown=60, exc=e)

@shared_task(bind=True)
def generate_car_images_batch_async(self, car_data: Dict, angles: List[str], style: str = 'realistic'):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç group –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
    """
    try:
        batch_id = self.request.id
        logger.info(f"[BatchTask-{batch_id}] üöÄ Starting batch generation: {len(angles)} angles")
        
        # –î–æ–±–∞–≤–ª—è–µ–º batch_id –≤ car_data –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
        car_data['batch_id'] = batch_id
        car_data['session_id'] = f"BATCH-{batch_id}"
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
        job = group(
            generate_single_car_image_async.s(car_data, angle, style) 
            for angle in angles
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        result = job.apply_async()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        images = []
        for task_result in result.get():
            if task_result:
                images.append(task_result)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (front, side, rear, interior)
        angle_priority = {'front': 0, 'side': 1, 'rear': 2, 'interior': 3}
        images.sort(key=lambda x: angle_priority.get(x['angle'], 999))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if images:
            images[0]['isMain'] = True
        
        batch_result = {
            'success': True,
            'images': images,
            'batch_id': batch_id,
            'car_data': car_data,
            'generated_at': timezone.now().isoformat(),
            'total_images': len(images),
            'successful_images': len([img for img in images if img.get('success', False)])
        }
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        cache_key = f"car_images_batch_{batch_id}"
        cache.set(cache_key, batch_result, timeout=3600)  # 1 —á–∞—Å
        
        logger.info(f"[BatchTask-{batch_id}] ‚úÖ Batch completed: {len(images)} images")
        return batch_result
        
    except Exception as e:
        logger.error(f"[BatchTask-{batch_id}] ‚ùå Batch generation failed: {e}")
        return {
            'success': False,
            'error': str(e),
            'batch_id': batch_id,
            'car_data': car_data
        }

@shared_task(bind=True)
def generate_ads_series_async(self, ads_data: List[Dict], include_images: bool = True):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ chord pattern
    """
    try:
        series_id = self.request.id
        logger.info(f"[SeriesTask-{series_id}] üöÄ Starting series generation: {len(ads_data)} ads")
        
        if not include_images:
            # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            return {
                'success': True,
                'series_id': series_id,
                'ads_created': len(ads_data),
                'images_generated': 0,
                'processing_time': 0
            }
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        image_angles = ['front', 'side']  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chord –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: header (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏) + callback
        header = group(
            generate_car_images_batch_async.s(ad_data, image_angles)
            for ad_data in ads_data
        )
        
        # Callback –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–∏–∏
        callback = finalize_ads_series.s(series_id, start_time)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º chord
        chord_result = chord(header)(callback)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∏
        return {
            'success': True,
            'series_id': series_id,
            'status': 'processing',
            'ads_count': len(ads_data),
            'chord_id': chord_result.id,
            'estimated_time': len(ads_data) * 10,  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            'started_at': timezone.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"[SeriesTask-{series_id}] ‚ùå Series generation failed: {e}")
        return {
            'success': False,
            'error': str(e),
            'series_id': series_id
        }

@shared_task
def finalize_ads_series(image_results: List[Dict], series_id: str, start_time: float):
    """
    –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    try:
        processing_time = time.time() - start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_ads = len(image_results)
        successful_batches = len([r for r in image_results if r.get('success', False)])
        total_images = sum(r.get('total_images', 0) for r in image_results)
        successful_images = sum(r.get('successful_images', 0) for r in image_results)
        
        final_result = {
            'success': True,
            'series_id': series_id,
            'completed_at': timezone.now().isoformat(),
            'processing_time': round(processing_time, 2),
            'statistics': {
                'total_ads': total_ads,
                'successful_batches': successful_batches,
                'total_images': total_images,
                'successful_images': successful_images,
                'success_rate': round((successful_images / total_images * 100) if total_images > 0 else 0, 1)
            },
            'image_results': image_results
        }
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"ads_series_final_{series_id}"
        cache.set(cache_key, final_result, timeout=7200)  # 2 —á–∞—Å–∞
        
        logger.info(f"[SeriesTask-{series_id}] üéâ Series finalized: {successful_images}/{total_images} images in {processing_time:.1f}s")
        return final_result
        
    except Exception as e:
        logger.error(f"[SeriesTask-{series_id}] ‚ùå Series finalization failed: {e}")
        return {
            'success': False,
            'error': str(e),
            'series_id': series_id
        }

@shared_task
def get_series_status(series_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        final_cache_key = f"ads_series_final_{series_id}"
        final_result = cache.get(final_cache_key)
        
        if final_result:
            return {
                'status': 'completed',
                'result': final_result
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Celery result backend)
        
        return {
            'status': 'processing',
            'series_id': series_id,
            'message': 'Generation in progress...'
        }
        
    except Exception as e:
        logger.error(f"Error getting series status: {e}")
        return {
            'status': 'error',
            'error': str(e)
        }
