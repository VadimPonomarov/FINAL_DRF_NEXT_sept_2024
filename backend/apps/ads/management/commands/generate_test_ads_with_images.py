"""
Django management command to generate test car ads with guaranteed images.
Simplified version that focuses on reliable image generation.
"""

import random
import urllib.parse
from decimal import Decimal
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import transaction
from apps.ads.models import (
    CarAd, 
    AddImageModel,
    VehicleTypeModel,
    CarMarkModel,
    CarModelModel,
    RegionModel,
    CityModel
)
from apps.accounts.models import AddsAccount
from core.enums.ads import AccountTypeEnum, AdStatusEnum

User = get_user_model()


class Command(BaseCommand):
    help = 'Generate test car ads with guaranteed images using pollinations.ai'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=10,
            help='Number of test ads to generate (default: 10)'
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Clear existing test ads before generating new ones'
        )
        parser.add_argument(
            '--images-per-ad',
            type=int,
            default=3,
            help='Number of images per ad (default: 3)'
        )

    def handle(self, *args, **options):
        count = options['count']
        clear_existing = options['clear']
        images_per_ad = options['images_per_ad']
        
        self.stdout.write('üöó –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –û–ë–™–Ø–í–õ–ï–ù–ò–ô –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò')
        self.stdout.write('=' * 70)
        
        if clear_existing:
            self.clear_test_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = self.get_or_create_test_user()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        vehicle_types = list(VehicleTypeModel.objects.all()[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∏–ø–∞
        regions = list(RegionModel.objects.all()[:5])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–≥–∏–æ–Ω–æ–≤
        
        if not vehicle_types:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ—Ç —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –±–∞–∑–µ!'))
            return
        
        self.stdout.write(f'\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:')
        self.stdout.write(f'   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {count}')
        self.stdout.write(f'   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {images_per_ad}')
        self.stdout.write(f'   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.email}')
        
        self.stdout.write(f'\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π...')
        self.stdout.write('-' * 70)
        
        success_count = 0
        error_count = 0
        
        for i in range(count):
            try:
                with transaction.atomic():
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                    vehicle_type = random.choice(vehicle_types)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                    marks = list(CarMarkModel.objects.filter(vehicle_type=vehicle_type)[:20])
                    if not marks:
                        self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ù–µ—Ç –º–∞—Ä–æ–∫ –¥–ª—è —Ç–∏–ø–∞ {vehicle_type.name}'))
                        continue
                    
                    mark = random.choice(marks)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –º–∞—Ä–∫–∏
                    models = list(CarModelModel.objects.filter(mark=mark)[:10])
                    model = random.choice(models) if models else None
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    year = random.randint(2010, 2024)
                    price = Decimal(random.randint(5000, 50000))
                    mileage = random.randint(10000, 200000)
                    
                    colors = ['black', 'white', 'silver', 'blue', 'red', 'gray', 'green']
                    color = random.choice(colors)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
                    if not regions:
                        self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'))
                        continue

                    region = random.choice(regions)
                    cities = list(CityModel.objects.filter(region=region))

                    if not cities:
                        self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region.name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'))
                        continue

                    city = random.choice(cities)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    account, _ = AddsAccount.objects.get_or_create(
                        user=test_user,
                        defaults={'account_type': AccountTypeEnum.BASIC.value}
                    )

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    model_name = model.name if model else 'Unknown Model'
                    title = f"{mark.name} {model_name} {year} - Test Ad {i+1}"

                    car_ad = CarAd.objects.create(
                        account=account,
                        mark=mark,
                        model=model_name,  # model —ç—Ç–æ CharField, –Ω–µ ForeignKey
                        title=title,
                        description=f"Test advertisement for {mark.name} {model_name}. Generated automatically for testing purposes.",
                        price=price,
                        currency='USD',
                        status=AdStatusEnum.ACTIVE.value,
                        region=region,
                        city=city,
                        dynamic_fields={
                            'year': year,
                            'mileage': mileage,
                            'color': color,
                            'body_type': 'sedan',
                            'fuel_type': 'gasoline',
                            'transmission': 'automatic'
                        }
                    )
                    
                    self.stdout.write(f'\n{i+1}/{count}. ‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID {car_ad.id}: {title[:50]}')
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    images_created = self.generate_images_for_ad(
                        car_ad, 
                        mark.name, 
                        model_name, 
                        year, 
                        color,
                        images_per_ad
                    )
                    
                    if images_created > 0:
                        success_count += 1
                        self.stdout.write(self.style.SUCCESS(f'   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {images_created} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'))
                    else:
                        self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'))
                    
            except Exception as e:
                error_count += 1
                self.stdout.write(self.style.ERROR(f'\n{i+1}/{count}. ‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}'))
                continue
        
        self.stdout.write('\n' + '=' * 70)
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count}/{count}'))
        if error_count > 0:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –û—à–∏–±–æ–∫: {error_count}'))
        self.stdout.write(self.style.SUCCESS('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))
    
    def clear_test_data(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        self.stdout.write('\nüßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...')
        deleted_count = CarAd.objects.filter(title__contains='Test Ad').delete()[0]
        self.stdout.write(f'   –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {deleted_count}')
    
    def get_or_create_test_user(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        email = 'test@test.com'
        user, created = User.objects.get_or_create(
            email=email,
            defaults={'is_active': True}
        )
        
        if created:
            user.set_password('test123')
            user.save()
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}')
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account, _ = AddsAccount.objects.get_or_create(
            user=user,
            defaults={'account_type': AccountTypeEnum.BASIC.value}
        )
        
        return user
    
    def generate_images_for_ad(self, car_ad, mark_name, model_name, year, color, count=3):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è pollinations.ai."""
        angles = ['front', 'side', 'rear', 'interior', 'dashboard']
        images_created = 0
        
        for i in range(min(count, len(angles))):
            try:
                angle = angles[i]
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
                prompt = f"Professional photo of {year} {mark_name} {model_name}, {color} color, {angle} view, high quality, automotive photography, studio lighting"
                
                # –ö–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è URL
                encoded_prompt = urllib.parse.quote(prompt)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed
                seed = (car_ad.id * 1000) + i
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —á–µ—Ä–µ–∑ pollinations.ai
                image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=1024&height=768&model=flux&enhance=true&seed={seed}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                AddImageModel.objects.create(
                    ad=car_ad,
                    image_url=image_url,
                    caption=f"{mark_name} {model_name} - {angle} view",
                    order=i,
                    is_primary=(i == 0)
                )
                
                images_created += 1
                
            except Exception as e:
                self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {angle}: {str(e)[:50]}'))
                continue
        
        return images_created

