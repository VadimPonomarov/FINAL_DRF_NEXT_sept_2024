"""
Management command to populate comprehensive Ukraine geography data.
Creates all regions (oblasts) and major cities using LLM generation.
"""
import json
from django.core.management.base import BaseCommand
from django.db import transaction

from core.services.llm_mock_generator import generate_mock_data
from apps.ads.models.reference import RegionModel, CityModel


class Command(BaseCommand):
    help = 'Populate comprehensive Ukraine geography data (all regions and major cities)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force recreation of all geography data',
        )
        parser.add_argument(
            '--regions-only',
            action='store_true',
            help='Only create regions, skip cities',
        )
        parser.add_argument(
            '--cities-only',
            action='store_true',
            help='Only create cities, skip regions',
        )

    def handle(self, *args, **options):
        """Populate Ukraine geography data."""
        try:
            self.stdout.write('üá∫üá¶ Populating comprehensive Ukraine geography...')
            
            if options['force']:
                self._clear_existing_data()
            
            if not options['cities_only']:
                self._create_regions()
            
            if not options['regions_only']:
                self._create_cities()
            
            self._print_summary()
            self.stdout.write(self.style.SUCCESS('‚úÖ Ukraine geography populated successfully!'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error populating geography: {e}'))
            raise

    def _clear_existing_data(self):
        """Clear existing geography data."""
        self.stdout.write('üßπ Clearing existing geography data...')
        
        with transaction.atomic():
            CityModel.objects.all().delete()
            RegionModel.objects.all().delete()
        
        self.stdout.write('‚úÖ Existing data cleared')

    def _create_regions(self):
        """Create all Ukraine regions using LLM."""
        self.stdout.write('üó∫Ô∏è Creating all Ukraine regions...')
        
        # Prompt for generating all Ukraine regions with multilingual support
        regions_prompt = """
        –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (–æ–±–ª–∞—Å—Ç–µ–π) –£–∫—Ä–∞–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        –í–∫–ª—é—á–∏ –≤—Å–µ 24 –æ–±–ª–∞—Å—Ç–∏ + –ê–† –ö—Ä—ã–º + –≥–æ—Ä–æ–¥–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.

        –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –¢–†–ï–• —è–∑—ã–∫–∞—Ö:
        - name_uk: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ (–æ—Å–Ω–æ–≤–Ω–æ–µ)
        - name_ru: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        - name_en: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        - name: –¥—É–±–ª–∏—Ä—É–µ—Ç name_uk –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        - code: –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –æ–±–ª–∞—Å—Ç–∏
        - country: "–£–∫—Ä–∞—ó–Ω–∞"
        - is_active: true –¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–∫–∫—É–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π

        –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
        [
            {
                "name_uk": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
                "name_ru": "–ö–∏–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
                "name_en": "Kyiv Oblast",
                "name": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
                "code": "KV",
                "country": "–£–∫—Ä–∞—ó–Ω–∞",
                "is_active": true
            },
            {
                "name_uk": "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
                "name_ru": "–õ—å–≤–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
                "name_en": "Lviv Oblast",
                "name": "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
                "code": "LV",
                "country": "–£–∫—Ä–∞—ó–Ω–∞",
                "is_active": true
            }
        ]

        –í–∫–ª—é—á–∏ –í–°–ï –æ–±–ª–∞—Å—Ç–∏: –í—ñ–Ω–Ω–∏—Ü—å–∫–∞, –í–æ–ª–∏–Ω—Å—å–∫–∞, –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞, –î–æ–Ω–µ—Ü—å–∫–∞, –ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞,
        –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞, –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞, –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞, –ö–∏—ó–≤—Å—å–∫–∞, –ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞, –õ—É–≥–∞–Ω—Å—å–∫–∞,
        –õ—å–≤—ñ–≤—Å—å–∫–∞, –ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞, –û–¥–µ—Å—å–∫–∞, –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞, –†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞, –°—É–º—Å—å–∫–∞, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞,
        –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞, –•–µ—Ä—Å–æ–Ω—Å—å–∫–∞, –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞, –ß–µ—Ä–∫–∞—Å—å–∫–∞, –ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞, –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ +
        –ê–† –ö—Ä–∏–º + –º—ñ—Å—Ç–∞ –ö–∏—ó–≤ —Ç–∞ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å.

        –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –≤—Å–µ —Ç—Ä–∏ —è–∑—ã–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞!
        """
        
        try:
            # Generate regions data using LLM
            regions_data = self._generate_with_llm(regions_prompt, "regions")
            
            if not regions_data:
                self.stdout.write('‚ö†Ô∏è LLM generation failed, using fallback data')
                regions_data = self._get_fallback_regions()
            
            # Create regions in database
            created_count = 0
            with transaction.atomic():
                for region_data in regions_data:
                    region, created = RegionModel.objects.get_or_create(
                        name_uk=region_data.get('name_uk', region_data.get('name', '')),
                        defaults={
                            'name_ru': region_data.get('name_ru', ''),
                            'name_en': region_data.get('name_en', ''),
                            'name': region_data.get('name_uk', region_data.get('name', '')),
                            'code': region_data.get('code', ''),
                            'country': region_data.get('country', '–£–∫—Ä–∞—ó–Ω–∞'),
                            'is_active': region_data.get('is_active', True)
                        }
                    )
                    if created:
                        created_count += 1
            
            self.stdout.write(f'‚úÖ Created {created_count} regions')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error creating regions: {e}')
            self.stdout.write('üì¶ Using fallback regions data...')
            self._create_fallback_regions()

    def _create_cities(self):
        """Create all major Ukraine cities using LLM."""
        self.stdout.write('üèôÔ∏è Creating all major Ukraine cities...')
        
        # Get all regions first
        regions = list(RegionModel.objects.all())
        if not regions:
            self.stdout.write('‚ö†Ô∏è No regions found, creating regions first...')
            self._create_regions()
            regions = list(RegionModel.objects.all())
        
        # Prompt for generating cities
        cities_prompt = f"""
        –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –£–∫—Ä–∞–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        –í–∫–ª—é—á–∏ –í–°–ï –æ–±–ª–∞—Å—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —Ä–∞–π–æ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, –≥–æ—Ä–æ–¥–∞ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ç–æ–ª–∏—Ü—É.

        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {[r.name for r in regions]}

        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∂–∏:
        - name: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
        - name_en: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        - region_name: —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
        - population: –ø—Ä–∏–º–µ—Ä–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        - is_regional_center: true –¥–ª—è –æ–±–ª–∞—Å—Ç–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –∏ —Å—Ç–æ–ª–∏—Ü—ã
        - is_active: true –¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–∫–∫—É–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        - latitude: —à–∏—Ä–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        - longitude: –¥–æ–ª–≥–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)

        –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
        [
            {{
                "name": "–ö–∏—ó–≤",
                "name_en": "Kyiv",
                "region_name": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
                "population": 2884000,
                "is_regional_center": true,
                "is_active": true,
                "latitude": 50.4501,
                "longitude": 30.5234
            }}
        ]

        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –í–°–ï –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏:

        1. –°—Ç–æ–ª–∏—Ü—É: –ö–∏—ó–≤
        2. –í–°–ï –æ–±–ª–∞—Å—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã (24 –≥–æ—Ä–æ–¥–∞)
        3. –í–°–ï —Ä–∞–π–æ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –≥–æ—Ä–æ–¥–∞ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        4. –í–∞–∂–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã

        –û–°–û–ë–ï–ù–ù–û –í–ê–ñ–ù–û –¥–ª—è –ó–∞–ø–æ—Ä—ñ–∑—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∫–ª—é—á–∏ –í–°–ï –≥–æ—Ä–æ–¥–∞:
        - –ó–∞–ø–æ—Ä—ñ–∂–∂—è (–æ–±–ª–∞—Å—Ç–Ω–æ–π —Ü–µ–Ω—Ç—Ä, ~750000 –∂–∏—Ç–µ–ª–µ–π)
        - –ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å (~150000 –∂–∏—Ç–µ–ª–µ–π)
        - –ë–µ—Ä–¥—è–Ω—Å—å–∫ (~115000 –∂–∏—Ç–µ–ª–µ–π)
        - –ï–Ω–µ—Ä–≥–æ–¥–∞—Ä (~53000 –∂–∏—Ç–µ–ª–µ–π)
        - –¢–æ–∫–º–∞–∫ (~33000 –∂–∏—Ç–µ–ª–µ–π)
        - –í–∞—Å–∏–ª—ñ–≤–∫–∞ (~17000 –∂–∏—Ç–µ–ª–µ–π)
        - –û—Ä—ñ—Ö—ñ–≤ (~14000 –∂–∏—Ç–µ–ª–µ–π)
        - –ü–æ–ª–æ–≥–∏ (~20000 –∂–∏—Ç–µ–ª–µ–π)
        - –ì—É–ª—è–π–ø–æ–ª–µ (~14000 –∂–∏—Ç–µ–ª–µ–π)
        - –í—ñ–ª—å–Ω—è–Ω—Å—å–∫ (~12000 –∂–∏—Ç–µ–ª–µ–π)
        - –ö–∞–º'—è–Ω–∫–∞-–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∞ (~12000 –∂–∏—Ç–µ–ª–µ–π)
        - –î–Ω—ñ–ø—Ä–æ—Ä—É–¥–Ω–µ (~18000 –∂–∏—Ç–µ–ª–µ–π)
        - –Ø–∫–∏–º—ñ–≤–∫–∞ (~7000 –∂–∏—Ç–µ–ª–µ–π)
        - –ú–∏—Ö–∞–π–ª—ñ–≤–∫–∞ (~5000 –∂–∏—Ç–µ–ª–µ–π)
        - –ü—Ä–∏–º–æ—Ä—Å—å–∫ (~12000 –∂–∏—Ç–µ–ª–µ–π)
        - –†–æ–∑—ñ–≤–∫–∞ (~4000 –∂–∏—Ç–µ–ª–µ–π)
        - –ù–æ–≤–æ–º–∏–∫–æ–ª–∞—ó–≤–∫–∞ (~3000 –∂–∏—Ç–µ–ª–µ–π)
        - –ö–æ–º–∏—à-–ó–æ—Ä—è (~6000 –∂–∏—Ç–µ–ª–µ–π)
        - –ú–æ–ª–æ—á–∞–Ω—Å—å–∫ (~7000 –∂–∏—Ç–µ–ª–µ–π)
        - –ß–µ—Ä–Ω—ñ–≥—ñ–≤–∫–∞ (~8000 –∂–∏—Ç–µ–ª–µ–π)

        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–π –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º:
        - –û–±–ª–∞—Å—Ç–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
        - –í–°–ï–• —Ä–∞–π–æ–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
        - –ì–æ—Ä–æ–¥–æ–≤ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        - –ö—Ä—É–ø–Ω—ã—Ö –ø–æ—Å–µ–ª–∫–æ–≤ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–∏–ø–∞ (–ü–ì–¢)
        - –í–∞–∂–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤

        –ú–∏–Ω–∏–º—É–º 200+ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π –£–∫—Ä–∞–∏–Ω—ã.
        –ö–∞–∂–¥–∞—è –æ–±–ª–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 8-15 –≥–æ—Ä–æ–¥–æ–≤.
        """
        
        try:
            # Generate cities data using LLM
            cities_data = self._generate_with_llm(cities_prompt, "cities")
            
            if not cities_data:
                self.stdout.write('‚ö†Ô∏è LLM generation failed, using fallback data')
                cities_data = self._get_fallback_cities()
            
            # Create cities in database
            created_count = 0
            with transaction.atomic():
                for city_data in cities_data:
                    # Find region
                    region = None
                    for r in regions:
                        if r.name == city_data.get('region_name'):
                            region = r
                            break
                    
                    if not region:
                        self.stdout.write(f'‚ö†Ô∏è Region not found for city {city_data["name"]}: {city_data.get("region_name")}')
                        continue
                    
                    city, created = CityModel.objects.get_or_create(
                        name=city_data['name'],
                        region=region,
                        defaults={
                            'is_regional_center': city_data.get('is_regional_center', False),
                            'is_active': city_data.get('is_active', True),
                            'latitude': city_data.get('latitude'),
                            'longitude': city_data.get('longitude')
                        }
                    )
                    if created:
                        created_count += 1
            
            self.stdout.write(f'‚úÖ Created {created_count} cities')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error creating cities: {e}')
            self.stdout.write('üì¶ Using fallback cities data...')
            self._create_fallback_cities()

    def _generate_with_llm(self, prompt, data_type):
        """Generate data using LLM service."""
        try:
            self.stdout.write(f'üß† Generating {data_type} with LLM...')
            
            # Use LLM mock generator
            from core.services.llm_mock_generator import LLMMockGenerator
            
            generator = LLMMockGenerator()
            response = generator._call_llm_api(prompt)
            
            if response and 'choices' in response:
                content = response['choices'][0]['message']['content']
                
                # Try to extract JSON from response
                import re
                json_match = re.search(r'\[.*\]', content, re.DOTALL)
                if json_match:
                    json_str = json_match.group(0)
                    data = json.loads(json_str)
                    self.stdout.write(f'‚úÖ Generated {len(data)} {data_type} with LLM')
                    return data
            
            return None
            
        except Exception as e:
            self.stdout.write(f'‚ùå LLM generation failed: {e}')
            return None

    def _get_fallback_regions(self):
        """Fallback regions data if LLM fails."""
        return [
            {"name": "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "VN", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "VL", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "DP", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "DN", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "ZT", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "ZK", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "ZP", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "IF", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "KV", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "KR", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "LG", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "LV", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "MK", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "OD", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "PL", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "RV", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "SM", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "TR", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "KH", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "KS", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "HM", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "CK", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "CV", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "code": "CN", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–ê–† –ö—Ä–∏–º", "code": "CR", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": False},
            {"name": "–º. –ö–∏—ó–≤", "code": "KC", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": True},
            {"name": "–º. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "code": "SV", "country": "–£–∫—Ä–∞—ó–Ω–∞", "is_active": False}
        ]

    def _get_fallback_cities(self):
        """Fallback cities data if LLM fails."""
        return [
            # –°—Ç–æ–ª–∏—Ü–∞
            {"name": "–ö–∏—ó–≤", "region_name": "–º. –ö–∏—ó–≤", "is_regional_center": True, "is_active": True, "latitude": 50.4501, "longitude": 30.5234},

            # –û–±–ª–∞—Å—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
            {"name": "–•–∞—Ä–∫—ñ–≤", "region_name": "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": True, "is_active": True, "latitude": 49.9935, "longitude": 36.2304},
            {"name": "–û–¥–µ—Å–∞", "region_name": "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": True, "is_active": True, "latitude": 46.4825, "longitude": 30.7233},
            {"name": "–î–Ω—ñ–ø—Ä–æ", "region_name": "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": True, "is_active": True, "latitude": 48.4647, "longitude": 35.0462},
            {"name": "–î–æ–Ω–µ—Ü—å–∫", "region_name": "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": True, "is_active": False, "latitude": 48.0159, "longitude": 37.8028},
            {"name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": True, "is_active": True, "latitude": 47.8388, "longitude": 35.1396},
            {"name": "–õ—å–≤—ñ–≤", "region_name": "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": True, "is_active": True, "latitude": 49.8397, "longitude": 24.0297},

            # –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
            {"name": "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "region_name": "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.9077, "longitude": 33.3916},

            # –ì–æ—Ä–æ–¥–∞ –ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)
            {"name": "–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 46.8419, "longitude": 35.3659},
            {"name": "–ë–µ—Ä–¥—è–Ω—Å—å–∫", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 46.7569, "longitude": 36.7982},
            {"name": "–ï–Ω–µ—Ä–≥–æ–¥–∞—Ä", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.4986, "longitude": 34.6564},
            {"name": "–¢–æ–∫–º–∞–∫", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.2547, "longitude": 35.7053},
            {"name": "–ü–æ–ª–æ–≥–∏", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.4397, "longitude": 36.2831},
            {"name": "–î–Ω—ñ–ø—Ä–æ—Ä—É–¥–Ω–µ", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.3547, "longitude": 34.9831},
            {"name": "–í–∞—Å–∏–ª—ñ–≤–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.4397, "longitude": 35.2831},
            {"name": "–û—Ä—ñ—Ö—ñ–≤", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.5697, "longitude": 35.8031},
            {"name": "–ì—É–ª—è–π–ø–æ–ª–µ", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.6597, "longitude": 36.2631},
            {"name": "–í—ñ–ª—å–Ω—è–Ω—Å—å–∫", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.9397, "longitude": 35.4331},
            {"name": "–ö–∞–º'—è–Ω–∫–∞-–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.5297, "longitude": 34.3431},
            {"name": "–ü—Ä–∏–º–æ—Ä—Å—å–∫", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 46.7397, "longitude": 36.3031},
            {"name": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.6897, "longitude": 35.5231},
            {"name": "–ú–æ–ª–æ—á–∞–Ω—Å—å–∫", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.1297, "longitude": 35.3631},
            {"name": "–Ø–∫–∏–º—ñ–≤–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.2897, "longitude": 36.1831},
            {"name": "–ö–æ–º–∏—à-–ó–æ—Ä—è", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.0697, "longitude": 36.4231},
            {"name": "–ú–∏—Ö–∞–π–ª—ñ–≤–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.2597, "longitude": 35.0431},
            {"name": "–†–æ–∑—ñ–≤–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.4597, "longitude": 36.1231},
            {"name": "–ù–æ–≤–æ–º–∏–∫–æ–ª–∞—ó–≤–∫–∞", "region_name": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "is_regional_center": False, "is_active": True, "latitude": 47.3297, "longitude": 35.6831}
        ]

    def _create_fallback_regions(self):
        """Create fallback regions."""
        regions_data = self._get_fallback_regions()
        created_count = 0
        
        with transaction.atomic():
            for region_data in regions_data:
                region, created = RegionModel.objects.get_or_create(
                    name=region_data['name'],
                    defaults=region_data
                )
                if created:
                    created_count += 1
        
        self.stdout.write(f'‚úÖ Created {created_count} fallback regions')

    def _create_fallback_cities(self):
        """Create fallback cities."""
        cities_data = self._get_fallback_cities()
        regions = {r.name: r for r in RegionModel.objects.all()}
        created_count = 0
        
        with transaction.atomic():
            for city_data in cities_data:
                region = regions.get(city_data['region_name'])
                if region:
                    city, created = CityModel.objects.get_or_create(
                        name=city_data['name'],
                        region=region,
                        defaults={k: v for k, v in city_data.items() if k != 'region_name'}
                    )
                    if created:
                        created_count += 1
        
        self.stdout.write(f'‚úÖ Created {created_count} fallback cities')

    def _print_summary(self):
        """Print summary of created geography data."""
        regions_count = RegionModel.objects.count()
        cities_count = CityModel.objects.count()
        regional_centers = CityModel.objects.filter(is_regional_center=True).count()
        
        self.stdout.write('\nüá∫üá¶ Ukraine Geography Summary:')
        self.stdout.write('=' * 40)
        self.stdout.write(f'üó∫Ô∏è Regions: {regions_count}')
        self.stdout.write(f'üèôÔ∏è Cities: {cities_count}')
        self.stdout.write(f'üèõÔ∏è Regional centers: {regional_centers}')
        self.stdout.write('=' * 40)
