"""
–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.
"""

import random
from decimal import Decimal
from django.core.management.base import BaseCommand
from django.db import transaction
from apps.ads.models import CarAd
from apps.ads.models.reference import CarMarkModel, RegionModel, CityModel, CarColorModel
from apps.accounts.models import AddsAccount
from core.enums.cars import SellerType, ExchangeStatus, Currency
from core.enums.ads import AdStatusEnum


class Command(BaseCommand):
    help = '–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (count –ø–∞—Ä–∞–º–µ—Ç—Ä)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=10,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
        )

    def handle(self, *args, **options):
        count = options['count']
        self.stdout.write(f'\nüöÄ –ë–´–°–¢–†–û–ï –°–û–ó–î–ê–ù–ò–ï {count} –û–ë–™–Ø–í–õ–ï–ù–ò–ô')
        self.stdout.write('=' * 60)

        try:
            created = self._create_ads_fast(count)
            self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {created} –æ–±—ä—è–≤–ª–µ–Ω–∏–π'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå –û—à–∏–±–∫–∞: {e}'))
            raise

    def _create_ads_fast(self, count):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        marks = list(CarMarkModel.objects.all()[:20])  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-20 –º–∞—Ä–æ–∫
        regions = list(RegionModel.objects.all())
        cities = list(CityModel.objects.all()[:50])  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-50 –≥–æ—Ä–æ–¥–æ–≤
        colors = list(CarColorModel.objects.all())
        accounts = list(AddsAccount.objects.all())

        if not all([marks, cities, accounts]):
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'))
            return 0

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        popular_models = {
            'Toyota': ['Camry', 'Corolla', 'RAV4', 'Land Cruiser'],
            'BMW': ['3 Series', '5 Series', 'X5', 'X3'],
            'Mercedes-Benz': ['C-Class', 'E-Class', 'GLC', 'S-Class'],
            'Volkswagen': ['Golf', 'Passat', 'Tiguan', 'Polo'],
            'Audi': ['A4', 'A6', 'Q5', 'Q7'],
            'Honda': ['Civic', 'Accord', 'CR-V', 'Pilot'],
            'Ford': ['Focus', 'Fusion', 'Escape', 'F-150'],
            'Nissan': ['Altima', 'Rogue', 'Maxima', 'Pathfinder'],
        }

        created_count = 0

        for i in range(count):
            try:
                with transaction.atomic():
                    mark = random.choice(marks)
                    model_options = popular_models.get(mark.name, ['Model S', 'Model X', 'Model 3'])
                    model_name = random.choice(model_options)
                    
                    color = random.choice(colors)
                    city = random.choice(cities)
                    account = random.choice(accounts)
                    region = city.region if city.region else random.choice(regions)

                    year = random.randint(2010, 2024)
                    mileage = random.randint(10000, 200000)
                    price = random.randint(5000, 50000)

                    # –°—Ç–∞—Ç—É—Å—ã —Å –≤–µ—Å–∞–º–∏
                    status_choices = [
                        (AdStatusEnum.ACTIVE, 50),
                        (AdStatusEnum.PENDING, 20),
                        (AdStatusEnum.DRAFT, 15),
                        (AdStatusEnum.NEEDS_REVIEW, 10),
                        (AdStatusEnum.REJECTED, 5),
                    ]
                    statuses, weights = zip(*status_choices)
                    status = random.choices(statuses, weights=weights)[0]

                    ad_data = {
                        'account': account,
                        'title': f'{mark.name} {model_name} {year}',
                        'mark': mark,
                        'model': model_name,
                        'year': year,
                        'mileage': mileage,
                        'color': color,
                        'price': Decimal(str(price)),
                        'currency': Currency.USD,
                        'city': city,
                        'region': region,
                        'seller_type': random.choice(list(SellerType)),
                        'exchange': random.choice([True, False]),
                        'exchange_status': random.choice(list(ExchangeStatus)),
                        'status': status,
                        'is_validated': status == AdStatusEnum.ACTIVE,
                        'description': f'–ü—Ä–æ–¥–∞–µ—Ç—Å—è {mark.name} {model_name} {year} –≥–æ–¥–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—Ä–æ–±–µ–≥ {mileage} –∫–º.',
                    }

                    ad = CarAd.objects.create(**ad_data)
                    created_count += 1

                    if (i + 1) % 5 == 0:
                        self.stdout.write(f'   üìä –°–æ–∑–¥–∞–Ω–æ {created_count}/{count}...')

            except Exception as e:
                self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è –û—à–∏–±–∫–∞ #{i+1}: {e}'))

        return created_count

