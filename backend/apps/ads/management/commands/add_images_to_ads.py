"""
Django management command to add images to car ads that don't have any.
Uses pollinations.ai for fast image generation.
"""

import urllib.parse
from django.core.management.base import BaseCommand
from apps.ads.models import CarAd, AddImageModel


class Command(BaseCommand):
    help = 'Add images to car ads that don\'t have any images'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=None,
            help='Maximum number of ads to process (default: all)'
        )

    def handle(self, *args, **options):
        max_count = options.get('count')
        
        self.stdout.write('üñºÔ∏è  –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ö –û–ë–™–Ø–í–õ–ï–ù–ò–Ø–ú')
        self.stdout.write('=' * 70)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        all_ads = CarAd.objects.all()
        self.stdout.write(f'\nüìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {all_ads.count()}')
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        ads_without_images = []
        for ad in all_ads:
            if ad.images.count() == 0:
                ads_without_images.append(ad)
                if max_count and len(ads_without_images) >= max_count:
                    break
        
        self.stdout.write(f'–û–±—ä—è–≤–ª–µ–Ω–∏–π –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(ads_without_images)}')
        
        if not ads_without_images:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!'))
            return
        
        self.stdout.write(f'\nüé® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {len(ads_without_images)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...')
        self.stdout.write('-' * 70)
        
        success_count = 0
        error_count = 0
        
        for i, ad in enumerate(ads_without_images, 1):
            try:
                self.stdout.write(f'\n{i}/{len(ads_without_images)}. ID {ad.id}: {ad.title[:50]}')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                mark_name = ad.mark.name if ad.mark else 'Car'
                model_name = ad.model.name if ad.model else 'Model'
                year = ad.dynamic_fields.get('year', 2020)
                color = ad.dynamic_fields.get('color', 'silver')
                
                self.stdout.write(f'   {mark_name} {model_name} {year}, {color}')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
                angles = ['front', 'side', 'rear']
                images_created = 0
                
                for img_num, angle in enumerate(angles):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
                        prompt = f"Professional photo of {year} {mark_name} {model_name}, {color} color, {angle} view, high quality, automotive photography, studio lighting"
                        
                        # –ö–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è URL
                        encoded_prompt = urllib.parse.quote(prompt)
                        
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                        seed = (ad.id * 1000) + img_num
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ pollinations.ai
                        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=1024&height=768&model=flux&enhance=true&seed={seed}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É
                        AddImageModel.objects.create(
                            ad=ad,
                            image_url=image_url,
                            caption=f"{mark_name} {model_name} - {angle} view",
                            order=img_num,
                            is_primary=(img_num == 0)
                        )
                        
                        images_created += 1
                        self.stdout.write(f'   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_num + 1}/3 ({angle})')
                        
                    except Exception as img_error:
                        self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {angle}: {str(img_error)[:50]}'))
                        continue
                
                if images_created > 0:
                    success_count += 1
                    self.stdout.write(self.style.SUCCESS(f'   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {images_created} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad.id}'))
                else:
                    error_count += 1
                    self.stdout.write(self.style.ERROR(f'   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'))
                
            except Exception as e:
                error_count += 1
                self.stdout.write(self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}'))
                continue
        
        self.stdout.write('\n' + '=' * 70)
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {success_count}/{len(ads_without_images)}'))
        if error_count > 0:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –û—à–∏–±–æ–∫: {error_count}'))
        self.stdout.write(self.style.SUCCESS('\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))

