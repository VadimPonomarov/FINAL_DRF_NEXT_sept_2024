"""
Django management command to clean up orphaned tables and create missing migrations.
"""

from django.core.management.base import BaseCommand
from django.db import connection
from django.core.management import call_command


class Command(BaseCommand):
    help = 'Clean up orphaned tables and create missing migrations'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Show what would be done without making changes'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force cleanup without confirmation'
        )

    def handle(self, *args, **options):
        """Clean up database."""
        try:
            self.stdout.write('üßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•')
            self.stdout.write('=' * 50)
            
            # Check current state
            self._check_current_state()
            
            # Create missing migrations
            self._create_missing_migrations(options['dry_run'])
            
            # Clean up orphaned tables
            self._cleanup_orphaned_tables(options['dry_run'], options['force'])
            
            # Verify integrity
            self._verify_integrity()
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}')
            raise

    def _check_current_state(self):
        """Check current database state."""
        self.stdout.write('\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        orphaned_tables = [
            'car_ads',
            'car_moderation', 
            'car_pricing',
            'exchange_rates'
        ]
        
        with connection.cursor() as cursor:
            for table in orphaned_tables:
                cursor.execute(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '{table}'
                    );
                """)
                exists = cursor.fetchone()[0]
                
                if exists:
                    cursor.execute(f'SELECT COUNT(*) FROM {table};')
                    count = cursor.fetchone()[0]
                    
                    if count > 0:
                        self.stdout.write(f'‚ö†Ô∏è {table}: {count} –∑–∞–ø–∏—Å–µ–π (–°–û–î–ï–†–ñ–ò–¢ –î–ê–ù–ù–´–ï)')
                    else:
                        self.stdout.write(f'üìã {table}: –ø—É—Å—Ç–∞—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)')
                else:
                    self.stdout.write(f'‚úÖ {table}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

    def _create_missing_migrations(self, dry_run):
        """Create missing migrations for models."""
        self.stdout.write('\nüîß –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ú–ò–ì–†–ê–¶–ò–ô')
        self.stdout.write('-' * 40)
        
        if dry_run:
            self.stdout.write('üîç DRY RUN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π...')
        
        try:
            # Check if CarAd table exists
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'ads_caradmodel'
                    );
                """)
                caradmodel_exists = cursor.fetchone()[0]
            
            if not caradmodel_exists:
                self.stdout.write('‚ùå –¢–∞–±–ª–∏—Ü–∞ ads_caradmodel –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                if not dry_run:
                    self.stdout.write('üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è ads...')
                    call_command('makemigrations', 'ads', verbosity=1)
                    self.stdout.write('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...')
                    call_command('migrate', 'ads', verbosity=1)
                    self.stdout.write('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
                else:
                    self.stdout.write('üîç DRY RUN: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è ads_caradmodel')
            else:
                self.stdout.write('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ads_caradmodel —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}')

    def _cleanup_orphaned_tables(self, dry_run, force):
        """Clean up orphaned tables."""
        self.stdout.write('\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê –ü–û–¢–ï–†–Ø–ù–ù–´–• –¢–ê–ë–õ–ò–¶')
        self.stdout.write('-' * 40)
        
        orphaned_tables = [
            'car_ads',
            'car_moderation', 
            'car_pricing',
            'exchange_rates'
        ]
        
        tables_to_drop = []
        
        with connection.cursor() as cursor:
            for table in orphaned_tables:
                cursor.execute(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '{table}'
                    );
                """)
                exists = cursor.fetchone()[0]
                
                if exists:
                    cursor.execute(f'SELECT COUNT(*) FROM {table};')
                    count = cursor.fetchone()[0]
                    
                    if count == 0:
                        tables_to_drop.append(table)
                        if dry_run:
                            self.stdout.write(f'üîç DRY RUN: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table}')
                        else:
                            self.stdout.write(f'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã {table}...')
                    else:
                        self.stdout.write(f'‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π')
                        if force:
                            tables_to_drop.append(table)
                            if dry_run:
                                self.stdout.write(f'üîç DRY RUN: –ë—É–¥–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞ {table} —Å –¥–∞–Ω–Ω—ã–º–∏')
                            else:
                                self.stdout.write(f'üóëÔ∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ {table} —Å –¥–∞–Ω–Ω—ã–º–∏...')
                        else:
                            self.stdout.write(f'   üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è')
        
        if not dry_run and tables_to_drop:
            for table in tables_to_drop:
                with connection.cursor() as cursor:
                    cursor.execute(f'DROP TABLE IF EXISTS {table} CASCADE;')
                    self.stdout.write(f'‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —É–¥–∞–ª–µ–Ω–∞')
        
        if not tables_to_drop:
            self.stdout.write('‚ÑπÔ∏è –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')

    def _verify_integrity(self):
        """Verify database integrity after cleanup."""
        self.stdout.write('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò')
        self.stdout.write('-' * 40)
        
        try:
            # Check Django models can be imported
            from apps.ads.models import CarAd
            self.stdout.write('‚úÖ –ú–æ–¥–µ–ª—å CarAd –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è')
            
            # Check table exists
            table_name = CarAd._meta.db_table
            with connection.cursor() as cursor:
                cursor.execute(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '{table_name}'
                    );
                """)
                exists = cursor.fetchone()[0]
                
                if exists:
                    cursor.execute(f'SELECT COUNT(*) FROM {table_name};')
                    count = cursor.fetchone()[0]
                    self.stdout.write(f'‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({count} –∑–∞–ø–∏—Å–µ–π)')
                else:
                    self.stdout.write(f'‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            
            # Check reference models
            from apps.ads.models import CarMarkModel, RegionModel, CityModel
            
            mark_count = CarMarkModel.objects.count()
            region_count = RegionModel.objects.count()
            city_count = CityModel.objects.count()
            
            self.stdout.write(f'‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {mark_count} –º–∞—Ä–æ–∫, {region_count} —Ä–µ–≥–∏–æ–Ω–æ–≤, {city_count} –≥–æ—Ä–æ–¥–æ–≤')
            
            # Check accounts
            from apps.accounts.models import AddsAccount
            account_count = AddsAccount.objects.count()
            self.stdout.write(f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã: {account_count} –∑–∞–ø–∏—Å–µ–π')
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}')

    def _show_final_summary(self):
        """Show final summary."""
        self.stdout.write('\nüìä –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï')
        self.stdout.write('-' * 40)
        
        with connection.cursor() as cursor:
            # Count all tables
            cursor.execute("""
                SELECT COUNT(*) 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_type = 'BASE TABLE';
            """)
            total_tables = cursor.fetchone()[0]
            
            # Count Django model tables
            from django.apps import apps
            django_tables = 0
            for app_config in apps.get_app_configs():
                django_tables += len(app_config.get_models())
            
            self.stdout.write(f'üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: {total_tables}')
            self.stdout.write(f'üêç Django –º–æ–¥–µ–ª–µ–π: {django_tables}')
            
            # Check for remaining orphaned tables
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_type = 'BASE TABLE'
                AND table_name NOT LIKE 'django_%'
                AND table_name NOT LIKE 'auth_%'
                AND table_name NOT LIKE 'token_%';
            """)
            app_tables = cursor.fetchall()
            
            self.stdout.write(f'üì± –¢–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(app_tables)}')
            
        self.stdout.write('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!')
        self.stdout.write('üí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–æ–∫')
