"""
Quick command to create a complete mock system for testing.
Creates users, sellers, and car advertisements with realistic data.
"""
import random
from decimal import Decimal
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import transaction
from django.utils import timezone
from datetime import timedelta

from apps.users.models import UserModel, ProfileModel
from apps.accounts.models import AddsAccount, AddsAccountContact, RawAccountAddress
from apps.ads.models import CarAd, CarSpecification
from apps.ads.models.car_metadata_model import CarMetadataModel
from apps.ads.models.reference import (
    VehicleTypeModel, CarMarkModel, CarModel, CarColorModel,
    RegionModel, CityModel
)
from core.enums.ads import AccountTypeEnum, RoleEnum, ContactTypeEnum
from core.enums.cars import Currency, SellerType, ExchangeStatus


class Command(BaseCommand):
    help = 'Create complete mock system with users, sellers, and car ads'

    def add_arguments(self, parser):
        parser.add_argument(
            '--quick',
            action='store_true',
            help='Create minimal dataset for quick testing',
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Clear existing mock data before creating new',
        )

    def handle(self, *args, **options):
        """Create mock system."""
        try:
            self.stdout.write('üöÄ Creating mock AutoRia system...')
            
            if options['clear']:
                self._clear_mock_data()
            
            # Set dataset size
            if options['quick']:
                self.config = {
                    'sellers': 5,
                    'car_ads': 20,
                    'regions': 3
                }
            else:
                self.config = {
                    'sellers': 15,
                    'car_ads': 50,
                    'regions': 5
                }

            # Note: Buyers are anonymous visitors, no accounts needed
            
            # Create data
            self._ensure_reference_data()
            self._create_locations()
            self._create_mock_sellers()
            self._create_mock_car_ads()

            # Note: Buyers are anonymous visitors, no need to create user accounts
            
            self._print_summary()
            self.stdout.write(self.style.SUCCESS('‚úÖ Mock system created successfully!'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error creating mock system: {e}'))
            raise

    def _clear_mock_data(self):
        """Clear existing mock data."""
        self.stdout.write('üßπ Clearing mock data...')
        
        with transaction.atomic():
            # Clear ads and related data
            CarAd.objects.filter(account__user__email__contains='mock').delete()
            CarAd.objects.filter(account__user__email__contains='test').delete()
            
            # Clear accounts
            AddsAccount.objects.filter(user__email__contains='mock').delete()
            AddsAccount.objects.filter(user__email__contains='test').delete()
            
            # Clear users (except admin)
            UserModel.objects.filter(
                email__contains='mock',
                is_superuser=False
            ).delete()
            UserModel.objects.filter(
                email__contains='test',
                is_superuser=False
            ).delete()

    def _ensure_reference_data(self):
        """Ensure reference data exists."""
        if not VehicleTypeModel.objects.exists():
            call_command('auto_populate_references')

    def _create_locations(self):
        """Create comprehensive Ukraine regions and cities."""
        self.stdout.write('üó∫Ô∏è Creating comprehensive Ukraine geography...')

        # Create all Ukraine regions
        self._create_all_ukraine_regions()

        # Create all major Ukraine cities
        self._create_all_ukraine_cities()

    def _create_all_ukraine_regions(self):
        """Create all Ukraine regions using LLM knowledge."""
        self.stdout.write('üá∫üá¶ Creating all Ukraine regions...')

        regions_prompt = """
        –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (–æ–±–ª–∞—Å—Ç–µ–π) –£–∫—Ä–∞–∏–Ω—ã.
        –í–∫–ª—é—á–∏ –≤—Å–µ 24 –æ–±–ª–∞—Å—Ç–∏ + –ê–† –ö—Ä—ã–º + –≥–æ—Ä–æ–¥–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.

        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ:
        –í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
        –í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
        –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
        ...

        –í–∫–ª—é—á–∏ –í–°–ï –æ–±–ª–∞—Å—Ç–∏: –í—ñ–Ω–Ω–∏—Ü—å–∫–∞, –í–æ–ª–∏–Ω—Å—å–∫–∞, –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞, –î–æ–Ω–µ—Ü—å–∫–∞, –ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞,
        –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞, –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞, –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞, –ö–∏—ó–≤—Å—å–∫–∞, –ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞, –õ—É–≥–∞–Ω—Å—å–∫–∞,
        –õ—å–≤—ñ–≤—Å—å–∫–∞, –ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞, –û–¥–µ—Å—å–∫–∞, –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞, –†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞, –°—É–º—Å—å–∫–∞, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞,
        –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞, –•–µ—Ä—Å–æ–Ω—Å—å–∫–∞, –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞, –ß–µ—Ä–∫–∞—Å—å–∫–∞, –ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞, –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ +
        –ê–† –ö—Ä–∏–º + –º—ñ—Å—Ç–∞ –ö–∏—ó–≤ —Ç–∞ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å.
        """

        try:
            regions_data = self._generate_geography_list(regions_prompt, "regions")

            if not regions_data:
                regions_data = self._get_fallback_regions()

            created_count = 0
            for region_name in regions_data:
                region, created = RegionModel.objects.get_or_create(
                    name=region_name.strip(),
                    defaults={
                        'country': '–£–∫—Ä–∞—ó–Ω–∞',
                        'is_active': True
                    }
                )
                if created:
                    created_count += 1

            self.stdout.write(f'‚úÖ Created {created_count} regions')

        except Exception as e:
            self.stdout.write(f'‚ùå Error creating regions: {e}')
            self._create_fallback_regions()

    def _create_all_ukraine_cities(self):
        """Create all major Ukraine cities using LLM knowledge."""
        self.stdout.write('üèôÔ∏è Creating all major Ukraine cities...')

        regions = list(RegionModel.objects.all())
        region_names = [r.name for r in regions]

        cities_prompt = f"""
        –°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –£–∫—Ä–∞–∏–Ω—ã.
        –í–∫–ª—é—á–∏ –í–°–ï –æ–±–ª–∞—Å—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, –∫—Ä—É–ø–Ω—ã–µ —Ä–∞–π–æ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, –≥–æ—Ä–æ–¥–∞ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ç–æ–ª–∏—Ü—É.

        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {region_names}

        –í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–æ—Ä–æ–¥|–û–±–ª–∞—Å—Ç—å", –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ:
        –ö–∏—ó–≤|–º. –ö–∏—ó–≤
        –•–∞—Ä–∫—ñ–≤|–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
        –û–¥–µ—Å–∞|–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
        ...

        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏:
        1. –°—Ç–æ–ª–∏—Ü—É: –ö–∏—ó–≤
        2. –í–°–ï –æ–±–ª–∞—Å—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã (24+ –≥–æ—Ä–æ–¥–æ–≤)
        3. –ö—Ä—É–ø–Ω—ã–µ —Ä–∞–π–æ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –≥–æ—Ä–æ–¥–∞ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        4. –í–∞–∂–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã

        –ú–∏–Ω–∏–º—É–º 100+ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –£–∫—Ä–∞–∏–Ω—ã.
        """

        try:
            cities_data = self._generate_geography_list(cities_prompt, "cities")

            if not cities_data:
                cities_data = self._get_fallback_cities()

            created_count = 0
            regions_dict = {r.name: r for r in regions}

            for city_line in cities_data:
                if '|' in city_line:
                    city_name, region_name = city_line.strip().split('|', 1)
                    region = regions_dict.get(region_name.strip())

                    if region:
                        city, created = CityModel.objects.get_or_create(
                            name=city_name.strip(),
                            region=region,
                            defaults={'is_active': True}
                        )
                        if created:
                            created_count += 1

            self.stdout.write(f'‚úÖ Created {created_count} cities')

        except Exception as e:
            self.stdout.write(f'‚ùå Error creating cities: {e}')
            self._create_fallback_cities()



    def _create_mock_sellers(self):
        """Create seller accounts for existing users."""
        self.stdout.write(f'üè™ Creating seller accounts for existing users...')

        # Get existing users without seller accounts
        users_without_accounts = UserModel.objects.filter(
            is_active=True,
            is_staff=False,
            is_superuser=False,
            account_adds__isnull=True
        )[:self.config['sellers']]

        if not users_without_accounts.exists():
            self.stdout.write('‚ö†Ô∏è  No users available for seller accounts. Creating some users first...')
            # Create a few users if none exist
            self._create_additional_users()
            users_without_accounts = UserModel.objects.filter(
                is_active=True,
                is_staff=False,
                is_superuser=False,
                account_adds__isnull=True
            )[:self.config['sellers']]

        organizations = [
            '–ê–≤—Ç–æ–¶–µ–Ω—Ç—Ä –ö–∏—ó–≤', '–ü—Ä–µ–º—ñ—É–º –ê–≤—Ç–æ', '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –õ—é–∫—Å', '–ú–µ–≥–∞ –ê–≤—Ç–æ',
            '–ê–≤—Ç–æ–ø–ª–∞–∑–∞', '–î—Ä–∞–π–≤ –ê–≤—Ç–æ', '–ê–≤—Ç–æ –ï–∫—Å–ø–µ—Ä—Ç', '–®–≤–∏–¥–∫–∏–π –ê–≤—Ç–æ'
        ]

        created_count = 0
        for user in users_without_accounts:
            # Create seller account for existing user
            account_type = random.choice([AccountTypeEnum.BASIC, AccountTypeEnum.PREMIUM])
            organization = random.choice(organizations) if account_type == AccountTypeEnum.PREMIUM else ''

            account, created = AddsAccount.objects.get_or_create(
                user=user,
                defaults={
                    'account_type': account_type,
                    'role': RoleEnum.SELLER,
                    'organization_name': organization,
                    'stats_enabled': True
                }
            )

            if created:
                created_count += 1

                # Add multiple contacts for new account (using all contact types)
                contact_data = [
                    (ContactTypeEnum.PHONE, f"+380{random.randint(50, 99)}{random.randint(1000000, 9999999)}"),
                    (ContactTypeEnum.EMAIL, f"seller{i+1}@example.com"),
                    (ContactTypeEnum.TELEGRAM, f"@seller{i+1}"),
                    (ContactTypeEnum.WHATSAPP, f"+380{random.randint(50, 99)}{random.randint(1000000, 9999999)}"),
                    (ContactTypeEnum.VIBER, f"+380{random.randint(50, 99)}{random.randint(1000000, 9999999)}"),
                ]

                # Create 2-3 random contacts per account
                selected_contacts = random.sample(contact_data, random.randint(2, 3))
                for contact_type, contact_value in selected_contacts:
                    AddsAccountContact.objects.create(
                        adds_account=account,
                        type=contact_type,
                        value=contact_value,
                        is_visible=True
                    )

                # Add address for new account with geocoding
                regions = list(RegionModel.objects.all())
                if regions:
                    region = random.choice(regions)
                    cities = list(CityModel.objects.filter(region=region))
                    city = random.choice(cities) if cities else region.name.split()[0]

                    street_name = random.choice(['–•—Ä–µ—â–∞—Ç–∏–∫', '–®–µ–≤—á–µ–Ω–∫–∞', '–§—Ä–∞–Ω–∫–∞', '–õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏', '–ì—Ä—É—à–µ–≤—Å—å–∫–æ–≥–æ', '–í–æ–ª–æ–¥–∏–º–∏—Ä—Å—å–∫–∞'])
                    building_number = str(random.randint(1, 200))

                    # Create raw address
                    raw_address = RawAccountAddress.objects.create(
                        account=account,
                        country="–£–∫—Ä–∞—ó–Ω–∞",
                        region=region.name,
                        locality=city.name if hasattr(city, 'name') else str(city),
                        street=f"–≤—É–ª. {street_name}",
                        building=building_number
                    )

                    # Try to generate formatted address using geocoding
                    try:
                        from apps.accounts.utils.geocoding import get_geocode
                        geocode = get_geocode(
                            country=raw_address.country,
                            region=raw_address.region,
                            locality=raw_address.locality,
                            street=raw_address.street,
                            building=raw_address.building
                        )
                        if geocode:
                            # Store geocode in the address for future use
                            raw_address.geocode = geocode[:128]  # Limit to field size
                            raw_address.save()
                    except Exception as e:
                        # Continue without geocoding if it fails
                        pass

        self.stdout.write(f'‚úÖ Created {created_count} seller accounts')

    def _create_additional_users(self):
        """Create additional users if needed."""
        self.stdout.write('üë• Creating additional users for seller accounts...')

        names = [
            ('–û–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ü–µ—Ç—Ä–µ–Ω–∫–æ'), ('–ú–∞—Ä—ñ—è', '–Ü–≤–∞–Ω–µ–Ω–∫–æ'), ('–Ü–≤–∞–Ω', '–ö–æ–≤–∞–ª–µ–Ω–∫–æ'),
            ('–ê–Ω–Ω–∞', '–®–µ–≤—á–µ–Ω–∫–æ'), ('–ü–µ—Ç—Ä–æ', '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ'), ('–û–ª–µ–Ω–∞', '–¢–∫–∞—á–µ–Ω–∫–æ'),
            ('–°–µ—Ä–≥—ñ–π', '–ö—Ä–∞–≤—á–µ–Ω–∫–æ'), ('–¢–µ—Ç—è–Ω–∞', '–ú–µ–ª—å–Ω–∏–∫'), ('–ê–Ω–¥—Ä—ñ–π', '–ü–æ–ª—ñ—â—É–∫'),
            ('–ù–∞—Ç–∞–ª—ñ—è', '–ì–æ–Ω—á–∞—Ä–µ–Ω–∫–æ'), ('–í–æ–ª–æ–¥–∏–º–∏—Ä', '–õ–∏—Å–µ–Ω–∫–æ'), ('–Ü—Ä–∏–Ω–∞', '–°–∞–≤—á–µ–Ω–∫–æ')
        ]

        domains = ['gmail.com', 'ukr.net', 'i.ua']

        for i in range(self.config['sellers']):
            name, surname = random.choice(names)
            domain = random.choice(domains)
            email = f"user.{i+1}@{domain}"

            user, created = UserModel.objects.get_or_create(
                email=email,
                defaults={
                    'is_active': True
                }
            )

            if created:
                user.set_password('test123')
                user.save()

                # Create profile
                ProfileModel.objects.get_or_create(
                    user=user,
                    defaults={
                        'name': name,
                        'surname': surname,
                        'age': random.randint(18, 65)
                    }
                )

    def _create_mock_car_ads(self):
        """Create mock car advertisements."""
        self.stdout.write(f'üöó Creating {self.config["car_ads"]} mock car ads...')
        
        # Get seller accounts
        seller_accounts = list(AddsAccount.objects.filter(role=RoleEnum.SELLER))
        if not seller_accounts:
            self.stdout.write('‚ö†Ô∏è  No seller accounts found')
            return
        
        # Get car data
        car_marks = list(CarMarkModel.objects.filter(is_popular=True)[:8])
        colors = list(CarColorModel.objects.all()[:6])
        
        if not car_marks:
            self.stdout.write('‚ö†Ô∏è  No car marks found')
            return
        
        car_descriptions = [
            "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –≤ –≤—ñ–¥–º—ñ–Ω–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –†–µ–≥—É–ª—è—Ä–Ω–µ –¢–û. –û–¥–∏–Ω –≤–ª–∞—Å–Ω–∏–∫.",
            "–ü—Ä–æ–¥–∞—î—Ç—å—Å—è —É –∑–≤'—è–∑–∫—É –∑ –ø–æ–∫—É–ø–∫–æ—é –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ. –¢–æ—Ä–≥ –º–æ–∂–ª–∏–≤–∏–π.",
            "–ú–∞—à–∏–Ω–∞ –Ω–µ –±–∏–ª–∞, –Ω–µ —Ñ–∞—Ä–±–æ–≤–∞–Ω–∞. –í—Å—ñ –¢–û –≤—á–∞—Å–Ω–æ.",
            "–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å. –Ü–¥–µ–∞–ª—å–Ω–∏–π –¥–ª—è –º—ñ—Å—Ç–∞.",
            "–°—ñ–º–µ–π–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –≤ —Ö–æ—Ä–æ—à–æ–º—É —Å—Ç–∞–Ω—ñ. –î–±–∞–π–ª–∏–≤–∏–π –≤–ª–∞—Å–Ω–∏–∫."
        ]
        
        for i in range(self.config['car_ads']):
            account = random.choice(seller_accounts)
            mark = random.choice(car_marks)
            
            # Get models for this mark
            models = list(CarModel.objects.filter(mark=mark)[:3])
            if not models:
                continue
                
            model = random.choice(models)
            color = random.choice(colors) if colors else None
            
            year = random.randint(2015, 2024)
            mileage = random.randint(0, 200000)
            price = Decimal(str(random.randint(8000, 50000)))
            
            # Create car ad with dynamic fields
            dynamic_fields = {
                'mark': mark.name,
                'model': model.name,
                'year': year,
                'mileage': mileage,
                'color': color.name if color else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'condition': '–í–∂–∏–≤–∞–Ω–∞',
                'fuel_type': random.choice(['–ë–µ–Ω–∑–∏–Ω', '–î–∏–∑–µ–ª—å', '–ì—ñ–±—Ä–∏–¥']),
                'transmission': random.choice(['–ú–µ—Ö–∞–Ω—ñ—á–Ω–∞', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞']),
                'body_type': random.choice(['–°–µ–¥–∞–Ω', '–•–µ—Ç—á–±–µ–∫', '–ö—Ä–æ—Å–æ–≤–µ—Ä']),
                'engine_volume': round(random.uniform(1.2, 3.5), 1),
            }

            # Get region and city for location
            regions = list(RegionModel.objects.all())
            region = random.choice(regions) if regions else None
            cities = list(CityModel.objects.filter(region=region)) if region else []
            city = random.choice(cities) if cities else None

            car_ad = CarAd.objects.create(
                account=account,
                mark=mark,
                model=model.name,
                title=f"{mark.name} {model.name} {year}",
                description=random.choice(car_descriptions),
                price=price,
                currency=Currency.UAH.value,
                region=region.name if region else '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                city=city.name if city else '–ö–∏—ó–≤',
                dynamic_fields=dynamic_fields,
                seller_type=SellerType.PRIVATE if account.account_type == AccountTypeEnum.BASIC else SellerType.DEALER,
                exchange_status=random.choice([ExchangeStatus.NOT_POSSIBLE, ExchangeStatus.POSSIBLE, ExchangeStatus.CONSIDER])
            )
            
            # Create specifications (using proper field names and enum values)
            from core.enums.cars import FuelType, TransmissionType, DriveType, CarBodyType, SteeringWheelSide

            CarSpecification.objects.create(
                car_ad=car_ad,
                year=year,
                mileage_km=mileage,
                engine_volume=round(random.uniform(1.2, 3.5), 1),
                engine_power=random.randint(100, 400),
                fuel_type=random.choice([FuelType.PETROL.value, FuelType.DIESEL.value, FuelType.HYBRID.value]),
                transmission_type=random.choice([TransmissionType.MANUAL.value, TransmissionType.AUTOMATIC.value]),
                drive_type=random.choice([DriveType.FWD.value, DriveType.AWD.value]),
                body_type=random.choice([CarBodyType.SEDAN.value, CarBodyType.HATCHBACK.value, CarBodyType.SUV.value]),
                color=color,
                steering_wheel=SteeringWheelSide.LEFT.value
            )
            
            # Create metadata
            CarMetadataModel.objects.create(
                car_ad=car_ad,
                is_active=True,
                is_verified=random.choice([True, False]),
                is_vip=random.choice([True, False]) if account.account_type == AccountTypeEnum.PREMIUM else False,
                is_premium=account.account_type == AccountTypeEnum.PREMIUM,
                views_count=random.randint(0, 500),
                phone_views_count=random.randint(0, 50),
                refreshed_at=timezone.now() - timedelta(days=random.randint(0, 15)),
                expires_at=timezone.now() + timedelta(days=random.randint(15, 45))
            )

    def _print_summary(self):
        """Print summary of created data."""
        self.stdout.write('\nüìä Mock System Summary:')
        self.stdout.write('=' * 40)
        
        sellers = AddsAccount.objects.filter(user__email__contains='mock.seller').count()
        car_ads = CarAd.objects.filter(account__user__email__contains='mock.seller').count()

        self.stdout.write(f'üè™ Mock Sellers: {sellers}')
        self.stdout.write(f'üöó Mock Car Ads: {car_ads}')

        self.stdout.write('\nüí° Test Accounts:')
        self.stdout.write('   Seller: mock.seller.1@autodealer.com / test123')
        self.stdout.write('   Admin: admin@autoria.com / test123')
        self.stdout.write('   Note: Buyers are anonymous visitors (no accounts needed)')
        
        self.stdout.write('=' * 40)

    def _generate_geography_list(self, prompt, data_type):
        """Generate geography list using LLM."""
        try:
            from core.services.llm_mock_generator import generate_mock_data

            self.stdout.write(f'üß† Generating {data_type} with LLM...')

            # Use LLM to generate data
            result = generate_mock_data(
                prompt=prompt,
                django_model=None,
                count=1,
                locale='uk_UA'
            )

            if result and len(result) > 0:
                response_text = str(result[0])
                # Split by lines and filter empty lines
                lines = [line.strip() for line in response_text.split('\n') if line.strip()]

                if lines:
                    self.stdout.write(f'‚úÖ Generated {len(lines)} {data_type} with LLM')
                    return lines

            return None

        except Exception as e:
            self.stdout.write(f'‚ùå LLM generation failed for {data_type}: {e}')
            return None

    def _get_fallback_regions(self):
        """Comprehensive fallback regions list."""
        return [
            "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ê–† –ö—Ä–∏–º",
            "–º. –ö–∏—ó–≤",
            "–º. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å"
        ]

    def _get_fallback_cities(self):
        """Comprehensive fallback cities list."""
        return [
            # –°—Ç–æ–ª–∏—Ü–∞ –∏ –∫—Ä—É–ø–Ω–µ–π—à–∏–µ –≥–æ—Ä–æ–¥–∞
            "–ö–∏—ó–≤|–º. –ö–∏—ó–≤",
            "–•–∞—Ä–∫—ñ–≤|–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–û–¥–µ—Å–∞|–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–Ω—ñ–ø—Ä–æ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–æ–Ω–µ—Ü—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ó–∞–ø–æ—Ä—ñ–∂–∂—è|–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ—å–≤—ñ–≤|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö—Ä–∏–≤–∏–π –†—ñ–≥|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",

            # –û–±–ª–∞—Å—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
            "–í—ñ–Ω–Ω–∏—Ü—è|–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ—É—Ü—å–∫|–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ñ–∏—Ç–æ–º–∏—Ä|–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–£–∂–≥–æ—Ä–æ–¥|–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π|–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ—É–≥–∞–Ω—Å—å–∫|–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∏–∫–æ–ª–∞—ó–≤|–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–æ–ª—Ç–∞–≤–∞|–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–†—ñ–≤–Ω–µ|–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°—É–º–∏|–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å|–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–•–µ—Ä—Å–æ–Ω|–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π|–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–∫–∞—Å–∏|–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ|–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–Ω—ñ–≥—ñ–≤|–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",

            # –ö—Ä—É–ø–Ω—ã–µ —Ä–∞–π–æ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –≥–æ—Ä–æ–¥–∞ –æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            "–ú–∞—Ä—ñ—É–ø–æ–ª—å|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–∞–º'—è–Ω—Å—å–∫–µ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë—Ä–æ–≤–∞—Ä–∏|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î—Ä–æ–≥–æ–±–∏—á|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫|–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ü–∑–º–∞—ó–ª|–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å|–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë–µ—Ä–¥—è–Ω—Å—å–∫|–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–ª–æ–≤'—è–Ω—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ù—ñ–∫–æ–ø–æ–ª—å|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–∞–≤–ª–æ–≥—Ä–∞–¥|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–∏–Ω–µ–ª—å–Ω–∏–∫–æ–≤–µ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–æ–∫—Ä–æ–≤|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–µ—Ä—à–æ—Ç—Ä–∞–≤–µ–Ω—Å—å–∫|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ñ–æ–≤—Ç—ñ –í–æ–¥–∏|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∞—Ä–≥–∞–Ω–µ—Ü—å|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–û—Ä–¥–∂–æ–Ω—ñ–∫—ñ–¥–∑–µ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–µ—Ä–Ω—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–í–µ—Ä—Ö–Ω—å–æ–¥–Ω—ñ–ø—Ä–æ–≤—Å—å–∫|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–æ—Ñ—ñ—ó–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–í–∞—Å–∏–ª—å–∫—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ê–ø–æ—Å—Ç–æ–ª–æ–≤–µ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–®–∏—Ä–æ–∫–µ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∞–≥–¥–∞–ª–∏–Ω—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–æ–ª–æ–Ω–µ|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Æ—Ä'—ó–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–µ–∂–æ–≤–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¶–∞—Ä–∏—á–∞–Ω–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ù–æ–≤–æ–æ–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü'—è—Ç–∏—Ö–∞—Ç–∫–∏|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–æ–º–∞–∫—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ì—É–±–∏–Ω–∏—Ö–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–æ—á–µ—Ä–µ–∂–∫–∏|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë–æ–≥–¥–∞–Ω—ñ–≤–∫–∞|–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë–æ—Ç—ñ—î–≤–µ|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–í—É–≥–ª–µ–¥–∞—Ä|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ì–æ—Ä–ª—ñ–≤–∫–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–µ–±–∞–ª—å—Ü–µ–≤–µ|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–æ–∫—É—á–∞—î–≤—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î—Ä—É–∂–∫—ñ–≤–∫–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ñ–Ω–∞–∫—ñ—î–≤–µ|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ñ–¥–∞–Ω—ñ–≤–∫–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ü–ª–æ–≤–∞–π—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–∞–ª—å–º—ñ—É—Å—å–∫–µ|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤–∫–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–õ–∏–º–∞–Ω|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∞–∫—ñ—ó–≤–∫–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∞–Ω–≥—É—à|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–∏—Ä–Ω–æ–≥—Ä–∞–¥|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ù–æ–≤–æ–∞–∑–æ–≤—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–æ–∫—Ä–æ–≤—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–µ–ª–∏–¥–æ–≤–µ|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–Ω—ñ–≥—É—Ä—ñ–≤–∫–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–æ—Ä–µ—Ü—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–•–∞—Ä—Ü–∏–∑—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–∞—Å—ñ–≤ –Ø—Ä|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–®–∞—Ö—Ç–∞—Ä—Å—å–∫|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ø—Å–∏–Ω—É–≤–∞—Ç–∞|–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π
            "–§–∞—Å—Ç—ñ–≤|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–û–±—É—Ö—ñ–≤|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ü–µ—Ä–µ—è—Å–ª–∞–≤|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–í–∞—Å–∏–ª—å–∫—ñ–≤|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ü—Ä–ø—ñ–Ω—å|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë—É—á–∞|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–í–∏—à–Ω–µ–≤–µ|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë–æ—Ä–∏—Å–ø–æ–ª—å|–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°—Ç—Ä–∏–π|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–∞–º–±—ñ—Ä|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢—Ä—É—Å–∫–∞–≤–µ—Ü—å|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë–æ—Ä–∏—Å–ª–∞–≤|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ú–æ—Ä—à–∏–Ω|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ì–æ—Ä–æ–¥–æ–∫|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ñ–∏–¥–∞—á—ñ–≤|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ø–≤–æ—Ä—ñ–≤|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–æ–∫–∞–ª—å|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢—É—Ä–∫–∞|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°—Ç–∞—Ä–∏–π –°–∞–º–±—ñ—Ä|–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–æ–ª–æ–º–∏—è|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–∞–ª—É—à|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ù–∞–¥–≤—ñ—Ä–Ω–∞|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–î–æ–ª–∏–Ω–∞|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ë–æ–ª–µ—Ö—ñ–≤|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–Ø—Ä–µ–º—á–µ|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–ö–æ—Å—ñ–≤|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–°–Ω—è—Ç–∏–Ω|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–†–æ–∂–Ω—è—Ç—ñ–≤|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
            "–¢–∏—Å–º–µ–Ω–∏—Ü—è|–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"
        ]

    def _create_fallback_regions(self):
        """Create fallback regions if LLM fails."""
        regions_data = self._get_fallback_regions()
        created_count = 0

        for region_name in regions_data:
            region, created = RegionModel.objects.get_or_create(
                name=region_name,
                defaults={
                    'country': '–£–∫—Ä–∞—ó–Ω–∞',
                    'is_active': True
                }
            )
            if created:
                created_count += 1

        self.stdout.write(f'‚úÖ Created {created_count} fallback regions')

    def _create_fallback_cities(self):
        """Create fallback cities if LLM fails."""
        cities_data = self._get_fallback_cities()
        regions_dict = {r.name: r for r in RegionModel.objects.all()}
        created_count = 0

        for city_line in cities_data:
            if '|' in city_line:
                city_name, region_name = city_line.split('|', 1)
                region = regions_dict.get(region_name.strip())

                if region:
                    city, created = CityModel.objects.get_or_create(
                        name=city_name.strip(),
                        region=region,
                        defaults={'is_active': True}
                    )
                    if created:
                        created_count += 1

        self.stdout.write(f'‚úÖ Created {created_count} fallback cities')
