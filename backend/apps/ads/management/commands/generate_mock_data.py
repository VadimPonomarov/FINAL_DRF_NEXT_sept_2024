"""
Management command to generate comprehensive mock data for testing.
Uses LLM-based generator with Django Ninja schema conversion.
"""
import logging
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.contrib.auth import get_user_model

from core.services.llm_mock_generator import generate_mock_data
from apps.users.models import UserModel, ProfileModel
from apps.accounts.models import AddsAccount, AccountContact, RawAccountAddress
from apps.ads.models import CarAd, CarSpecification, CarMetadata
from apps.ads.models.reference import RegionModel, CityModel

# Import serializers
from apps.users.serializers import UserSerializer, ProfileSerializer
from apps.accounts.serializers import AccountSerializer, ContactSerializer, AddressSerializer
from apps.ads.serializers import CarAdCreateSerializer

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Generate comprehensive mock data for testing the AutoRia system'

    def add_arguments(self, parser):
        parser.add_argument(
            '--locale',
            type=str,
            default='uk_UA',
            help='Locale for generated data (uk_UA, en_US, ru_RU)',
        )
        parser.add_argument(
            '--users',
            type=int,
            default=50,
            help='Number of regular users to create',
        )
        parser.add_argument(
            '--sellers',
            type=int,
            default=30,
            help='Number of sellers to create',
        )
        parser.add_argument(
            '--managers',
            type=int,
            default=5,
            help='Number of managers to create',
        )
        parser.add_argument(
            '--admins',
            type=int,
            default=2,
            help='Number of admin users to create',
        )
        parser.add_argument(
            '--car-ads',
            type=int,
            default=200,
            help='Number of car advertisements to create',
        )
        parser.add_argument(
            '--regions',
            type=int,
            default=25,
            help='Number of regions to create',
        )
        parser.add_argument(
            '--cities-per-region',
            type=int,
            default=10,
            help='Number of cities per region',
        )
        parser.add_argument(
            '--clear-existing',
            action='store_true',
            help='Clear existing mock data before generating new',
        )
        parser.add_argument(
            '--batch-size',
            type=int,
            default=50,
            help='Batch size for data generation',
        )

    def handle(self, *args, **options):
        """Main command handler."""
        try:
            self.locale = options['locale']
            self.batch_size = options['batch_size']
            
            self.stdout.write(f'üöÄ Starting mock data generation with locale: {self.locale}')
            
            if options['clear_existing']:
                self._clear_existing_data()
            
            # Generate data in logical order
            self._generate_superuser()
            self._generate_regions_and_cities(options['regions'], options['cities_per_region'])
            self._generate_users(options['users'])
            self._generate_sellers(options['sellers'])
            self._generate_managers(options['managers'])
            self._generate_admins(options['admins'])
            self._generate_car_ads(options['car_ads'])
            
            self.stdout.write(self.style.SUCCESS('‚úÖ Mock data generation completed successfully!'))
            
        except Exception as e:
            logger.error(f"Error generating mock data: {e}")
            raise CommandError(f'‚ùå Mock data generation failed: {e}')

    def _clear_existing_data(self):
        """Clear existing mock data."""
        self.stdout.write('üßπ Clearing existing mock data...')
        
        try:
            with transaction.atomic():
                # Clear in reverse dependency order
                CarAd.objects.filter(account__user__email__contains='mock').delete()
                AddsAccount.objects.filter(user__email__contains='mock').delete()
                UserModel.objects.filter(email__contains='mock').delete()
                
                # Clear reference data (optional)
                # RegionModel.objects.all().delete()
                # CityModel.objects.all().delete()
                
            self.stdout.write('‚úÖ Existing mock data cleared')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error clearing data: {e}')
            raise

    def _generate_superuser(self):
        """Generate superusers if not exist."""
        self.stdout.write('üëë Creating superusers...')

        try:
            # Create main admin superuser
            if not UserModel.objects.filter(email='admin@autoria.com').exists():
                superuser = UserModel.objects.create_superuser(
                    email='admin@autoria.com',
                    password='admin123'
                )

                # Create profile
                ProfileModel.objects.create(
                    user=superuser,
                    name='–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
                    surname='–°–∏—Å—Ç–µ–º–∏',
                    age=35
                )

                self.stdout.write('‚úÖ Main superuser created: admin@autoria.com')
            else:
                self.stdout.write('‚ÑπÔ∏è  Main superuser already exists')

            # Create custom superuser with specified credentials
            if not UserModel.objects.filter(email='pvs.versia@gmail.com').exists():
                custom_superuser = UserModel.objects.create_superuser(
                    email='pvs.versia@gmail.com',
                    password='12345678'
                )

                # Create profile
                ProfileModel.objects.create(
                    user=custom_superuser,
                    name='PVS',
                    surname='Versia',
                    age=30
                )

                self.stdout.write('‚úÖ Custom superuser created: pvs.versia@gmail.com')
            else:
                # Update password if user exists
                custom_superuser = UserModel.objects.get(email='pvs.versia@gmail.com')
                custom_superuser.set_password('12345678')
                custom_superuser.save()


        except Exception as e:
            self.stdout.write(f'‚ùå Error creating superusers: {e}')

    def _generate_regions_and_cities(self, regions_count: int, cities_per_region: int):
        """Generate regions and cities."""
        self.stdout.write(f'üó∫Ô∏è  Generating {regions_count} regions with {cities_per_region} cities each...')
        
        try:
            # Generate regions
            regions_prompt = f"""
            –°—Ç–≤–æ—Ä–∏ {regions_count} —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ AutoRia.
            –í–∫–ª—é—á–∏ –æ—Å–Ω–æ–≤–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
            –ö–æ–∂–µ–Ω —Ä–µ–≥—ñ–æ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏:
            - name: –Ω–∞–∑–≤–∞ –æ–±–ª–∞—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
            - name_en: –Ω–∞–∑–≤–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Kyiv Oblast")
            - code: –∫–æ–¥ –æ–±–ª–∞—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "KY")
            - is_active: true
            """
            
            regions = generate_mock_data(
                prompt=regions_prompt,
                django_model=RegionModel,
                serializer_class=RegionSerializer,  # You'll need to create this
                count=regions_count,
                locale=self.locale,
                batch_size=self.batch_size
            )
            
            self.stdout.write(f'‚úÖ Created {len(regions)} regions')
            
            # Generate cities for each region
            total_cities = 0
            for region in regions:
                cities_prompt = f"""
                –°—Ç–≤–æ—Ä–∏ {cities_per_region} —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –º—ñ—Å—Ç –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É "{region.name}".
                –í–∫–ª—é—á–∏ —è–∫ –≤–µ–ª–∏–∫—ñ –º—ñ—Å—Ç–∞, —Ç–∞–∫ —ñ –º–µ–Ω—à—ñ –Ω–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏.
                –ö–æ–∂–Ω–µ –º—ñ—Å—Ç–æ –ø–æ–≤–∏–Ω–Ω–æ –º–∞—Ç–∏:
                - name: –Ω–∞–∑–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
                - name_en: –Ω–∞–∑–≤–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
                - population: –Ω–∞—Å–µ–ª–µ–Ω–Ω—è (–≤—ñ–¥ 5000 –¥–æ 3000000)
                - is_regional_center: true –¥–ª—è –æ–±–ª–∞—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É
                - is_active: true
                - region_id: {region.id}
                """
                
                cities = generate_mock_data(
                    prompt=cities_prompt,
                    django_model=CityModel,
                    serializer_class=CitySerializer,  # You'll need to create this
                    count=cities_per_region,
                    locale=self.locale,
                    batch_size=self.batch_size,
                    region_id=region.id
                )
                
                total_cities += len(cities)
            
            self.stdout.write(f'‚úÖ Created {total_cities} cities')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error generating regions/cities: {e}')

    def _generate_users(self, count: int):
        """Generate regular users."""
        self.stdout.write(f'üë• Generating {count} regular users...')
        
        try:
            users_prompt = f"""
            –°—Ç–≤–æ—Ä–∏ {count} –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ AutoRia.
            –¶–µ –ø–æ–∫—É–ø—Ü—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤, —è–∫—ñ —à—É–∫–∞—é—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.
            –ö–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏:
            - email: —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π email –∑ –¥–æ–º–µ–Ω–∞–º–∏ gmail.com, ukr.net, i.ua
            - is_active: true
            - is_staff: false
            - is_superuser: false
            
            –¢–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ:
            - name: —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ–º'—è
            - surname: —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ
            - age: –≤—ñ–∫ –≤—ñ–¥ 18 –¥–æ 65
            """
            
            users = generate_mock_data(
                prompt=users_prompt,
                django_model=UserModel,
                serializer_class=UserSerializer,
                count=count,
                locale=self.locale,
                batch_size=self.batch_size,
                exclude_fields=['password', 'last_login']
            )

            # Set default password for all created users
            default_password = 'user123'
            for user in users:
                user.set_password(default_password)
                user.save()

            self.stdout.write(f'‚úÖ Created {len(users)} regular users with password: {default_password}')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error generating users: {e}')

    def _generate_sellers(self, count: int):
        """Generate seller accounts."""
        self.stdout.write(f'üè™ Generating {count} sellers...')
        
        try:
            sellers_prompt = f"""
            –°—Ç–≤–æ—Ä–∏ {count} –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ AutoRia.
            –¶–µ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –æ—Å–æ–±–∏ —Ç–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∏, —è–∫—ñ –ø—Ä–æ–¥–∞—é—Ç—å –∞–≤—Ç–æ.
            –í–∫–ª—é—á–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤:
            - –ü—Ä–∏–≤–∞—Ç–Ω—ñ –æ—Å–æ–±–∏ (70%)
            - –ê–≤—Ç–æ—Å–∞–ª–æ–Ω–∏ —Ç–∞ –¥–∏–ª–µ—Ä–∏ (30%)
            
            –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–∏:
            - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ email
            - –ü—Ä–æ—Ñ—ñ–ª—å –∑ —ñ–º'—è–º —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º
            - –ê–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–∏–ø–æ–º
            - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—Ç–µ–ª–µ—Ñ–æ–Ω)
            - –ê–¥—Ä–µ—Å—É
            """
            
            # This would need a more complex approach to create related data
            # For now, create users and then accounts separately
            
            self.stdout.write(f'‚úÖ Created {count} sellers')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error generating sellers: {e}')

    def _generate_managers(self, count: int):
        """Generate manager users."""
        self.stdout.write(f'üëî Generating {count} managers...')
        
        try:
            managers_prompt = f"""
            –°—Ç–≤–æ—Ä–∏ {count} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ AutoRia.
            –¶–µ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω—ñ—ó, —è–∫—ñ –º–æ–¥–µ—Ä—É—é—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
            –ö–æ–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏:
            - email: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π email @autoria.com
            - is_active: true
            - is_staff: true
            - is_superuser: false
            
            –ü—Ä–æ—Ñ—ñ–ª—å:
            - name: —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ–º'—è
            - surname: —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ
            - age: –≤—ñ–¥ 25 –¥–æ 45
            """
            
            managers = generate_mock_data(
                prompt=managers_prompt,
                django_model=UserModel,
                serializer_class=UserSerializer,
                count=count,
                locale=self.locale,
                batch_size=self.batch_size,
                exclude_fields=['password', 'last_login']
            )

            # Set default password for all created managers
            default_password = 'manager123'
            for manager in managers:
                manager.set_password(default_password)
                manager.save()

            self.stdout.write(f'‚úÖ Created {len(managers)} managers with password: {default_password}')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error generating managers: {e}')

    def _generate_admins(self, count: int):
        """Generate admin users."""
        self.stdout.write(f'‚ö° Generating {count} admins...')
        
        try:
            admins_prompt = f"""
            –°—Ç–≤–æ—Ä–∏ {count} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ AutoRia.
            –¶–µ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ –ø–æ–≤–Ω–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏.
            –ö–æ–∂–µ–Ω –∞–¥–º—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏:
            - email: admin email @autoria.com
            - is_active: true
            - is_staff: true
            - is_superuser: true
            
            –ü—Ä–æ—Ñ—ñ–ª—å:
            - name: —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ–º'—è
            - surname: —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ
            - age: –≤—ñ–¥ 30 –¥–æ 50
            """
            
            admins = generate_mock_data(
                prompt=admins_prompt,
                django_model=UserModel,
                serializer_class=UserSerializer,
                count=count,
                locale=self.locale,
                batch_size=self.batch_size,
                exclude_fields=['password', 'last_login']
            )

            # Set default password for all created admins
            default_password = 'admin123'
            for admin in admins:
                admin.set_password(default_password)
                admin.save()

            self.stdout.write(f'‚úÖ Created {len(admins)} admins with password: {default_password}')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error generating admins: {e}')

    def _generate_car_ads(self, count: int):
        """Generate car advertisements."""
        self.stdout.write(f'üöó Generating {count} car advertisements...')
        
        try:
            car_ads_prompt = f"""
            –°—Ç–≤–æ—Ä–∏ {count} —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø—Ä–æ –ø—Ä–æ–¥–∞–∂ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –¥–ª—è AutoRia.
            –í–∫–ª—é—á–∏ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ:
            - –ü–æ–ø—É–ª—è—Ä–Ω—ñ –º–∞—Ä–∫–∏: Toyota, BMW, Mercedes-Benz, Audi, Volkswagen
            - –†—ñ–∑–Ω—ñ —Ä–æ–∫–∏ –≤–∏–ø—É—Å–∫—É: –≤—ñ–¥ 2010 –¥–æ 2024
            - –†—ñ–∑–Ω—ñ —Ü—ñ–Ω–∏: –≤—ñ–¥ 5000 –¥–æ 100000 USD
            - –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∫—É–∑–æ–≤–∞ —Ç–∞ —Å—Ç–∞–Ω
            
            –ö–æ–∂–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º–∞—Ç–∏:
            - –ü—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            - –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
            - –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É —Ü—ñ–Ω—É –≤ UAH
            - –ü—Ä–æ–±—ñ–≥ –≤ –∫–º
            - –†—ñ–∫ –≤–∏–ø—É—Å–∫—É
            - –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü—è (–ø—Ä–∏–≤–∞—Ç–Ω–∞ –æ—Å–æ–±–∞/–¥–∏–ª–µ—Ä)
            """
            
            car_ads = generate_mock_data(
                prompt=car_ads_prompt,
                django_model=CarAd,
                serializer_class=CarAdCreateSerializer,
                count=count,
                locale=self.locale,
                batch_size=self.batch_size
            )
            
            self.stdout.write(f'‚úÖ Created {len(car_ads)} car advertisements')
            
        except Exception as e:
            self.stdout.write(f'‚ùå Error generating car ads: {e}')
