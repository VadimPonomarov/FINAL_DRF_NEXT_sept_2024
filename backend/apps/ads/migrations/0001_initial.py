# Generated by Django 5.2.1 on 2025-07-31 10:40

import apps.ads.models.car_ad_model
import core.enums.cars
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0010_update_geo_code_for_place_id'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CarColorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the color', max_length=100, unique=True)),
                ('hex_code', models.CharField(blank=True, help_text='Hex color code (e.g., #FF0000 for red)', max_length=7, null=True)),
                ('is_metallic', models.BooleanField(default=False, help_text='Whether this is a metallic color')),
                ('is_pearlescent', models.BooleanField(default=False, help_text='Whether this is a pearlescent color')),
                ('is_popular', models.BooleanField(default=False, help_text='Whether this is a commonly used color')),
            ],
            options={
                'verbose_name': 'Car Color',
                'verbose_name_plural': 'Car Colors',
                'db_table': 'ads_carcolor',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CarMarkModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the car manufacturer', max_length=100, verbose_name='Name')),
                ('logo', models.ImageField(blank=True, help_text='Logo of the car manufacturer', null=True, upload_to='car_marks/logos/')),
                ('is_popular', models.BooleanField(default=False, help_text='Whether this is a popular car mark')),
            ],
            options={
                'verbose_name': 'Car Mark',
                'verbose_name_plural': 'Car Marks',
                'db_table': 'ads_carmake',
                'ordering': ['vehicle_type__sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VehicleTypeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Vehicle type name (e.g., "Легковий", "Вантажівка", "Мотоцикл")', max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Optional description of the vehicle type', null=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, help_text='Icon class or name for UI display', max_length=50, null=True, verbose_name='Icon')),
                ('is_popular', models.BooleanField(default=False, help_text='Mark as popular vehicle type for featured display', verbose_name='Is Popular')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this vehicle type is available for selection', verbose_name='Is Active')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Order for display in lists (lower numbers first)', verbose_name='Sort Order')),
            ],
            options={
                'verbose_name': 'Vehicle Type',
                'verbose_name_plural': 'Vehicle Types',
                'db_table': 'ads_vehicletype',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CarAd',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(help_text='Title of the advertisement', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the car')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the car', max_digits=15, null=True)),
                ('currency', models.CharField(choices=core.enums.cars.Currency.choices, default=core.enums.cars.Currency['UAH'], help_text='The currency of the price', max_length=3)),
                ('dynamic_fields', models.JSONField(default=dict, help_text='Dynamic fields for car specifications')),
                ('is_validated', models.BooleanField(default=False, help_text='Whether the ad has been validated by the LLM')),
                ('validation_errors', models.JSONField(default=dict, help_text='Validation errors from the LLM')),
                ('model', models.CharField(help_text='Model of the car', max_length=100)),
                ('generation', models.CharField(blank=True, help_text='Generation of the car model', max_length=100, null=True)),
                ('modification', models.CharField(blank=True, help_text='Specific modification/variant of the car', max_length=100, null=True)),
                ('region', models.CharField(help_text='Region where the car is located', max_length=100)),
                ('city', models.CharField(help_text='City where the car is located', max_length=100)),
                ('seller_type', models.CharField(choices=core.enums.cars.SellerType.choices, default=core.enums.cars.SellerType['PRIVATE'], help_text='Type of seller (private, dealer, etc.)', max_length=20)),
                ('exchange_status', models.CharField(blank=True, choices=core.enums.cars.ExchangeStatus.choices, help_text='Whether the seller is open to exchanges', max_length=20, null=True)),
                ('geocode', models.CharField(blank=True, help_text='Geocode hash from Google Maps API', max_length=128)),
                ('account', models.ForeignKey(help_text='The account that owns this ad', on_delete=django.db.models.deletion.CASCADE, related_name='car_ads', to='accounts.addsaccount')),
                ('mark', models.ForeignKey(db_column='mark_id', help_text='Mark of the car', on_delete=django.db.models.deletion.PROTECT, related_name='car_ads', to='ads.carmarkmodel')),
            ],
            options={
                'verbose_name': 'Car Advertisement',
                'verbose_name_plural': 'Car Advertisements',
                'db_table': 'car_ads',
                'ordering': ['-created_at'],
            },
            bases=(models.Model, apps.ads.models.car_ad_model.DynamicFieldsMixin),
        ),
        migrations.CreateModel(
            name='AdViewModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the viewer')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string of the viewer', null=True)),
                ('referrer', models.URLField(blank=True, help_text='Referrer URL', null=True)),
                ('session_key', models.CharField(blank=True, help_text='Session key of the viewer', max_length=40, null=True)),
                ('ad', models.ForeignKey(help_text='Ad that was viewed', on_delete=django.db.models.deletion.CASCADE, related_name='ad_views', to='ads.carad')),
            ],
            options={
                'verbose_name': 'Ad View',
                'verbose_name_plural': 'Ad Views',
                'db_table': 'ad_views',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdPromotionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('promotion_type', models.CharField(choices=[('vip', 'VIP'), ('premium', 'Premium'), ('top', 'Top'), ('highlight', 'Highlight'), ('urgent', 'Urgent')], help_text='Type of promotion', max_length=20)),
                ('starts_at', models.DateTimeField(help_text='When the promotion starts')),
                ('ends_at', models.DateTimeField(help_text='When the promotion ends')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this promotion is currently active')),
                ('ad', models.ForeignKey(help_text='Ad that this promotion applies to', on_delete=django.db.models.deletion.CASCADE, related_name='promotions', to='ads.carad')),
            ],
            options={
                'verbose_name': 'Ad Promotion',
                'verbose_name_plural': 'Ad Promotions',
                'db_table': 'ad_promotions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AddImageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('image', models.ImageField(help_text='The image file', upload_to='ads/images/')),
                ('order', models.PositiveIntegerField(default=0, help_text='The order of the image in the gallery')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary image for the ad')),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the image', max_length=255)),
                ('ad', models.ForeignKey(help_text='The advertisement this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ads.carad')),
            ],
            options={
                'verbose_name': 'Ad Image',
                'verbose_name_plural': 'Ad Images',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarMetadataModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether the ad is currently active and visible')),
                ('is_verified', models.BooleanField(db_index=True, default=False, help_text='Whether the ad has been verified by staff')),
                ('is_vip', models.BooleanField(db_index=True, default=False, help_text='Whether this is a VIP/featured ad')),
                ('is_premium', models.BooleanField(db_index=True, default=False, help_text='Whether this is a premium ad with additional features')),
                ('is_highlighted', models.BooleanField(default=False, help_text='Whether this ad is highlighted in search results')),
                ('is_urgent', models.BooleanField(default=False, help_text='Whether this is marked as an urgent sale')),
                ('views_count', models.PositiveIntegerField(default=0, help_text='Number of times the ad has been viewed')),
                ('phone_views_count', models.PositiveIntegerField(default=0, help_text='Number of times the phone number has been viewed')),
                ('refreshed_at', models.DateTimeField(auto_now=True, help_text='When the ad was last refreshed/bumped')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the ad will expire', null=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the title', max_length=255, null=True, unique=True)),
                ('meta_title', models.CharField(blank=True, help_text='SEO title (max 70 characters)', max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, help_text='SEO description (max 160 characters)', max_length=160, null=True)),
                ('car_ad', models.OneToOneField(help_text='The car advertisement this metadata belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='ads.carad')),
            ],
            options={
                'db_table': 'car_metadata',
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the car model', max_length=100)),
                ('is_popular', models.BooleanField(default=False, help_text='Whether this is a popular car model')),
                ('mark', models.ForeignKey(db_column='make_id', help_text='The mark of this car model', on_delete=django.db.models.deletion.CASCADE, related_name='models', to='ads.carmarkmodel')),
            ],
            options={
                'verbose_name': 'Car Model',
                'verbose_name_plural': 'Car Models',
                'db_table': 'ads_carmodel',
                'ordering': ['mark__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CarGenerationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the car generation', max_length=100)),
                ('year_start', models.PositiveIntegerField(help_text='Starting year of production')),
                ('year_end', models.PositiveIntegerField(blank=True, help_text='Ending year of production (null if still in production)', null=True)),
                ('model', models.ForeignKey(help_text='The car model this generation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='generations', to='ads.carmodel')),
            ],
            options={
                'verbose_name': 'Car Generation',
                'verbose_name_plural': 'Car Generations',
                'db_table': 'ads_cargeneration',
                'ordering': ['model__mark__name', 'model__name', '-year_start'],
            },
        ),
        migrations.CreateModel(
            name='CarModificationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the car modification', max_length=100)),
                ('engine_type', models.CharField(help_text='Type of engine (e.g., Gasoline, Diesel, Hybrid, Electric)', max_length=50)),
                ('engine_volume', models.DecimalField(decimal_places=1, help_text='Engine volume in liters', max_digits=3)),
                ('power_hp', models.PositiveIntegerField(help_text='Engine power in horsepower')),
                ('transmission', models.CharField(help_text='Type of transmission (e.g., Manual, Automatic, CVT)', max_length=50)),
                ('drive_type', models.CharField(help_text='Drive type (e.g., FWD, RWD, AWD, 4WD)', max_length=20)),
                ('generation', models.ForeignKey(help_text='The car generation this modification belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='modifications', to='ads.cargenerationmodel')),
            ],
            options={
                'verbose_name': 'Car Modification',
                'verbose_name_plural': 'Car Modifications',
                'db_table': 'ads_carmodification',
                'ordering': ['generation__model__mark__name', 'generation__model__name', 'generation__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CarPriceHistoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Price in USD at the time of recording', max_digits=12, null=True)),
                ('price_eur', models.DecimalField(blank=True, decimal_places=2, help_text='Price in EUR at the time of recording', max_digits=12, null=True)),
                ('price_uah', models.DecimalField(blank=True, decimal_places=2, help_text='Price in UAH at the time of recording', max_digits=15, null=True)),
                ('original_price', models.DecimalField(decimal_places=2, help_text='The original price in the original currency', max_digits=15)),
                ('original_currency', models.CharField(help_text='The original currency of the price', max_length=3)),
                ('exchange_rate_value', models.DecimalField(blank=True, decimal_places=6, help_text='Cached exchange rate value at the time of recording', max_digits=10, null=True)),
                ('recorded_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this price was recorded')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Date when this price was recorded')),
                ('ad', models.ForeignKey(help_text='The car advertisement this price history belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='ads.carad')),
            ],
            options={
                'db_table': 'car_price_history',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='CarSpecificationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(help_text='Manufacturing year of the car', validators=[django.core.validators.MinValueValidator(1900, message='Year must be 1900 or later'), django.core.validators.MaxValueValidator(2100, message='Year must be 2100 or earlier')])),
                ('mileage_km', models.PositiveIntegerField(help_text='Mileage in kilometers', validators=[django.core.validators.MinValueValidator(0)])),
                ('fuel_type', models.CharField(choices=core.enums.cars.FuelType.choices, help_text='Type of fuel the car uses', max_length=20)),
                ('engine_volume', models.FloatField(help_text='Engine volume in liters', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('engine_power', models.PositiveSmallIntegerField(help_text='Engine power in horsepower (HP)', validators=[django.core.validators.MinValueValidator(1)])),
                ('transmission_type', models.CharField(choices=core.enums.cars.TransmissionType.choices, help_text='Type of transmission', max_length=20)),
                ('drive_type', models.CharField(choices=core.enums.cars.DriveType.choices, help_text='Type of drivetrain', max_length=10)),
                ('body_type', models.CharField(choices=core.enums.cars.CarBodyType.choices, help_text='Body type of the car', max_length=20)),
                ('steering_wheel', models.CharField(choices=core.enums.cars.SteeringWheelSide.choices, help_text='Side of the steering wheel', max_length=10)),
                ('vin_code', models.CharField(blank=True, help_text='Vehicle Identification Number (17 characters)', max_length=17, null=True)),
                ('license_plate', models.CharField(blank=True, help_text='License plate number', max_length=20, null=True)),
                ('condition', models.CharField(choices=core.enums.cars.ConditionType.choices, default=core.enums.cars.ConditionType['USED'], help_text='Condition of the car', max_length=20)),
                ('number_of_doors', models.PositiveSmallIntegerField(blank=True, choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Number of doors', null=True)),
                ('number_of_seats', models.PositiveSmallIntegerField(blank=True, help_text='Number of seats', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('car_ad', models.OneToOneField(help_text='The car advertisement these specifications belong to', on_delete=django.db.models.deletion.CASCADE, related_name='specs', to='ads.carad')),
                ('color', models.ForeignKey(help_text='Color of the car', on_delete=django.db.models.deletion.PROTECT, related_name='car_specs', to='ads.carcolormodel')),
            ],
            options={
                'db_table': 'car_specifications',
            },
        ),
        migrations.CreateModel(
            name='RegionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the region', max_length=100)),
                ('code', models.CharField(blank=True, help_text='Region code (e.g., KV for Kyiv Oblast)', max_length=10)),
                ('country', models.CharField(default='Ukraine', help_text='Country this region belongs to', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this region is active for selection')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'db_table': 'ads_region',
                'ordering': ['country', 'name'],
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='CityModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the city', max_length=100)),
                ('is_regional_center', models.BooleanField(default=False, help_text='Whether this city is a regional center')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this city is active for selection')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Geographical latitude', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Geographical longitude', max_digits=9, null=True)),
                ('region', models.ForeignKey(help_text='The region this city belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='ads.regionmodel')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'db_table': 'ads_city',
                'ordering': ['region__country', 'region__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SavedSearchModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(help_text='Name of the saved search', max_length=100)),
                ('search_params', models.JSONField(help_text='JSON object containing search parameters')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this saved search is active')),
                ('last_notified', models.DateTimeField(blank=True, help_text='Last time user was notified about new matches', null=True)),
                ('user', models.ForeignKey(help_text='User who created this saved search', on_delete=django.db.models.deletion.CASCADE, related_name='saved_searches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Saved Search',
                'verbose_name_plural': 'Saved Searches',
                'db_table': 'saved_searches',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='carmarkmodel',
            name='vehicle_type',
            field=models.ForeignKey(help_text='Type of vehicle this mark belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='marks', to='ads.vehicletypemodel', verbose_name='Vehicle Type'),
        ),
        migrations.AddIndex(
            model_name='carad',
            index=models.Index(fields=['created_at'], name='car_ads_created_778c27_idx'),
        ),
        migrations.AddIndex(
            model_name='carad',
            index=models.Index(fields=['seller_type'], name='car_ads_seller__bdc2c8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='carmodel',
            unique_together={('mark', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='cargenerationmodel',
            unique_together={('model', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='carmodificationmodel',
            unique_together={('generation', 'name')},
        ),
        migrations.AddIndex(
            model_name='carpricehistorymodel',
            index=models.Index(fields=['ad', 'date'], name='car_price_h_ad_id_3f1ad5_idx'),
        ),
        migrations.AddIndex(
            model_name='carpricehistorymodel',
            index=models.Index(fields=['date'], name='car_price_h_date_1bbda3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='citymodel',
            unique_together={('name', 'region')},
        ),
        migrations.AlterUniqueTogether(
            name='carmarkmodel',
            unique_together={('vehicle_type', 'name')},
        ),
    ]
