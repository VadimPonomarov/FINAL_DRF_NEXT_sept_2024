# Generated by Django 5.2.4 on 2025-10-09 10:19

import apps.ads.models.car_ad_model
import core.enums.cars
import core.validators.file_validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AdContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("phone", "üìû Phone"),
                            ("email", "üìß Email"),
                            ("telegram", "üì≤ Telegram"),
                            ("whatsapp", "üí¨ WhatsApp"),
                            ("viber", "üì° Viber"),
                            ("instagram", "üì∏ Instagram"),
                            ("website", "üåê Website"),
                        ],
                        help_text="Type of contact (phone, email, etc.)",
                        max_length=32,
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="Contact value (phone number, email address, etc.)",
                        max_length=256,
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this contact is visible in the advertisement",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the primary contact for the advertisement",
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="Optional note about this contact",
                        max_length=128,
                    ),
                ),
            ],
            options={
                "verbose_name": "Advertisement Contact",
                "verbose_name_plural": "Advertisement Contacts",
                "db_table": "ad_contacts",
                "ordering": ["type", "-is_primary"],
            },
        ),
        migrations.CreateModel(
            name="AddImageModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="The image file",
                        null=True,
                        upload_to="ads/images/",
                        validators=[
                            core.validators.file_validators.validate_image_file
                        ],
                    ),
                ),
                (
                    "image_url",
                    models.TextField(
                        blank=True,
                        help_text="URL for generated images (no length restrictions)",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="The order of the image in the gallery"
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the primary image for the ad",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Optional caption for the image",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "Ad Image",
                "verbose_name_plural": "Ad Images",
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("view", "–ü—Ä–æ—Å–º–æ—Ç—Ä"),
                            ("phone_reveal", "–ü–æ–∫–∞–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
                            ("favorite_add", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"),
                            ("favorite_remove", "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"),
                            ("contact_click", "–ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"),
                            ("photo_view", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ"),
                            ("share", "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"),
                            ("report", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"),
                        ],
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("source_page", models.CharField(blank=True, max_length=100)),
                (
                    "position_in_list",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("owner_action", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "ads_ad_interactions",
            },
        ),
        migrations.CreateModel(
            name="AdPromotionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "promotion_type",
                    models.CharField(
                        choices=[
                            ("vip", "VIP"),
                            ("premium", "Premium"),
                            ("top", "Top"),
                            ("highlight", "Highlight"),
                            ("urgent", "Urgent"),
                        ],
                        help_text="Type of promotion",
                        max_length=20,
                    ),
                ),
                (
                    "starts_at",
                    models.DateTimeField(help_text="When the promotion starts"),
                ),
                ("ends_at", models.DateTimeField(help_text="When the promotion ends")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this promotion is currently active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ad Promotion",
                "verbose_name_plural": "Ad Promotions",
                "db_table": "ad_promotions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdViewDetail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("view_duration", models.DurationField(blank=True, null=True)),
                ("time_to_first_scroll", models.DurationField(blank=True, null=True)),
                ("time_to_phone_reveal", models.DurationField(blank=True, null=True)),
                ("photos_viewed", models.PositiveIntegerField(default=0)),
                ("photos_viewed_list", models.JSONField(blank=True, default=list)),
                ("scroll_depth", models.FloatField(default=0.0)),
                ("clicks_on_elements", models.JSONField(blank=True, default=dict)),
                ("came_from", models.CharField(blank=True, max_length=200)),
                ("went_to", models.CharField(blank=True, max_length=200)),
                ("is_quality_view", models.BooleanField(default=False)),
                ("bounce", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "ads_ad_view_details",
            },
        ),
        migrations.CreateModel(
            name="AdViewModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="IP address of the viewer"),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent string of the viewer",
                        null=True,
                    ),
                ),
                (
                    "referrer",
                    models.URLField(blank=True, help_text="Referrer URL", null=True),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True,
                        help_text="Session key of the viewer",
                        max_length=40,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Ad View",
                "verbose_name_plural": "Ad Views",
                "db_table": "ad_views",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CarAd",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the advertisement", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the car"),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The price of the car",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=core.enums.cars.Currency.choices,
                        default=core.enums.cars.Currency["UAH"],
                        help_text="The currency of the price",
                        max_length=3,
                    ),
                ),
                (
                    "dynamic_fields",
                    models.JSONField(
                        default=dict, help_text="Dynamic fields for car specifications"
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the ad has been validated by the LLM",
                    ),
                ),
                (
                    "validation_errors",
                    models.JSONField(
                        default=dict, help_text="Validation errors from the LLM"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending", "Pending Review"),
                            ("active", "Active"),
                            ("needs_review", "Needs Review"),
                            ("rejected", "Rejected"),
                            ("blocked", "Blocked"),
                            ("sold", "Sold"),
                            ("archived", "Archived"),
                        ],
                        default="active",
                        help_text="Current status of the advertisement",
                        max_length=20,
                    ),
                ),
                (
                    "moderated_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the ad was last moderated",
                        null=True,
                    ),
                ),
                (
                    "moderation_reason",
                    models.TextField(
                        blank=True, help_text="Reason for moderation decision"
                    ),
                ),
                (
                    "auto_moderation_attempts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of auto-moderation attempts (max 3)",
                    ),
                ),
                (
                    "needs_manual_review",
                    models.BooleanField(
                        default=False,
                        help_text="Whether ad needs manual review after failed auto-moderation",
                    ),
                ),
                (
                    "manual_review_requested_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When manual review was requested",
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(help_text="Model of the car", max_length=100),
                ),
                (
                    "generation",
                    models.CharField(
                        blank=True,
                        help_text="Generation of the car model",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "modification",
                    models.CharField(
                        blank=True,
                        help_text="Specific modification/variant of the car",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "seller_type",
                    models.CharField(
                        choices=core.enums.cars.SellerType.choices,
                        default=core.enums.cars.SellerType["PRIVATE"],
                        help_text="Type of seller (private, dealer, etc.)",
                        max_length=20,
                    ),
                ),
                (
                    "exchange_status",
                    models.CharField(
                        blank=True,
                        choices=core.enums.cars.ExchangeStatus.choices,
                        help_text="Whether the seller is open to exchanges",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "geocode",
                    models.CharField(
                        blank=True,
                        help_text="Geocode hash from Google Maps API",
                        max_length=128,
                    ),
                ),
                (
                    "is_favorite",
                    models.BooleanField(
                        default=False, help_text="Whether this ad is marked as favorite"
                    ),
                ),
                (
                    "use_profile_contacts",
                    models.BooleanField(
                        default=False,
                        help_text="Use contacts from user profile instead of ad-specific contacts",
                    ),
                ),
                (
                    "contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Contact person name for this ad",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "additional_info",
                    models.TextField(
                        blank=True,
                        help_text="Additional contact information for this ad",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Advertisement",
                "verbose_name_plural": "Car Advertisements",
                "db_table": "car_ads",
                "ordering": ["-created_at"],
            },
            bases=(models.Model, apps.ads.models.car_ad_model.DynamicFieldsMixin),
        ),
        migrations.CreateModel(
            name="CarColorModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the color", max_length=100, unique=True
                    ),
                ),
                (
                    "hex_code",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (e.g., #FF0000 for red)",
                        max_length=7,
                        null=True,
                    ),
                ),
                (
                    "is_metallic",
                    models.BooleanField(
                        default=False, help_text="Whether this is a metallic color"
                    ),
                ),
                (
                    "is_pearlescent",
                    models.BooleanField(
                        default=False, help_text="Whether this is a pearlescent color"
                    ),
                ),
                (
                    "is_popular",
                    models.BooleanField(
                        default=False, help_text="Whether this is a commonly used color"
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Color",
                "verbose_name_plural": "Car Colors",
                "db_table": "ads_carcolor",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CarGenerationModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the car generation", max_length=100
                    ),
                ),
                (
                    "year_start",
                    models.PositiveIntegerField(
                        help_text="Starting year of production"
                    ),
                ),
                (
                    "year_end",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Ending year of production (null if still in production)",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Generation",
                "verbose_name_plural": "Car Generations",
                "db_table": "ads_cargeneration",
                "ordering": ["model__mark__name", "model__name", "-year_start"],
            },
        ),
        migrations.CreateModel(
            name="CarMarkModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the car manufacturer",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Logo of the car manufacturer",
                        null=True,
                        upload_to="car_marks/logos/",
                    ),
                ),
                (
                    "is_popular",
                    models.BooleanField(
                        default=False, help_text="Whether this is a popular car mark"
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Mark",
                "verbose_name_plural": "Car Marks",
                "db_table": "ads_carmake",
                "ordering": ["vehicle_type__sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="CarMetadataModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether the ad is currently active and visible",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the ad has been verified by staff",
                    ),
                ),
                (
                    "is_vip",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this is a VIP/featured ad",
                    ),
                ),
                (
                    "is_premium",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this is a premium ad with additional features",
                    ),
                ),
                (
                    "is_highlighted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this ad is highlighted in search results",
                    ),
                ),
                (
                    "is_urgent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is marked as an urgent sale",
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times the ad has been viewed"
                    ),
                ),
                (
                    "phone_views_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times the phone number has been viewed",
                    ),
                ),
                (
                    "refreshed_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the ad was last refreshed/bumped"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When the ad will expire", null=True
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the title",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="SEO title (max 70 characters)",
                        max_length=70,
                        null=True,
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True,
                        help_text="SEO description (max 160 characters)",
                        max_length=160,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "car_metadata",
            },
        ),
        migrations.CreateModel(
            name="CarModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(help_text="Name of the car model", max_length=100),
                ),
                (
                    "is_popular",
                    models.BooleanField(
                        default=False, help_text="Whether this is a popular car model"
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Model",
                "verbose_name_plural": "Car Models",
                "db_table": "ads_carmodel",
                "ordering": ["mark__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="CarModificationModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the car modification", max_length=100
                    ),
                ),
                (
                    "engine_type",
                    models.CharField(
                        help_text="Type of engine (e.g., Gasoline, Diesel, Hybrid, Electric)",
                        max_length=50,
                    ),
                ),
                (
                    "engine_volume",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Engine volume in liters",
                        max_digits=3,
                    ),
                ),
                (
                    "power_hp",
                    models.PositiveIntegerField(help_text="Engine power in horsepower"),
                ),
                (
                    "transmission",
                    models.CharField(
                        help_text="Type of transmission (e.g., Manual, Automatic, CVT)",
                        max_length=50,
                    ),
                ),
                (
                    "drive_type",
                    models.CharField(
                        help_text="Drive type (e.g., FWD, RWD, AWD, 4WD)", max_length=20
                    ),
                ),
            ],
            options={
                "verbose_name": "Car Modification",
                "verbose_name_plural": "Car Modifications",
                "db_table": "ads_carmodification",
                "ordering": [
                    "generation__model__mark__name",
                    "generation__model__name",
                    "generation__name",
                    "name",
                ],
            },
        ),
        migrations.CreateModel(
            name="CarPriceHistoryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "price_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in USD at the time of recording",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "price_eur",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in EUR at the time of recording",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "price_uah",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in UAH at the time of recording",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "original_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The original price in the original currency",
                        max_digits=15,
                    ),
                ),
                (
                    "original_currency",
                    models.CharField(
                        help_text="The original currency of the price", max_length=3
                    ),
                ),
                (
                    "exchange_rate_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Cached exchange rate value at the time of recording",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "recorded_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this price was recorded",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date when this price was recorded",
                    ),
                ),
            ],
            options={
                "db_table": "car_price_history",
                "ordering": ["-recorded_at"],
            },
        ),
        migrations.CreateModel(
            name="CarSpecificationModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.PositiveSmallIntegerField(
                        help_text="Manufacturing year of the car",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1900, message="Year must be 1900 or later"
                            ),
                            django.core.validators.MaxValueValidator(
                                2100, message="Year must be 2100 or earlier"
                            ),
                        ],
                    ),
                ),
                (
                    "mileage_km",
                    models.PositiveIntegerField(
                        help_text="Mileage in kilometers",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "fuel_type",
                    models.CharField(
                        choices=core.enums.cars.FuelType.choices,
                        help_text="Type of fuel the car uses",
                        max_length=20,
                    ),
                ),
                (
                    "engine_volume",
                    models.FloatField(
                        help_text="Engine volume in liters",
                        validators=[django.core.validators.MinValueValidator(0.1)],
                    ),
                ),
                (
                    "engine_power",
                    models.PositiveSmallIntegerField(
                        help_text="Engine power in horsepower (HP)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "transmission_type",
                    models.CharField(
                        choices=core.enums.cars.TransmissionType.choices,
                        help_text="Type of transmission",
                        max_length=20,
                    ),
                ),
                (
                    "drive_type",
                    models.CharField(
                        choices=core.enums.cars.DriveType.choices,
                        help_text="Type of drivetrain",
                        max_length=10,
                    ),
                ),
                (
                    "body_type",
                    models.CharField(
                        choices=core.enums.cars.CarBodyType.choices,
                        help_text="Body type of the car",
                        max_length=20,
                    ),
                ),
                (
                    "steering_wheel",
                    models.CharField(
                        choices=core.enums.cars.SteeringWheelSide.choices,
                        help_text="Side of the steering wheel",
                        max_length=10,
                    ),
                ),
                (
                    "vin_code",
                    models.CharField(
                        blank=True,
                        help_text="Vehicle Identification Number (17 characters)",
                        max_length=17,
                        null=True,
                    ),
                ),
                (
                    "license_plate",
                    models.CharField(
                        blank=True,
                        help_text="License plate number",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        choices=core.enums.cars.ConditionType.choices,
                        default=core.enums.cars.ConditionType["USED"],
                        help_text="Condition of the car",
                        max_length=20,
                    ),
                ),
                (
                    "number_of_doors",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Number of doors",
                        null=True,
                    ),
                ),
                (
                    "number_of_seats",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of seats",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "car_specifications",
            },
        ),
        migrations.CreateModel(
            name="CityModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(help_text="Name of the city", max_length=100),
                ),
                (
                    "is_regional_center",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this city is a regional center",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this city is active for selection",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Geographical latitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Geographical longitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "City",
                "verbose_name_plural": "Cities",
                "db_table": "ads_city",
                "ordering": ["region__country", "region__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="ExchangeRate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "usd_rate",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="USD to UAH exchange rate",
                        max_digits=10,
                    ),
                ),
                (
                    "eur_rate",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="EUR to UAH exchange rate",
                        max_digits=10,
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Date for these exchange rates", unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Exchange Rate",
                "verbose_name_plural": "Exchange Rates",
                "db_table": "exchange_rates",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="FavoriteAd",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "favorited_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this ad was added to favorites",
                    ),
                ),
            ],
            options={
                "verbose_name": "Favorite Ad",
                "verbose_name_plural": "Favorite Ads",
                "db_table": "ads_favorite_ads",
            },
        ),
        migrations.CreateModel(
            name="PageView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField()),
                (
                    "page_type",
                    models.CharField(
                        choices=[
                            ("home", "–ì–ª–∞–≤–Ω–∞—è"),
                            ("search", "–ü–æ–∏—Å–∫"),
                            ("ad_detail", "–ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
                            ("user_profile", "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                            ("favorites", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
                            ("other", "–î—Ä—É–≥–æ–µ"),
                        ],
                        max_length=50,
                    ),
                ),
                ("page_title", models.CharField(blank=True, max_length=200)),
                ("viewed_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("time_on_page", models.DurationField(blank=True, null=True)),
                ("scroll_depth", models.FloatField(default=0.0)),
                ("clicks_count", models.PositiveIntegerField(default=0)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "ads_page_views",
            },
        ),
        migrations.CreateModel(
            name="RegionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the region in Ukrainian", max_length=100
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="Region code (e.g., KV for Kyiv Oblast)",
                        max_length=10,
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="Ukraine",
                        help_text="Country this region belongs to",
                        max_length=100,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this region is active for selection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Region",
                "verbose_name_plural": "Regions",
                "db_table": "ads_region",
                "ordering": ["country", "name"],
            },
        ),
        migrations.CreateModel(
            name="SavedSearchModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the saved search", max_length=100
                    ),
                ),
                (
                    "search_params",
                    models.JSONField(
                        help_text="JSON object containing search parameters"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this saved search is active"
                    ),
                ),
                (
                    "last_notified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time user was notified about new matches",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Saved Search",
                "verbose_name_plural": "Saved Searches",
                "db_table": "saved_searches",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query_text", models.TextField()),
                ("filters_applied", models.JSONField(blank=True, default=dict)),
                ("results_count", models.PositiveIntegerField(default=0)),
                ("clicked_results", models.JSONField(blank=True, default=list)),
                (
                    "searched_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "ads_search_queries",
            },
        ),
        migrations.CreateModel(
            name="UserBehaviorSummary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_sessions", models.PositiveIntegerField(default=0)),
                ("total_page_views", models.PositiveIntegerField(default=0)),
                ("total_ad_views", models.PositiveIntegerField(default=0)),
                ("total_interactions", models.PositiveIntegerField(default=0)),
                ("avg_session_duration", models.DurationField(blank=True, null=True)),
                ("avg_pages_per_session", models.FloatField(default=0.0)),
                ("favorite_brands", models.JSONField(blank=True, default=list)),
                ("favorite_price_range", models.JSONField(blank=True, default=dict)),
                ("favorite_regions", models.JSONField(blank=True, default=list)),
                ("most_active_hours", models.JSONField(blank=True, default=list)),
                ("most_active_days", models.JSONField(blank=True, default=list)),
                ("device_preferences", models.JSONField(blank=True, default=dict)),
                ("phone_reveals_count", models.PositiveIntegerField(default=0)),
                ("favorites_added_count", models.PositiveIntegerField(default=0)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ads_user_behavior_summaries",
            },
        ),
        migrations.CreateModel(
            name="VehicleTypeModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text='Vehicle type name (e.g., "–õ–µ–≥–∫–æ–≤–∏–π", "–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞", "–ú–æ—Ç–æ—Ü–∏–∫–ª")',
                        max_length=100,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the name",
                        max_length=100,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the vehicle type",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon class or name for UI display",
                        max_length=50,
                        null=True,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "is_popular",
                    models.BooleanField(
                        default=False,
                        help_text="Mark as popular vehicle type for featured display",
                        verbose_name="Is Popular",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this vehicle type is available for selection",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order for display in lists (lower numbers first)",
                        verbose_name="Sort Order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vehicle Type",
                "verbose_name_plural": "Vehicle Types",
                "db_table": "ads_vehicletype",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="VisitorSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("region", models.CharField(blank=True, max_length=100)),
                ("referrer", models.URLField(blank=True)),
                ("utm_source", models.CharField(blank=True, max_length=100)),
                ("utm_medium", models.CharField(blank=True, max_length=100)),
                ("utm_campaign", models.CharField(blank=True, max_length=100)),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("desktop", "Desktop"),
                            ("mobile", "Mobile"),
                            ("tablet", "Tablet"),
                        ],
                        max_length=50,
                    ),
                ),
                ("browser", models.CharField(blank=True, max_length=100)),
                ("os", models.CharField(blank=True, max_length=100)),
                ("started_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_activity",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("total_duration", models.DurationField(blank=True, null=True)),
                ("pages_viewed", models.PositiveIntegerField(default=0)),
                ("ads_viewed", models.PositiveIntegerField(default=0)),
                ("interactions_count", models.PositiveIntegerField(default=0)),
            ],
            options={
                "db_table": "ads_visitor_sessions",
            },
        ),
    ]
