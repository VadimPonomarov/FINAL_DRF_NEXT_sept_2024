"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RabbitMQ
"""
import json
import logging
from typing import Dict, Any, Optional
from django.conf import settings
from django.utils import timezone

logger = logging.getLogger(__name__)


class ModerationNotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    """
    
    @staticmethod
    def send_manual_review_request(ad_id: int, reason: str, attempts: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ RabbitMQ
        
        Args:
            ad_id: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é
            attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from core.services.send_email import send_email_via_rabbitmq
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_data = {
                'type': 'manual_moderation_request',
                'ad_id': ad_id,
                'reason': reason,
                'auto_moderation_attempts': attempts,
                'requested_at': timezone.now().isoformat(),
                'priority': 'high' if attempts >= 3 else 'normal',
                'metadata': {
                    'service': 'ads',
                    'action': 'manual_review_required',
                    'max_attempts_reached': attempts >= 3
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            success = send_email_via_rabbitmq(
                to_email='managers@autoria.com',
                subject=f'üîç Manual Review Required - Ad #{ad_id}',
                template_name='manual_moderation_request',
                context={
                    'ad_id': ad_id,
                    'reason': reason,
                    'attempts': attempts,
                    'admin_url': f'{settings.FRONTEND_URL}/admin/ads/{ad_id}/',
                    'notification_data': notification_data
                },
                priority='high'
            )
            
            if success:
                logger.info(f"‚úÖ Manual review request sent for ad {ad_id} after {attempts} attempts")
            else:
                logger.error(f"‚ùå Failed to send manual review request for ad {ad_id}")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Error sending manual review request for ad {ad_id}: {str(e)}")
            return False
    
    @staticmethod
    def send_moderation_status_update(ad_id: int, status: str, moderator_id: Optional[int] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        
        Args:
            ad_id: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            moderator_id: ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            from core.services.send_email import send_email_via_rabbitmq
            
            notification_data = {
                'type': 'moderation_status_update',
                'ad_id': ad_id,
                'status': status,
                'moderator_id': moderator_id,
                'updated_at': timezone.now().isoformat(),
                'metadata': {
                    'service': 'ads',
                    'action': 'status_update'
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            success = send_email_via_rabbitmq(
                to_email='user@autoria.com',  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
                subject=f'üì¢ Ad Status Update - #{ad_id}',
                template_name='moderation_status_update',
                context={
                    'ad_id': ad_id,
                    'status': status,
                    'notification_data': notification_data
                },
                priority='normal'
            )
            
            if success:
                logger.info(f"‚úÖ Status update notification sent for ad {ad_id}: {status}")
            else:
                logger.error(f"‚ùå Failed to send status update notification for ad {ad_id}")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Error sending status update notification for ad {ad_id}: {str(e)}")
            return False
    
    @staticmethod
    def send_manager_alert(message: str, priority: str = 'normal', metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low, normal, high, critical)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            from core.services.send_email import send_email_via_rabbitmq
            
            notification_data = {
                'type': 'manager_alert',
                'message': message,
                'priority': priority,
                'sent_at': timezone.now().isoformat(),
                'metadata': metadata or {}
            }
            
            success = send_email_via_rabbitmq(
                to_email='managers@autoria.com',
                subject=f'üö® Manager Alert - {priority.upper()}',
                template_name='manager_alert',
                context={
                    'message': message,
                    'priority': priority,
                    'notification_data': notification_data
                },
                priority=priority
            )
            
            if success:
                logger.info(f"‚úÖ Manager alert sent: {message[:50]}...")
            else:
                logger.error(f"‚ùå Failed to send manager alert: {message[:50]}...")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Error sending manager alert: {str(e)}")
            return False


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def notify_manual_review_required(ad_id: int, reason: str, attempts: int) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    return ModerationNotificationService.send_manual_review_request(ad_id, reason, attempts)


def notify_moderation_status_changed(ad_id: int, status: str, moderator_id: Optional[int] = None) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    return ModerationNotificationService.send_moderation_status_update(ad_id, status, moderator_id)


def alert_managers(message: str, priority: str = 'normal', **metadata) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    return ModerationNotificationService.send_manager_alert(message, priority, metadata)
