"""
üîç Brand Logo Web Search –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª–æ–≥–æ—Ç–∏–ø–∏

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î DuckDuckGo –¥–ª—è –ø–æ—à—É–∫—É –æ–ø–∏—Å—ñ–≤ –ª–æ–≥–æ—Ç–∏–ø—ñ–≤ –±—Ä–µ–Ω–¥—ñ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –∑–æ–±—Ä–∞–∂–µ–Ω—å.
"""
import logging
from typing import Optional, Dict

logger = logging.getLogger(__name__)

def search_brand_logo_info(brand: str) -> Optional[str]:
    """
    –®—É–∫–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥—É —á–µ—Ä–µ–∑ DuckDuckGo.
    
    Args:
        brand: –ù–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É (–Ω–∞–ø—Ä. "Renault", "Toyota")
    
    Returns:
        str: –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ª–æ–≥–æ—Ç–∏–ø—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É –∞–±–æ None
    """
    try:
        from duckduckgo_search import DDGS
        
        # –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
        query = f"{brand} car logo badge emblem description"
        
        logger.info(f"[BrandSearch] üîç Searching for: {query}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫
        ddgs = DDGS()
        results = ddgs.text(query, max_results=3)
        
        if not results:
            logger.warning(f"[BrandSearch] ‚ö†Ô∏è No results found for {brand}")
            return None
        
        # –ó–±–∏—Ä–∞—î–º–æ –æ–ø–∏—Å–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        descriptions = []
        for result in results:
            title = result.get('title', '')
            body = result.get('body', '')
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏
            text = f"{title}. {body}"
            if any(keyword in text.lower() for keyword in ['logo', 'badge', 'emblem', 'symbol']):
                descriptions.append(text)
        
        if not descriptions:
            logger.warning(f"[BrandSearch] ‚ö†Ô∏è No relevant descriptions for {brand}")
            return None
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π –Ω–∞–π—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—à–∏–π –æ–ø–∏—Å (–æ–±–º–µ–∂–µ–Ω–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤)
        best_description = descriptions[0][:200]
        logger.info(f"[BrandSearch] ‚úÖ Found description for {brand}: {best_description[:100]}...")
        
        return best_description
        
    except ImportError:
        logger.error("[BrandSearch] ‚ùå duckduckgo_search not installed")
        return None
    except Exception as e:
        logger.error(f"[BrandSearch] ‚ùå Search error for {brand}: {e}")
        return None


def extract_logo_features(search_result: str, brand: str) -> Dict[str, str]:
    """
    –í–∏—Ç—è–≥—É—î –∫–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –ª–æ–≥–æ—Ç–∏–ø—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É.
    
    Args:
        search_result: –¢–µ–∫—Å—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
        brand: –ù–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É
    
    Returns:
        dict: –ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –ª–æ–≥–æ—Ç–∏–ø—É (—Ñ–æ—Ä–º–∞, –∫–æ–ª—ñ—Ä, –µ–ª–µ–º–µ–Ω—Ç–∏)
    """
    if not search_result:
        return {}
    
    features = {
        "shape": "",
        "color": "",
        "elements": ""
    }
    
    text_lower = search_result.lower()
    
    # –§–æ—Ä–º–∞
    shapes = ['circle', 'oval', 'diamond', 'star', 'shield', 'wings', 'roundel', 'hexagon', 'square']
    for shape in shapes:
        if shape in text_lower:
            features["shape"] = shape
            break
    
    # –ö–æ–ª—ñ—Ä
    colors = ['blue', 'silver', 'chrome', 'gold', 'red', 'black', 'white', 'green', 'yellow']
    for color in colors:
        if color in text_lower:
            features["color"] = color
            break
    
    # –ï–ª–µ–º–µ–Ω—Ç–∏
    elements = ['letter', 'letters', 'text', 'animal', 'lion', 'horse', 'star', 'rings', 'ellipse']
    found_elements = [elem for elem in elements if elem in text_lower]
    if found_elements:
        features["elements"] = ", ".join(found_elements)
    
    logger.info(f"[BrandSearch] üé® Extracted features for {brand}: {features}")
    
    return features


def create_smart_logo_prompt(brand: str, model: str, year: int, color: str,
                              body_type: str, angle: str) -> tuple[str, Optional[Dict]]:
    """
    –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–ø—Ç –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
    
    –°–¢–†–ê–¢–ï–ì–Ü–Ø:
    1. –®—É–∫–∞—î –æ–ø–∏—Å –ª–æ–≥–æ—Ç–∏–ø—É —á–µ—Ä–µ–∑ DuckDuckGo text search
    2. –®—É–∫–∞—î –†–ï–ê–õ–¨–ù–ï —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —á–µ—Ä–µ–∑ DuckDuckGo images
    3. –ê–Ω–∞–ª—ñ–∑—É—î —Ä–µ—Ñ–µ—Ä–µ–Ω—Å —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    4. –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º–ø—Ç + URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
    
    Returns:
        tuple: (prompt: str, reference_data: dict –∞–±–æ None)
    """
    logger.info(f"[SmartPrompt] üöÄ Creating smart prompt for {year} {brand} {model}")
    
    # 1. –ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª–æ–≥–æ—Ç–∏–ø
    logo_description = search_brand_logo_info(brand)
    
    if logo_description:
        features = extract_logo_features(logo_description, brand)
        logo_hint = f"{brand} logo"
        if features.get("shape"):
            logo_hint += f" ({features['shape']} shape"
            if features.get("color"):
                logo_hint += f", {features['color']}"
            logo_hint += ")"
        logger.info(f"[SmartPrompt] ‚úÖ Logo from web: {logo_hint}")
    else:
        logo_hint = f"{brand} authentic badge"
        logger.info(f"[SmartPrompt] ‚ö†Ô∏è Logo fallback")
    
    # 2. –ü–æ—à—É–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
    reference = get_real_car_reference_images(brand, model, year, angle)
    
    if reference:
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
        ref_details = analyze_reference_image_description(reference)
        logger.info(f"[SmartPrompt] ‚úÖ Reference found: {reference['url'][:80]}...")
        logger.info(f"[SmartPrompt] üìù Reference details: {ref_details}")
        
        # –ü—Ä–æ–º–ø—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
        prompt = f"""
        {year} {brand} {model} {body_type}, {color}, {angle} view.
        
        Style: Similar to real {year} {brand} {model} photos, {ref_details}.
        Show {logo_hint} on front grille, clearly visible and accurate.
        Photorealistic automotive photography, authentic {brand} design and branding.
        """.strip()
    else:
        # –ü—Ä–æ–º–ø—Ç –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
        logger.info(f"[SmartPrompt] ‚ö†Ô∏è No reference photo found")
        prompt = f"""
        {year} {brand} {model} {body_type}, {color}, {angle} view.
        
        Show {logo_hint} on front grille, clearly visible.
        Photorealistic automotive photography, accurate brand identity.
        """.strip()
    
    final_prompt = " ".join(prompt.split())
    logger.info(f"[SmartPrompt] üìù Final prompt length: {len(final_prompt)} chars")
    
    return final_prompt, reference


def get_brand_logo_reference_image(brand: str) -> Optional[str]:
    """
    –®—É–∫–∞—î URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É —á–µ—Ä–µ–∑ DuckDuckGo Images.
    
    Args:
        brand: –ù–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É
    
    Returns:
        str: URL –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É –∞–±–æ None
    """
    try:
        from duckduckgo_search import DDGS
        
        query = f"{brand} car logo official"
        
        logger.info(f"[BrandSearch] üñºÔ∏è Searching images for: {query}")
        
        ddgs = DDGS()
        results = ddgs.images(query, max_results=1)
        
        if results and len(results) > 0:
            image_url = results[0].get('image')
            logger.info(f"[BrandSearch] ‚úÖ Found reference image: {image_url[:100]}...")
            return image_url
        
        logger.warning(f"[BrandSearch] ‚ö†Ô∏è No reference images found for {brand}")
        return None
        
    except Exception as e:
        logger.error(f"[BrandSearch] ‚ùå Image search error: {e}")
        return None


def get_real_car_reference_images(brand: str, model: str, year: int, 
                                    angle: str = "front") -> Optional[Dict[str, str]]:
    """
    –®—É–∫–∞—î –†–ï–ê–õ–¨–ù–Ü —Ñ–æ—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —á–µ—Ä–µ–∑ DuckDuckGo Images.
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.
    
    Args:
        brand: –ë—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä. "Renault")
        model: –ú–æ–¥–µ–ª—å (–Ω–∞–ø—Ä. "Clio")
        year: –†—ñ–∫ –≤–∏–ø—É—Å–∫—É
        angle: –†–∞–∫—É—Ä—Å (front, side, rear)
    
    Returns:
        dict: {'url': str, 'title': str, 'description': str} –∞–±–æ None
    """
    try:
        from duckduckgo_search import DDGS
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö —Ñ–æ—Ç–æ
        angle_keywords = {
            "front": "front view",
            "side": "side profile",
            "rear": "rear view back",
            "interior": "interior dashboard"
        }
        
        angle_keyword = angle_keywords.get(angle, "front view")
        query = f"{year} {brand} {model} {angle_keyword} photo"
        
        logger.info(f"[CarReference] üöó Searching real photos: {query}")
        
        ddgs = DDGS()
        results = ddgs.images(query, max_results=5)
        
        if not results:
            logger.warning(f"[CarReference] ‚ö†Ô∏è No photos found for {brand} {model}")
            return None
        
        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ñ–æ—Ç–æ
        best_result = results[0]
        
        reference = {
            "url": best_result.get('image', ''),
            "title": best_result.get('title', ''),
            "thumbnail": best_result.get('thumbnail', ''),
            "source": best_result.get('source', '')
        }
        
        logger.info(f"[CarReference] ‚úÖ Found reference photo: {reference['url'][:100]}...")
        logger.info(f"[CarReference] üìù Title: {reference['title']}")
        
        return reference
        
    except Exception as e:
        logger.error(f"[CarReference] ‚ùå Photo search error: {e}")
        return None


def analyze_reference_image_description(reference: Dict[str, str]) -> str:
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –æ–ø–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É.
    
    Args:
        reference: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–µ —Ñ–æ—Ç–æ
    
    Returns:
        str: –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π –∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
    """
    if not reference:
        return ""
    
    title = reference.get('title', '').lower()
    
    # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –¥–µ—Ç–∞–ª—ñ –∑ –∑–∞–≥–æ–ª–æ–≤–∫—É
    details = []
    
    # –ö–æ–ª—ñ—Ä —è–∫—â–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è
    colors = ['red', 'blue', 'black', 'white', 'silver', 'grey', 'gray', 'green', 'yellow']
    for color in colors:
        if color in title:
            details.append(f"{color} color")
            break
    
    # –£–º–æ–≤–∏/—Å—Ç–∞–Ω
    if 'new' in title:
        details.append("brand new condition")
    elif 'used' in title:
        details.append("well-maintained")
    
    # –û—Ç–æ—á–µ–Ω–Ω—è
    if 'studio' in title or 'showroom' in title:
        details.append("studio lighting")
    elif 'outdoor' in title or 'street' in title:
        details.append("natural outdoor setting")
    
    description = ", ".join(details) if details else "professional photography"
    
    logger.info(f"[CarReference] üé® Extracted details: {description}")
    
    return description

