"""
Django management command to test Google Maps API connectivity and permissions.
"""

import googlemaps
from django.core.management.base import BaseCommand
from core.security import key_manager


class Command(BaseCommand):
    help = 'Test Google Maps API connectivity and permissions'

    def handle(self, *args, **options):
        """Test Google Maps API."""
        try:
            self.stdout.write('üîë –ü–†–û–í–ï–†–ö–ê GOOGLE MAPS API')
            self.stdout.write('=' * 50)
            
            # Get API key
            api_key = key_manager.get_key('GOOGLE_MAPS_API_KEY')
            if not api_key:
                self.stdout.write('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
                return
            
            self.stdout.write(f'‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: {api_key[:20]}...')
            
            # Initialize Google Maps client
            gmaps = googlemaps.Client(key=api_key)
            
            # Test basic geocoding
            self._test_basic_geocoding(gmaps)
            
            # Test Ukrainian addresses
            self._test_ukrainian_addresses(gmaps)
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
            raise

    def _test_basic_geocoding(self, gmaps):
        """Test basic geocoding functionality."""
        self.stdout.write('\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        test_addresses = [
            'Kyiv, Ukraine',
            'New York, USA',
            'London, UK'
        ]
        
        for address in test_addresses:
            try:
                self.stdout.write(f'üìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {address}')
                result = gmaps.geocode(address)
                
                if result:
                    first_result = result[0]
                    self.stdout.write(f'   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {first_result["formatted_address"]}')
                    self.stdout.write(f'   üÜî Place ID: {first_result["place_id"]}')
                    location = first_result['geometry']['location']
                    self.stdout.write(f'   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location["lat"]}, {location["lng"]}')
                else:
                    self.stdout.write(f'   ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                    
            except googlemaps.exceptions.ApiError as e:
                self.stdout.write(f'   ‚ùå API –æ—à–∏–±–∫–∞: {e}')
                self._diagnose_api_error(e)
                return False
            except Exception as e:
                self.stdout.write(f'   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}')
                return False
        
        return True

    def _test_ukrainian_addresses(self, gmaps):
        """Test geocoding with Ukrainian addresses."""
        self.stdout.write('\nüá∫üá¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ö–†–ê–ò–ù–°–ö–ò–• –ê–î–†–ï–°–û–í')
        self.stdout.write('-' * 40)
        
        ukrainian_addresses = [
            '–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞',
            '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞',
            '–û–¥–µ—Å–∞, –£–∫—Ä–∞—ó–Ω–∞',
            '–õ—å–≤—ñ–≤, –£–∫—Ä–∞—ó–Ω–∞'
        ]
        
        for address in ukrainian_addresses:
            try:
                self.stdout.write(f'üìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {address}')
                result = gmaps.geocode(address)
                
                if result:
                    first_result = result[0]
                    self.stdout.write(f'   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {first_result["formatted_address"]}')
                    
                    # Parse address components
                    components = first_result.get('address_components', [])
                    self.stdout.write('   üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞:')
                    for component in components[:3]:  # Show first 3 components
                        types = ', '.join(component['types'])
                        self.stdout.write(f'      {component["long_name"]} ({types})')
                else:
                    self.stdout.write(f'   ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                    
            except googlemaps.exceptions.ApiError as e:
                self.stdout.write(f'   ‚ùå API –æ—à–∏–±–∫–∞: {e}')
                return False
            except Exception as e:
                self.stdout.write(f'   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}')
                return False
        
        return True

    def _diagnose_api_error(self, error):
        """Diagnose Google Maps API errors."""
        self.stdout.write('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò API:')
        self.stdout.write('-' * 30)
        
        error_str = str(error)
        
        if 'REQUEST_DENIED' in error_str:
            self.stdout.write('‚ùå REQUEST_DENIED - API –∫–ª—é—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            self.stdout.write('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:')
            self.stdout.write('   1. –í–∫–ª—é—á–∏—Ç–µ Geocoding API –≤ Google Cloud Console')
            self.stdout.write('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API –∫–ª—é—á–∞')
            self.stdout.write('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–ª–ª–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            
        elif 'OVER_QUERY_LIMIT' in error_str:
            self.stdout.write('‚ùå OVER_QUERY_LIMIT - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤')
            self.stdout.write('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:')
            self.stdout.write('   1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞')
            self.stdout.write('   2. –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤ Google Cloud Console')
            
        elif 'INVALID_REQUEST' in error_str:
            self.stdout.write('‚ùå INVALID_REQUEST - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
            self.stdout.write('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞')
            
        elif 'ZERO_RESULTS' in error_str:
            self.stdout.write('‚ùå ZERO_RESULTS - –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            self.stdout.write('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞')
            
        else:
            self.stdout.write(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error_str}')
        
        self.stdout.write('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:')
        self.stdout.write('   Google Cloud Console: https://console.cloud.google.com/')
        self.stdout.write('   Geocoding API: https://developers.google.com/maps/documentation/geocoding')
        self.stdout.write('   API Key restrictions: https://cloud.google.com/docs/authentication/api-keys')
