"""
Django management command to test simple geocoding with requests library.
"""

from django.core.management.base import BaseCommand
from apps.accounts.utils.geocoding import geocode_address_simple, get_full_geocode
from core.security import key_manager


class Command(BaseCommand):
    help = 'Test simple geocoding functionality using requests library'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-api-key',
            action='store_true',
            help='Test API key decryption first'
        )

    def handle(self, *args, **options):
        """Test simple geocoding functionality."""
        try:
            self.stdout.write('üó∫Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø')
            self.stdout.write('=' * 60)
            
            # Test API key decryption
            api_key = self._test_api_key_decryption()
            if not api_key:
                return
            
            if options['test_api_key']:
                self.stdout.write('‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω')
                return
            
            # Test simple geocoding
            self._test_simple_geocoding(api_key)
            
            # Test full geocoding
            self._test_full_geocoding()
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
            raise

    def _test_api_key_decryption(self):
        """Test API key decryption."""
        self.stdout.write('\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–®–ò–§–†–û–í–ê–ù–ò–Ø API –ö–õ–Æ–ß–ê')
        self.stdout.write('-' * 40)
        
        try:
            api_key = key_manager.google_maps_api_key
            if api_key:
                self.stdout.write(f'‚úÖ API –∫–ª—é—á –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω: {api_key[:20]}...')
                self.stdout.write(f'üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤')
                return api_key
            else:
                self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á')
                return None
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}')
            return None

    def _test_simple_geocoding(self, api_key):
        """Test simple geocoding function."""
        self.stdout.write('\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        test_addresses = [
            "Kyiv, Ukraine",
            "1600 Amphitheatre Parkway, Mountain View, CA",
            "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
            "–û–¥–µ—Å–∞, –£–∫—Ä–∞—ó–Ω–∞"
        ]
        
        for address in test_addresses:
            self.stdout.write(f'\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {address}')
            
            try:
                result = geocode_address_simple(address, api_key)
                
                if result:
                    self.stdout.write('‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
                    self.stdout.write(f'   üÜî Place ID: {result["place_id"]}')
                    self.stdout.write(f'   üè† –ê–¥—Ä–µ—Å: {result["formatted_address"]}')
                    
                    location = result["geometry"]["location"]
                    self.stdout.write(f'   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location["lat"]}, {location["lng"]}')
                    
                    # Show address components
                    components = result.get("address_components", [])
                    if components:
                        self.stdout.write('   üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:')
                        for comp in components[:3]:  # Show first 3
                            types = ', '.join(comp['types'])
                            self.stdout.write(f'      {comp["long_name"]} ({types})')
                else:
                    self.stdout.write('‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                    
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞: {e}')

    def _test_full_geocoding(self):
        """Test full geocoding function."""
        self.stdout.write('\nüåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        test_address_components = {
            'country': '–£–∫—Ä–∞—ó–Ω–∞',
            'region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
            'locality': '–ö–∏—ó–≤',
            'street': '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫',
            'building': '1',
            'apartment': '10'
        }
        
        self.stdout.write('üìç –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞:')
        for key, value in test_address_components.items():
            self.stdout.write(f'   {key}: {value}')
        
        try:
            result = get_full_geocode(**test_address_components)
            
            if result:
                self.stdout.write('\n‚úÖ –ü–û–õ–ù–û–ï –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!')
                self.stdout.write(f'üÜî Place ID: {result["place_id"]}')
                self.stdout.write(f'üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result["latitude"]}, {result["longitude"]}')
                self.stdout.write(f'üè† –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {result["formatted_address"]}')
                self.stdout.write(f'üîó –•–µ—à –∞–¥—Ä–µ—Å–∞: {result["address_hash"][:16]}...')
                
                self.stdout.write('\nüåç –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:')
                self.stdout.write(f'   –°—Ç—Ä–∞–Ω–∞: {result["country"]} ({result["country_code"]})')
                self.stdout.write(f'   –†–µ–≥–∏–æ–Ω: {result["region"]}')
                self.stdout.write(f'   –ì–æ—Ä–æ–¥: {result["locality"]}')
                self.stdout.write(f'   –£–ª–∏—Ü–∞: {result["street"]}')
                self.stdout.write(f'   –î–æ–º: {result["building"]}')
                self.stdout.write(f'   –ö–≤–∞—Ä—Ç–∏—Ä–∞: {result["apartment"]}')
                
                self.stdout.write('\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –°–ò–°–¢–ï–ú–´:')
                self.stdout.write('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –≤ –ª–∞—Ç–∏–Ω–∏—Ü–µ')
                self.stdout.write('   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏')
                self.stdout.write('   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞—Ä—Ç')
                self.stdout.write('   ‚úÖ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')
                
            else:
                self.stdout.write('‚ùå –ü–æ–ª–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')

    def _show_api_diagnostics(self):
        """Show API diagnostics information."""
        self.stdout.write('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API:')
        self.stdout.write('-' * 30)
        self.stdout.write('üí° –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:')
        self.stdout.write('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Geocoding API –≤–∫–ª—é—á–µ–Ω –≤ Google Cloud Console')
        self.stdout.write('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–ª–ª–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        self.stdout.write('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API –∫–ª—é—á–∞')
        self.stdout.write('   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω')
        
        self.stdout.write('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:')
        self.stdout.write('   Google Cloud Console: https://console.cloud.google.com/')
        self.stdout.write('   Geocoding API: https://developers.google.com/maps/documentation/geocoding')
