"""
Django management command to demonstrate geographical grouping with mock data.
Shows how the system would work with real geocoding.
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.accounts.models import RawAccountAddress, AddsAccount
from apps.users.models import UserModel


class Command(BaseCommand):
    help = 'Demonstrate geographical grouping with mock geocoded data'

    def handle(self, *args, **options):
        """Demonstrate geographical grouping with mock data."""
        try:
            self.stdout.write('üó∫Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ô –ì–†–£–ü–ü–ò–†–û–í–ö–ò (MOCK DATA)')
            self.stdout.write('=' * 70)
            
            self._create_mock_geocoded_locations()
            self._show_grouping_results()
            self._show_practical_examples()
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
            raise

    def _create_mock_geocoded_locations(self):
        """Create mock geocoded locations to demonstrate grouping."""
        self.stdout.write('\nüìù –°–û–ó–î–ê–ù–ò–ï MOCK –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ù–´–• –õ–û–ö–ê–¶–ò–ô')
        self.stdout.write('-' * 50)
        
        # Ensure demo account exists
        account = self._ensure_demo_account()
        
        # Mock geocoded locations with realistic Ukrainian data
        mock_locations = [
            {
                'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'input_locality': '–ö–∏—ó–≤',
                'region': 'Kyiv Oblast',
                'locality': 'Kyiv',
                'geo_code': 'kyiv_oblast_kyiv',
                'latitude': 50.4501,
                'longitude': 30.5234,
                'is_geocoded': True
            },
            {
                'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 
                'input_locality': '–ö–∏—ó–≤',
                'region': 'Kyiv Oblast',
                'locality': 'Kyiv',
                'geo_code': 'kyiv_oblast_kyiv',  # Same geo_code for grouping
                'latitude': 50.4502,
                'longitude': 30.5235,
                'is_geocoded': True
            },
            {
                'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'input_locality': '–ë—Ä–æ–≤–∞—Ä–∏',
                'region': 'Kyiv Oblast',
                'locality': 'Brovary',
                'geo_code': 'kyiv_oblast_brovary',
                'latitude': 50.5108,
                'longitude': 30.7909,
                'is_geocoded': True
            },
            {
                'input_region': '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'input_locality': '–û–¥–µ—Å–∞',
                'region': 'Odesa Oblast',
                'locality': 'Odesa',
                'geo_code': 'odesa_oblast_odesa',
                'latitude': 46.4825,
                'longitude': 30.7233,
                'is_geocoded': True
            },
            {
                'input_region': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'input_locality': '–õ—å–≤—ñ–≤',
                'region': 'Lviv Oblast',
                'locality': 'Lviv',
                'geo_code': 'lviv_oblast_lviv',
                'latitude': 49.8397,
                'longitude': 24.0297,
                'is_geocoded': True
            },
            {
                'input_region': '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'input_locality': '–û–¥–µ—Å–∞',
                'region': 'Odesa Oblast',
                'locality': 'Odesa',
                'geo_code': 'odesa_oblast_odesa',  # Same geo_code for grouping
                'latitude': 46.4826,
                'longitude': 30.7234,
                'is_geocoded': True
            }
        ]
        
        created_count = 0
        for location_data in mock_locations:
            try:
                with transaction.atomic():
                    # Create location with mock geocoded data
                    location = RawAccountAddress(**location_data, account=account)
                    location.save()
                    
                    self.stdout.write(
                        f'‚úÖ Mock –ª–æ–∫–∞—Ü–∏—è: {location.input_locality}, {location.input_region} '
                        f'‚Üí {location.locality}, {location.region} (geo_code: {location.geo_code})'
                    )
                    created_count += 1
                        
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mock –ª–æ–∫–∞—Ü–∏–∏: {e}')
        
        self.stdout.write(f'\nüìä –°–æ–∑–¥–∞–Ω–æ mock –ª–æ–∫–∞—Ü–∏–π: {created_count}')

    def _show_grouping_results(self):
        """Show geographical grouping results."""
        self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ô –ì–†–£–ü–ü–ò–†–û–í–ö–ò')
        self.stdout.write('-' * 50)
        
        # Get location statistics
        location_stats = RawAccountAddress.get_location_statistics()
        geocoded_stats = [stat for stat in location_stats if stat['geo_code'] != 'unknown_location']
        
        if geocoded_stats:
            self.stdout.write('üèôÔ∏è –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ú –ö–û–î–ê–ú:')
            for stat in geocoded_stats:
                geo_code = stat['geo_code']
                region = stat['region']
                locality = stat['locality']
                count = stat['address_count']
                
                self.stdout.write(f'   üìç {locality}, {region}')
                self.stdout.write(f'      üîë geo_code: {geo_code}')
                self.stdout.write(f'      üìä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: {count}')
                
                # Show similar locations
                similar = RawAccountAddress.find_by_geo_code(geo_code)
                if similar.count() > 1:
                    self.stdout.write(f'      üîó –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç—Å—è —Å {similar.count()-1} –¥—Ä—É–≥–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏')
                self.stdout.write('')
            
            # Show unique locations
            unique_geocoded = len([s for s in geocoded_stats if s['geo_code'] != 'unknown_location'])
            self.stdout.write(f'üåç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: {unique_geocoded}')
            
            # Show most popular location
            if geocoded_stats:
                top_location = geocoded_stats[0]
                self.stdout.write(f'üèÜ –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: {top_location["locality"]}, {top_location["region"]} ({top_location["address_count"]} –∞–¥—Ä–µ—Å–æ–≤)')

    def _show_practical_examples(self):
        """Show practical usage examples."""
        self.stdout.write('\nüìö –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 50)
        
        self.stdout.write('üîç 1. –ì–†–£–ü–ü–ò–†–û–í–ö–ê –û–ë–™–Ø–í–õ–ï–ù–ò–ô –ü–û –ö–ò–ï–í–£:')
        kyiv_addresses = RawAccountAddress.find_by_geo_code('kyiv_oblast_kyiv')
        self.stdout.write(f'   –ù–∞–π–¥–µ–Ω–æ {kyiv_addresses.count()} –∞–¥—Ä–µ—Å–æ–≤ –≤ –ö–∏–µ–≤–µ')
        for addr in kyiv_addresses[:3]:  # Show first 3
            self.stdout.write(f'   - {addr.input_locality}, {addr.input_region} ‚Üí {addr.locality}, {addr.region}')
        
        self.stdout.write('\nüîç 2. –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –û–î–ï–°–°–ï:')
        odesa_addresses = RawAccountAddress.find_by_geo_code('odesa_oblast_odesa')
        self.stdout.write(f'   –ù–∞–π–¥–µ–Ω–æ {odesa_addresses.count()} –∞–¥—Ä–µ—Å–æ–≤ –≤ –û–¥–µ—Å—Å–µ')
        if odesa_addresses.exists():
            first_addr = odesa_addresses.first()
            self.stdout.write(f'   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {first_addr.latitude}, {first_addr.longitude}')
        
        self.stdout.write('\nüîç 3. –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –õ–û–ö–ê–¶–ò–ò:')
        unique_locations = RawAccountAddress.objects.filter(
            is_geocoded=True
        ).values('geo_code', 'region', 'locality').distinct()
        
        for loc in unique_locations:
            if loc['geo_code'] != 'unknown_location':
                count = RawAccountAddress.find_by_geo_code(loc['geo_code']).count()
                self.stdout.write(f'   üìç {loc["locality"]}, {loc["region"]} ({count} –∞–¥—Ä–µ—Å–æ–≤)')
        
        self.stdout.write('\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –°–ò–°–¢–ï–ú–´:')
        self.stdout.write('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π')
        self.stdout.write('   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Google Maps')
        self.stdout.write('   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ geo_code –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞')
        self.stdout.write('   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö')
        self.stdout.write('   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö')

    def _ensure_demo_account(self):
        """Ensure demo account exists."""
        user, created = UserModel.objects.get_or_create(
            email='demo_mock_geocoding@autoria.com',
            defaults={'is_active': True}
        )
        
        account, created = AddsAccount.objects.get_or_create(
            user=user,
            defaults={
                'organization_name': '–î–µ–º–æ Mock –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'role': 'seller',
                'account_type': 'BASIC'
            }
        )
        
        return account
