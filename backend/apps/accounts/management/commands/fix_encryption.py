"""
Django management command to fix and test encryption system.
"""

import os
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = 'Fix and test encryption system'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-only',
            action='store_true',
            help='Only test current encryption, do not fix'
        )
        parser.add_argument(
            '--re-encrypt',
            action='store_true',
            help='Re-encrypt the Google Maps API key'
        )

    def handle(self, *args, **options):
        """Fix and test encryption system."""
        try:
            self.stdout.write('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –®–ò–§–†–û–í–ê–ù–ò–Ø')
            self.stdout.write('=' * 60)
            
            # Test current system
            current_works = self._test_current_encryption()
            
            if current_works:
                self.stdout.write('‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
                return
            
            if options['test_only']:
                self.stdout.write('‚ùå –°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)')
                return
            
            # Try to fix the system
            self._fix_encryption_system()
            
            # Re-encrypt if requested
            if options['re_encrypt']:
                self._re_encrypt_api_key()
            
            # Test again
            if self._test_current_encryption():
                self.stdout.write('‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
            else:
                self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è')
                self._suggest_fallback()
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}')
            raise

    def _test_current_encryption(self):
        """Test current encryption system."""
        self.stdout.write('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ô –°–ò–°–¢–ï–ú–´')
        self.stdout.write('-' * 40)
        
        try:
            from core.utils.encryption import encryption_service
            
            # Test basic encryption/decryption
            test_data = "test_api_key_12345"
            encrypted = encryption_service.encrypt(test_data)
            decrypted = encryption_service.decrypt(encrypted)
            
            if decrypted == test_data:
                self.stdout.write('‚úÖ –ë–∞–∑–æ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                
                # Test API key encryption/decryption
                encrypted_api = encryption_service.encrypt_api_key(test_data, "TEST_KEY")
                decrypted_api = encryption_service.decrypt_api_key(encrypted_api, "TEST_KEY")
                
                if decrypted_api == test_data:
                    self.stdout.write('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç')
                    
                    # Test with real Google Maps key
                    encrypted_key = os.getenv('ENCRYPTED_GOOGLE_MAPS_API_KEY')
                    if encrypted_key:
                        try:
                            decrypted_real = encryption_service.decrypt_api_key(encrypted_key, 'GOOGLE_MAPS_API_KEY')
                            if decrypted_real and len(decrypted_real) > 20:
                                self.stdout.write('‚úÖ –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Google Maps –∫–ª—é—á–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                                self.stdout.write(f'üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(decrypted_real)} —Å–∏–º–≤–æ–ª–æ–≤')
                                return True
                            else:
                                self.stdout.write('‚ùå –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤–µ—Ä–Ω—É–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
                        except Exception as e:
                            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}')
                    else:
                        self.stdout.write('‚ö†Ô∏è –ù–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Google Maps –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                        return True  # Basic encryption works
                else:
                    self.stdout.write('‚ùå –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            else:
                self.stdout.write('‚ùå –ë–∞–∑–æ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
        
        return False

    def _fix_encryption_system(self):
        """Try to fix encryption system."""
        self.stdout.write('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –®–ò–§–†–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        try:
            # Reinitialize encryption service
            from core.utils.encryption import encryption_service
            encryption_service._initialize_encryption()
            
            if encryption_service._fernet:
                self.stdout.write('‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
            else:
                self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}')

    def _re_encrypt_api_key(self):
        """Re-encrypt Google Maps API key."""
        self.stdout.write('\nüîÑ –ü–ï–†–ï–®–ò–§–†–û–í–ê–ù–ò–ï GOOGLE MAPS API –ö–õ–Æ–ß–ê')
        self.stdout.write('-' * 40)
        
        # Use the working key we know
        api_key = 'AIzaSyBvc_dfn6Vl3CfLNCESkcApicC4GwLHGYs'
        
        try:
            from core.utils.encryption import encryption_service
            
            encrypted_key = encryption_service.encrypt_api_key(api_key, 'GOOGLE_MAPS_API_KEY')
            
            self.stdout.write('‚úÖ –ö–ª—é—á –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
            self.stdout.write(f'üîê –ù–æ–≤—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: {encrypted_key}')
            self.stdout.write('')
            self.stdout.write('üìù –û–±–Ω–æ–≤–∏—Ç–µ .env.local:')
            self.stdout.write(f'ENCRYPTED_GOOGLE_MAPS_API_KEY="{encrypted_key}"')
            
            # Test the new encrypted key
            decrypted = encryption_service.decrypt_api_key(encrypted_key, 'GOOGLE_MAPS_API_KEY')
            if decrypted == api_key:
                self.stdout.write('‚úÖ –ù–æ–≤—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            else:
                self.stdout.write('‚ùå –ù–æ–≤—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}')

    def _suggest_fallback(self):
        """Suggest fallback solution."""
        self.stdout.write('\nüí° –†–ï–ó–ï–†–í–ù–û–ï –†–ï–®–ï–ù–ò–ï')
        self.stdout.write('-' * 40)
        
        self.stdout.write('üîß –ï—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–π –∫–ª—é—á:')
        self.stdout.write('')
        self.stdout.write('1. –î–æ–±–∞–≤—å—Ç–µ –≤ .env.local:')
        self.stdout.write('   GOOGLE_MAPS_API_KEY="AIzaSyBvc_dfn6Vl3CfLNCESkcApicC4GwLHGYs"')
        self.stdout.write('')
        self.stdout.write('2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∫–ª—é—á–∞')
        self.stdout.write('')
        self.stdout.write('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ!')

    def _test_google_maps_api(self, api_key):
        """Test Google Maps API with the key."""
        self.stdout.write('\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE MAPS API')
        self.stdout.write('-' * 40)
        
        try:
            import requests
            
            endpoint = "https://maps.googleapis.com/maps/api/geocode/json"
            params = {
                "address": "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
                "key": api_key,
                "language": "uk"
            }
            
            response = requests.get(endpoint, params=params, timeout=10)
            data = response.json()
            
            if data.get("status") == "OK":
                self.stdout.write('‚úÖ Google Maps API —Ä–∞–±–æ—Ç–∞–µ—Ç!')
                result = data["results"][0]
                self.stdout.write(f'üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: {result["formatted_address"]}')
                return True
            else:
                self.stdout.write(f'‚ùå Google Maps API –æ—à–∏–±–∫–∞: {data.get("status")}')
                return False
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}')
            return False
