"""
Django management command to test automatic place_id generation on create/update.
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.accounts.models import RawAccountAddress, AddsAccount
from apps.users.models import UserModel


class Command(BaseCommand):
    help = 'Test automatic place_id generation on create and update'

    def handle(self, *args, **options):
        """Test automatic place_id generation."""
        try:
            self.stdout.write('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–õ–£–ß–ï–ù–ò–Ø PLACE_ID')
            self.stdout.write('=' * 70)
            
            # Ensure test account exists
            account = self._ensure_test_account()
            
            # Test 1: Create new address
            self._test_create_address(account)
            
            # Test 2: Update existing address
            self._test_update_address()
            
            # Test 3: Test grouping by place_id
            self._test_place_id_grouping()
            
            self.stdout.write('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!')
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
            raise

    def _ensure_test_account(self):
        """Ensure test account exists."""
        user, created = UserModel.objects.get_or_create(
            email='test_automatic_place_id@autoria.com',
            defaults={'is_active': True}
        )
        
        account, created = AddsAccount.objects.get_or_create(
            user=user,
            defaults={
                'organization_name': '–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Place ID',
                'role': 'seller',
                'account_type': 'BASIC'
            }
        )
        
        return account

    def _test_create_address(self, account):
        """Test creating new address with automatic place_id."""
        self.stdout.write('\nüÜï –¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ê–î–†–ï–°–ê')
        self.stdout.write('-' * 50)
        
        test_locations = [
            {'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–ö–∏—ó–≤'},
            {'input_region': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–õ—å–≤—ñ–≤'},
            {'input_region': '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–û–¥–µ—Å–∞'},
        ]
        
        for i, location_data in enumerate(test_locations, 1):
            self.stdout.write(f'\n{i}. üìç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏: {location_data["input_locality"]}, {location_data["input_region"]}')
            
            try:
                with transaction.atomic():
                    # Create address - place_id should be obtained automatically
                    address = RawAccountAddress.objects.create(
                        account=account,
                        **location_data
                    )
                    
                    # Check results
                    if address.is_geocoded and address.geo_code.startswith('ChIJ'):
                        self.stdout.write('   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å place_id!')
                        self.stdout.write(f'   üó∫Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {address.locality}, {address.region}')
                        self.stdout.write(f'   üîë Google place_id: {address.geo_code}')
                        self.stdout.write(f'   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {address.latitude}, {address.longitude}')
                        
                        # Test reverse lookup
                        place_info = RawAccountAddress.get_place_info_by_place_id(address.geo_code)
                        if place_info:
                            self.stdout.write(f'   üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫: {place_info.get("name", "N/A")}')
                        
                    else:
                        self.stdout.write('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å place_id')
                        self.stdout.write(f'   üí¨ –û—à–∏–±–∫–∞: {address.geocoding_error}')
                        
            except Exception as e:
                self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}')

    def _test_update_address(self):
        """Test updating address with automatic re-geocoding."""
        self.stdout.write('\nüîÑ –¢–ï–°–¢ 2: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ê–î–†–ï–°–ê')
        self.stdout.write('-' * 50)
        
        # Find an existing address to update
        address = RawAccountAddress.objects.filter(
            geo_code__startswith='ChIJ'
        ).first()
        
        if not address:
            self.stdout.write('‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ —Å place_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
            return
        
        self.stdout.write(f'üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ #{address.id}')
        self.stdout.write(f'   –¢–µ–∫—É—â–∏–π: {address.locality}, {address.region}')
        self.stdout.write(f'   –¢–µ–∫—É—â–∏–π place_id: {address.geo_code}')
        
        # Update to different location
        old_place_id = address.geo_code
        
        try:
            with transaction.atomic():
                # Change location - should trigger re-geocoding
                address.input_region = '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
                address.input_locality = '–•–∞—Ä–∫—ñ–≤'
                address.save()
                
                # Check if place_id changed
                if address.geo_code != old_place_id and address.geo_code.startswith('ChIJ'):
                    self.stdout.write('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º place_id!')
                    self.stdout.write(f'   üó∫Ô∏è –ù–æ–≤—ã–π: {address.locality}, {address.region}')
                    self.stdout.write(f'   üîë –ù–æ–≤—ã–π place_id: {address.geo_code}')
                    self.stdout.write(f'   üîÑ –°—Ç–∞—Ä—ã–π place_id: {old_place_id}')
                else:
                    self.stdout.write('   ‚ö†Ô∏è Place_id –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                    
        except Exception as e:
            self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}')

    def _test_place_id_grouping(self):
        """Test grouping addresses by place_id."""
        self.stdout.write('\nüîó –¢–ï–°–¢ 3: –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û PLACE_ID')
        self.stdout.write('-' * 50)
        
        # Get statistics
        from django.db.models import Count
        
        place_id_stats = RawAccountAddress.objects.filter(
            geo_code__startswith='ChIJ'
        ).values('geo_code', 'region', 'locality').annotate(
            count=Count('id')
        ).order_by('-count')
        
        self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ {place_id_stats.count()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö place_id')
        
        for i, stat in enumerate(place_id_stats[:5], 1):  # Show top 5
            place_id = stat['geo_code']
            region = stat['region']
            locality = stat['locality']
            count = stat['count']
            
            self.stdout.write(f'\n{i}. üìç {locality}, {region} ({count} –∞–¥—Ä–µ—Å–æ–≤)')
            self.stdout.write(f'   üîë place_id: {place_id}')
            
            # Test finding similar locations
            similar_addresses = RawAccountAddress.find_by_geo_code(place_id)
            self.stdout.write(f'   üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {similar_addresses.count()} –∞–¥—Ä–µ—Å–æ–≤')
            
            # Show first few addresses in group
            for addr in similar_addresses[:3]:
                self.stdout.write(f'      - –ê–¥—Ä–µ—Å #{addr.id}: {addr.input_locality}, {addr.input_region}')
        
        # Test reverse lookup for first place_id
        if place_id_stats:
            first_place_id = place_id_stats[0]['geo_code']
            self.stdout.write(f'\nüîÑ –¢–ï–°–¢ –û–ë–†–ê–¢–ù–û–ì–û –ü–û–ò–°–ö–ê –¥–ª—è {first_place_id}:')
            
            place_info = RawAccountAddress.get_place_info_by_place_id(first_place_id)
            if place_info:
                self.stdout.write('   ‚úÖ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
                self.stdout.write(f'   üìç Google –Ω–∞–∑–≤–∞–Ω–∏–µ: {place_info.get("name", "N/A")}')
                self.stdout.write(f'   üè† –ê–¥—Ä–µ—Å: {place_info.get("formatted_address", "N/A")}')
            else:
                self.stdout.write('   ‚ùå –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

    def _show_final_statistics(self):
        """Show final statistics."""
        self.stdout.write('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write('-' * 40)
        
        total_addresses = RawAccountAddress.objects.count()
        place_id_addresses = RawAccountAddress.objects.filter(
            geo_code__startswith='ChIJ'
        ).count()
        unknown_addresses = RawAccountAddress.objects.filter(geo_code='unknown').count()
        
        self.stdout.write(f'üìç –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total_addresses}')
        self.stdout.write(f'üó∫Ô∏è –° Google place_id: {place_id_addresses}')
        self.stdout.write(f'‚ùì –° unknown geo_code: {unknown_addresses}')
        
        if total_addresses > 0:
            place_id_percent = (place_id_addresses / total_addresses) * 100
            self.stdout.write(f'üìà –ü—Ä–æ—Ü–µ–Ω—Ç place_id: {place_id_percent:.1f}%')
        
        unique_place_ids = RawAccountAddress.objects.filter(
            geo_code__startswith='ChIJ'
        ).values('geo_code').distinct().count()
        
        self.stdout.write(f'üåç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö place_id: {unique_place_ids}')
        
        self.stdout.write('\nüí° –í–´–í–û–î–´:')
        if place_id_percent > 90:
            self.stdout.write('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ place_id —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!')
        elif place_id_percent > 70:
            self.stdout.write('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ place_id —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ')
        else:
            self.stdout.write('   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è place_id')
        
        self.stdout.write('   üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ place_id –¥–æ—Å—Ç—É–ø–µ–Ω')
        self.stdout.write('   üîó –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ place_id —Ä–∞–±–æ—Ç–∞–µ—Ç')
        self.stdout.write('   üó∫Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Maps –≥–æ—Ç–æ–≤–∞')
