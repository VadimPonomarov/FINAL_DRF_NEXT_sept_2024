"""
Django management command to demonstrate the optimized geographical grouping system.
Shows how addresses are grouped by geo_code for ads analytics.
"""

import os
from django.core.management.base import BaseCommand
from django.db import transaction
from apps.accounts.models import RawAccountAddress, AddsAccount
from apps.users.models import UserModel
from core.utils.encryption import encryption_service


class Command(BaseCommand):
    help = 'Demonstrate the optimized geographical grouping system'

    def add_arguments(self, parser):
        parser.add_argument(
            '--create-samples',
            action='store_true',
            help='Create sample geographical locations'
        )
        parser.add_argument(
            '--show-stats',
            action='store_true',
            help='Show geographical grouping statistics'
        )

    def handle(self, *args, **options):
        """Demonstrate geographical grouping system."""
        try:
            self.stdout.write('üó∫Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ô –ì–†–£–ü–ü–ò–†–û–í–ö–ò')
            self.stdout.write('=' * 70)
            
            # Check API key
            if not self._check_api_key():
                self.stdout.write('‚ö†Ô∏è Google Maps API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è')
            
            self._show_table_structure()
            
            if options['create_samples']:
                self._create_sample_locations()
            
            if options['show_stats']:
                self._show_geographical_statistics()
            
            self._show_benefits()
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
            raise

    def _check_api_key(self):
        """Check if Google Maps API key is available."""
        try:
            encrypted_key = os.getenv('ENCRYPTED_GOOGLE_MAPS_API_KEY')
            if encrypted_key:
                api_key = encryption_service.decrypt_api_key(encrypted_key, 'GOOGLE_MAPS_API_KEY')
                return bool(api_key)
        except Exception:
            pass
        return False

    def _show_table_structure(self):
        """Show the optimized table structure."""
        self.stdout.write('\nüìã –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´')
        self.stdout.write('-' * 50)
        
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT column_name, data_type, character_maximum_length, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'raw_account_addresses'
                ORDER BY ordinal_position;
            """)
            
            columns = cursor.fetchall()
            
            self.stdout.write('üìä –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏):')
            essential_fields = []
            for col in columns:
                name, data_type, max_length, nullable = col
                if name not in ['id', 'created_at', 'updated_at', 'account_id']:
                    length_info = f"({max_length})" if max_length else ""
                    null_info = "NULL" if nullable == "YES" else "NOT NULL"
                    
                    # Highlight key fields
                    if name in ['geo_code', 'region', 'locality']:
                        self.stdout.write(f'   üîë {name:<20} {data_type}{length_info:<15} {null_info}')
                    elif name in ['input_region', 'input_locality']:
                        self.stdout.write(f'   üìù {name:<20} {data_type}{length_info:<15} {null_info}')
                    elif name in ['latitude', 'longitude']:
                        self.stdout.write(f'   üìç {name:<20} {data_type}{length_info:<15} {null_info}')
                    else:
                        self.stdout.write(f'   ‚öôÔ∏è {name:<20} {data_type}{length_info:<15} {null_info}')
                    
                    essential_fields.append(name)
            
            self.stdout.write(f'\nüìà –ò—Ç–æ–≥–æ –ø–æ–ª–µ–π: {len(essential_fields)} (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)')

    def _create_sample_locations(self):
        """Create sample geographical locations."""
        self.stdout.write('\nüìù –°–û–ó–î–ê–ù–ò–ï –û–ë–†–ê–ó–¶–û–í –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –õ–û–ö–ê–¶–ò–ô')
        self.stdout.write('-' * 50)
        
        # Ensure demo account exists
        account = self._ensure_demo_account()
        
        sample_locations = [
            {'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–ö–∏—ó–≤'},
            {'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–ë—Ä–æ–≤–∞—Ä–∏'},
            {'input_region': '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–û–¥–µ—Å–∞'},
            {'input_region': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–õ—å–≤—ñ–≤'},
            {'input_region': '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–•–∞—Ä–∫—ñ–≤'},
            {'input_region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'input_locality': '–ö–∏—ó–≤'},  # Duplicate for grouping demo
        ]
        
        created_count = 0
        for location_data in sample_locations:
            try:
                with transaction.atomic():
                    # Create location
                    location = RawAccountAddress.objects.create(
                        account=account,
                        **location_data
                    )
                    
                    if location.is_geocoded:
                        self.stdout.write(
                            f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location.input_locality}, {location.input_region} '
                            f'(geo_code: {location.geo_code})'
                        )
                        created_count += 1
                    else:
                        self.stdout.write(
                            f'‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {location.input_locality}, {location.input_region} '
                            f'(–æ—à–∏–±–∫–∞: {location.geocoding_error})'
                        )
                        
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}')
        
        self.stdout.write(f'\nüìä –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {created_count}')

    def _show_geographical_statistics(self):
        """Show geographical grouping statistics."""
        self.stdout.write('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ô –ì–†–£–ü–ü–ò–†–û–í–ö–ò')
        self.stdout.write('-' * 50)
        
        # Total locations
        total_locations = RawAccountAddress.objects.count()
        geocoded_locations = RawAccountAddress.objects.filter(is_geocoded=True).count()
        
        self.stdout.write(f'üìç –í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π: {total_locations}')
        self.stdout.write(f'üó∫Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {geocoded_locations}')
        
        if geocoded_locations > 0:
            # Group by geo_code
            location_stats = RawAccountAddress.get_location_statistics()
            
            self.stdout.write('\nüèôÔ∏è –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ú –ö–û–î–ê–ú:')
            for stat in location_stats[:10]:  # Show top 10
                geo_code = stat['geo_code']
                region = stat['region']
                locality = stat['locality']
                count = stat['address_count']
                
                self.stdout.write(f'   üìç {locality}, {region}')
                self.stdout.write(f'      geo_code: {geo_code}')
                self.stdout.write(f'      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: {count}')
                self.stdout.write('')
            
            # Show unique locations
            unique_locations = RawAccountAddress.objects.filter(is_geocoded=True).values('geo_code').distinct().count()
            self.stdout.write(f'üåç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π: {unique_locations}')
            
            # Show most popular location
            if location_stats:
                top_location = location_stats[0]
                self.stdout.write(f'üèÜ –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: {top_location["locality"]}, {top_location["region"]} ({top_location["address_count"]} –∞–¥—Ä–µ—Å–æ–≤)')

    def _show_benefits(self):
        """Show benefits of the optimized system."""
        self.stdout.write('\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´')
        self.stdout.write('-' * 50)
        
        self.stdout.write('‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:')
        self.stdout.write('   üìù input_region, input_locality - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥')
        self.stdout.write('   üåç region, locality - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è')
        self.stdout.write('   üîë geo_code - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏')
        self.stdout.write('   üìç latitude, longitude - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç')
        self.stdout.write('   ‚öôÔ∏è is_geocoded, geocoding_error - —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏')
        
        self.stdout.write('\nüéØ –ò–î–ï–ê–õ–¨–ù–û –î–õ–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ò –û–ë–™–Ø–í–õ–ï–ù–ò–ô:')
        self.stdout.write('   üè† –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ geo_code')
        self.stdout.write('   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º')
        self.stdout.write('   üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ª–æ–∫–∞—Ü–∏—è–º')
        self.stdout.write('   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–π')
        
        self.stdout.write('\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:')
        self.stdout.write('   ‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π (8 –≤–º–µ—Å—Ç–æ 20+)')
        self.stdout.write('   üóÇÔ∏è –ò–Ω–¥–µ–∫—Å—ã –ø–æ geo_code –∏ region+locality')
        self.stdout.write('   üíæ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        self.stdout.write('   üîÑ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏')
        
        self.stdout.write('\nüìã –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:')
        self.stdout.write('   SELECT geo_code, COUNT(*) FROM raw_account_addresses GROUP BY geo_code;')
        self.stdout.write('   SELECT * FROM raw_account_addresses WHERE geo_code = "kyivska_oblast_kyiv";')
        self.stdout.write('   SELECT region, locality, COUNT(*) FROM raw_account_addresses GROUP BY region, locality;')

    def _ensure_demo_account(self):
        """Ensure demo account exists."""
        user, created = UserModel.objects.get_or_create(
            email='demo_geographical_grouping@autoria.com',
            defaults={'is_active': True}
        )
        
        account, created = AddsAccount.objects.get_or_create(
            user=user,
            defaults={
                'organization_name': '–î–µ–º–æ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞',
                'role': 'seller',
                'account_type': 'BASIC'
            }
        )
        
        return account

    def _show_usage_examples(self):
        """Show practical usage examples."""
        self.stdout.write('\nüìö –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 50)
        
        self.stdout.write('üîç 1. –ì–†–£–ü–ü–ò–†–û–í–ö–ê –û–ë–™–Ø–í–õ–ï–ù–ò–ô –ü–û –õ–û–ö–ê–¶–ò–Ø–ú:')
        self.stdout.write('   from apps.accounts.models import RawAccountAddress')
        self.stdout.write('   locations = RawAccountAddress.get_location_statistics()')
        self.stdout.write('   for loc in locations:')
        self.stdout.write('       print(f"{loc["locality"]}: {loc["address_count"]} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")')
        
        self.stdout.write('\nüîç 2. –ü–û–ò–°–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô –í –ö–û–ù–ö–†–ï–¢–ù–û–ô –õ–û–ö–ê–¶–ò–ò:')
        self.stdout.write('   kyiv_addresses = RawAccountAddress.find_by_geo_code("kyivska_oblast_kyiv")')
        self.stdout.write('   print(f"–ù–∞–π–¥–µ–Ω–æ {kyiv_addresses.count()} –∞–¥—Ä–µ—Å–æ–≤ –≤ –ö–∏–µ–≤–µ")')
        
        self.stdout.write('\nüîç 3. –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú:')
        self.stdout.write('   from django.db.models import Count')
        self.stdout.write('   regions = RawAccountAddress.objects.values("region").annotate(count=Count("id"))')
        self.stdout.write('   for region in regions:')
        self.stdout.write('       print(f"{region["region"]}: {region["count"]} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")')
