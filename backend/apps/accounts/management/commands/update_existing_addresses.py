"""
Django management command to update existing addresses with geocoding data.
Fills empty region, locality, geo_code, latitude, longitude fields.
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.accounts.models import RawAccountAddress
from apps.accounts.utils.geocoding import get_minimal_geocode


class Command(BaseCommand):
    help = 'Update existing addresses with geocoding data'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=50,
            help='Number of addresses to update (default: 50)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Show what would be updated without making changes'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Update all addresses, even already geocoded ones'
        )

    def handle(self, *args, **options):
        """Update existing addresses with geocoding data."""
        try:
            self.stdout.write('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ê–î–†–ï–°–û–í')
            self.stdout.write('=' * 60)
            
            # Get addresses to update
            addresses_to_update = self._get_addresses_to_update(options['limit'], options['force'])
            
            if not addresses_to_update:
                self.stdout.write('‚úÖ –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
                return
            
            self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(addresses_to_update)} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
            
            if options['dry_run']:
                self._show_dry_run(addresses_to_update)
            else:
                self._update_addresses(addresses_to_update)
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}')
            raise

    def _get_addresses_to_update(self, limit, force):
        """Get addresses that need updating."""
        if force:
            # Update all addresses
            return list(RawAccountAddress.objects.all()[:limit])
        else:
            # Only update addresses that are not geocoded or have unknown_location
            return list(RawAccountAddress.objects.filter(
                models.Q(is_geocoded=False) | 
                models.Q(geo_code='unknown_location') |
                models.Q(geo_code='') |
                models.Q(region='') |
                models.Q(locality='')
            )[:limit])

    def _show_dry_run(self, addresses):
        """Show what would be updated in dry run mode."""
        self.stdout.write('\nüîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –û–ë–ù–û–í–õ–ï–ù–ò–Ø (DRY RUN)')
        self.stdout.write('-' * 50)
        
        for i, address in enumerate(addresses, 1):
            self.stdout.write(f'\n{i}. üìç –ê–î–†–ï–° #{address.id}')
            self.stdout.write(f'   –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {address.input_locality}, {address.input_region}')
            self.stdout.write(f'   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: is_geocoded={address.is_geocoded}')
            self.stdout.write(f'   –¢–µ–∫—É—â–∏–π geo_code: {address.geo_code}')
            self.stdout.write(f'   –¢–µ–∫—É—â–∏–π region: "{address.region}"')
            self.stdout.write(f'   –¢–µ–∫—É—â–∏–π locality: "{address.locality}"')
            
            self.stdout.write('   üîÑ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:')
            self.stdout.write('      - –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google Maps API')
            self.stdout.write('      - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π')
            self.stdout.write('      - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è geo_code –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏')
            self.stdout.write('      - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç')

    def _update_addresses(self, addresses):
        """Update addresses with geocoding data."""
        self.stdout.write('\nüîÑ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        successful = 0
        failed = 0
        skipped = 0
        
        for i, address in enumerate(addresses, 1):
            self.stdout.write(f'\n{i}. üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ #{address.id}')
            self.stdout.write(f'   {address.input_locality}, {address.input_region}')
            
            try:
                with transaction.atomic():
                    # Use input fields if available, otherwise use existing region/locality
                    region_for_geocoding = address.input_region or address.region
                    locality_for_geocoding = address.input_locality or address.locality

                    # Skip if no data available
                    if not region_for_geocoding or not locality_for_geocoding:
                        self.stdout.write('   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è')
                        skipped += 1
                        continue

                    # Fill input fields if they're empty (for old data)
                    if not address.input_region:
                        address.input_region = address.region
                    if not address.input_locality:
                        address.input_locality = address.locality

                    # Perform geocoding
                    geocode_result = get_minimal_geocode(
                        region=region_for_geocoding,
                        locality=locality_for_geocoding,
                        locale='uk'
                    )
                    
                    if geocode_result:
                        # Update standardized fields
                        address.region = geocode_result.get('region', '') or region_for_geocoding
                        address.locality = geocode_result.get('locality', '') or locality_for_geocoding
                        address.latitude = geocode_result.get('latitude')
                        address.longitude = geocode_result.get('longitude')
                        address.is_geocoded = True
                        address.geocoding_error = ''
                        
                        # Generate geo_code
                        address.geo_code = self._generate_geo_code(address.region, address.locality)
                        
                        # Save the updated address
                        address.save()
                        
                        self.stdout.write('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
                        self.stdout.write(f'      –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {address.locality}, {address.region}')
                        self.stdout.write(f'      geo_code: {address.geo_code}')
                        if address.latitude and address.longitude:
                            self.stdout.write(f'      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {address.latitude}, {address.longitude}')
                        
                        successful += 1
                    else:
                        # Update with fallback data
                        address.region = region_for_geocoding
                        address.locality = locality_for_geocoding
                        address.geo_code = self._generate_geo_code(region_for_geocoding, locality_for_geocoding)
                        address.is_geocoded = False
                        address.geocoding_error = 'Geocoding failed: No results returned'
                        address.save()
                        
                        self.stdout.write('   ‚ö†Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
                        self.stdout.write(f'      geo_code: {address.geo_code}')
                        failed += 1
                        
            except Exception as e:
                self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}')
                failed += 1
        
        # Show summary
        self.stdout.write(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:')
        self.stdout.write(f'   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}')
        self.stdout.write(f'   ‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {failed}')
        self.stdout.write(f'   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}')
        total = successful + failed + skipped
        if total > 0:
            success_rate = (successful / total) * 100
            self.stdout.write(f'   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%')
        
        if successful > 0:
            self.stdout.write(f'\nüí° –†–ï–ó–£–õ–¨–¢–ê–¢:')
            self.stdout.write(f'   ‚úÖ {successful} –∞–¥—Ä–µ—Å–æ–≤ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            self.stdout.write(f'   ‚úÖ –í—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–º–µ—é—Ç geo_code –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏')
            self.stdout.write(f'   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')

    def _generate_geo_code(self, region, locality):
        """Generate geo_code from region and locality."""
        if not region and not locality:
            return 'unknown_location'
        
        # Normalize region and locality for consistent grouping
        region_normalized = region.lower().strip().replace(' ', '_').replace('-', '_') if region else 'unknown_region'
        locality_normalized = locality.lower().strip().replace(' ', '_').replace('-', '_') if locality else 'unknown_locality'
        
        return f"{region_normalized}_{locality_normalized}"

    def _show_statistics(self):
        """Show statistics after update."""
        self.stdout.write('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:')
        self.stdout.write('-' * 40)
        
        total_addresses = RawAccountAddress.objects.count()
        geocoded_addresses = RawAccountAddress.objects.filter(is_geocoded=True).count()
        with_coordinates = RawAccountAddress.objects.filter(
            latitude__isnull=False, longitude__isnull=False
        ).count()
        
        # Count unique geo_codes
        unique_locations = RawAccountAddress.objects.exclude(
            geo_code='unknown_location'
        ).values('geo_code').distinct().count()
        
        self.stdout.write(f'üìç –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total_addresses}')
        self.stdout.write(f'üó∫Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {geocoded_addresses}')
        self.stdout.write(f'üìç –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {with_coordinates}')
        self.stdout.write(f'üåç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: {unique_locations}')
        
        if total_addresses > 0:
            geocoded_percent = (geocoded_addresses / total_addresses) * 100
            self.stdout.write(f'üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {geocoded_percent:.1f}%')
            
            if geocoded_percent == 100:
                self.stdout.write('üéâ –í—Å–µ –∞–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!')
            elif geocoded_percent > 80:
                self.stdout.write('‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ')
            else:
                self.stdout.write('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤')

    def _show_top_locations(self):
        """Show top locations by count."""
        self.stdout.write('\nüèÜ –¢–û–ü –õ–û–ö–ê–¶–ò–ô –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–î–†–ï–°–û–í:')
        self.stdout.write('-' * 40)
        
        from django.db.models import Count
        
        top_locations = RawAccountAddress.objects.exclude(
            geo_code='unknown_location'
        ).values('geo_code', 'region', 'locality').annotate(
            count=Count('id')
        ).order_by('-count')[:10]
        
        for i, location in enumerate(top_locations, 1):
            self.stdout.write(f'{i}. {location["locality"]}, {location["region"]} ({location["count"]} –∞–¥—Ä–µ—Å–æ–≤)')
            self.stdout.write(f'   geo_code: {location["geo_code"]}')

# Import models.Q for filtering
from django.db import models
