"""
Django management command to demonstrate address geocoding system.
Shows how raw addresses are converted to formatted addresses using Google Maps API.
"""

import random
from django.core.management.base import BaseCommand
from django.db import transaction
from apps.accounts.models import RawAccountAddress, FormattedAccountAddress, AddsAccount
from apps.users.models import UserModel
from apps.accounts.utils.geocoding import get_geocode


class Command(BaseCommand):
    help = 'Demonstrate address geocoding system with raw and formatted addresses'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=10,
            help='Number of test addresses to create (default: 10)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force creation even if addresses already exist'
        )

    def handle(self, *args, **options):
        """Main handler for demonstrating address geocoding."""
        try:
            count = options['count']
            force = options['force']
            
            self.stdout.write('üó∫Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø –ê–î–†–ï–°–û–í')
            self.stdout.write('=' * 70)
            
            # Check if addresses already exist
            existing_count = RawAccountAddress.objects.count()
            if existing_count > 0 and not force:
                self.stdout.write(f'‚úÖ –ê–¥—Ä–µ—Å–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_count}), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ')
                self._show_existing_addresses()
                return
            
            # Create demo account if needed
            account = self._ensure_demo_account()
            
            # Create test addresses
            self.stdout.write(f'üìç –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...')
            created_addresses = self._create_test_addresses(count, account)
            
            # Show results
            self._show_geocoding_results(created_addresses)
            
            self.stdout.write(f'‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {len(created_addresses)} –∞–¥—Ä–µ—Å–æ–≤')
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
            raise

    def _ensure_demo_account(self):
        """Create demo account for address testing."""
        # Create or get demo user
        user, created = UserModel.objects.get_or_create(
            email='demo_geocoding@autoria.com',
            defaults={
                'is_active': True,
                'password': 'demo_password_123'
            }
        )
        
        if created:
            user.set_password('demo_password_123')
            user.save()
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # Create or get demo account
        account, created = AddsAccount.objects.get_or_create(
            user=user,
            defaults={
                'organization_name': '–î–µ–º–æ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'role': 'seller',
                'account_type': 'BASIC',
            }
        )
        
        if created:
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç')
        
        return account

    def _create_test_addresses(self, count, account):
        """Create test addresses with various Ukrainian locations."""
        # Test addresses with different formats and potential errors
        test_addresses = [
            {
                'street': '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫',
                'building': '1',
                'locality': '–ö–∏—ó–≤',
                'region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–¶–µ–Ω—Ç—Ä –ö–∏—î–≤–∞ - –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–¥—Ä–µ—Å'
            },
            {
                'street': 'Khreshchatyk Street',  # English version
                'building': '1',
                'locality': 'Kyiv',
                'region': 'Kyiv Oblast',
                'country': 'Ukraine',
                'description': '–¢–æ–π –∂–µ –∞–¥—Ä–µ—Å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é'
            },
            {
                'street': '–≤—É–ª–∏—Ü—è –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞',
                'building': '13',
                'locality': '–û–¥–µ—Å–∞',
                'region': '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–û–¥–µ—Å–∞ - –ø–æ–ø—É–ª—è—Ä–Ω–∞ –≤—É–ª–∏—Ü—è'
            },
            {
                'street': '–ø—Ä. –°–≤–æ–±–æ–¥–∏',
                'building': '28',
                'locality': '–õ—å–≤—ñ–≤',
                'region': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–õ—å–≤—ñ–≤ - –ø—Ä–æ—Å–ø–µ–∫—Ç –°–≤–æ–±–æ–¥–∏'
            },
            {
                'street': '–≤—É–ª. –°—É–º—Å—å–∫–∞',
                'building': '25',
                'locality': '–•–∞—Ä–∫—ñ–≤',
                'region': '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–•–∞—Ä–∫—ñ–≤ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –≤—É–ª–∏—Ü—è'
            },
            {
                'street': 'Sumskaya str',  # Mixed languages
                'building': '25',
                'locality': 'Kharkiv',
                'region': 'Kharkivska oblast',
                'country': 'Ukraine',
                'description': '–¢–æ–π –∂–µ –∞–¥—Ä–µ—Å –∑–º—ñ—à–∞–Ω–∏–º–∏ –º–æ–≤–∞–º–∏'
            },
            {
                'street': '–≤—É–ª. –°–æ–±–æ—Ä–Ω–∞',
                'building': '10',
                'locality': '–î–Ω—ñ–ø—Ä–æ',
                'region': '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–î–Ω—ñ–ø—Ä–æ - –°–æ–±–æ—Ä–Ω–∞ –≤—É–ª–∏—Ü—è'
            },
            {
                'street': '–≤—É–ª. –ì—Ä—É—à–µ–≤—Å—å–∫–æ–≥–æ',  # Typo in street name
                'building': '5',
                'locality': '–ö–∏—ó–≤',
                'region': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª',  # Abbreviated region
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–ê–¥—Ä–µ—Å –∑ –º–æ–∂–ª–∏–≤–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏'
            },
            {
                'street': '–≤—É–ª. –ú–∏—Ä—É',
                'building': '15–ê',  # Building with letter
                'locality': '–ü–æ–ª—Ç–∞–≤–∞',
                'region': '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–ü–æ–ª—Ç–∞–≤–∞ –∑ –ª—ñ—Ç–µ—Ä–æ—é –≤ –Ω–æ–º–µ—Ä—ñ –±—É–¥–∏–Ω–∫—É'
            },
            {
                'street': '–≤—É–ª. –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ',
                'building': '100',
                'locality': '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫',
                'region': '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'country': '–£–∫—Ä–∞—ó–Ω–∞',
                'description': '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫ - –¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞'
            },
        ]
        
        created_addresses = []
        
        for i in range(min(count, len(test_addresses))):
            address_data = test_addresses[i]
            description = address_data.pop('description')
            
            try:
                with transaction.atomic():
                    # Create raw address
                    raw_address = RawAccountAddress.objects.create(
                        account=account,
                        **address_data
                    )
                    
                    self.stdout.write(f'üìç –°–æ–∑–¥–∞–Ω —Å—ã—Ä–æ–π –∞–¥—Ä–µ—Å: {description}')
                    
                    # Test geocoding
                    place_id = get_geocode(
                        country=raw_address.country,
                        region=raw_address.region,
                        locality=raw_address.locality,
                        street=raw_address.street,
                        building=raw_address.building
                    )
                    
                    if place_id:
                        # Create formatted address
                        formatted_address = FormattedAccountAddress.objects.create(
                            raw_address=raw_address,
                            place_id=place_id,
                            formatted_address=f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è {raw_address.locality}"
                        )
                        self.stdout.write(f'   ‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {place_id[:20]}...')
                    else:
                        self.stdout.write(f'   ‚ö†Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                    
                    created_addresses.append({
                        'raw': raw_address,
                        'formatted': formatted_address if place_id else None,
                        'description': description
                    })
                    
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}')
                continue
        
        return created_addresses

    def _show_existing_addresses(self):
        """Show existing addresses and their geocoding status."""
        raw_addresses = RawAccountAddress.objects.all()[:10]
        
        self.stdout.write('\nüìã –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ê–î–†–ï–°–ê:')
        self.stdout.write('-' * 70)
        
        for i, raw_addr in enumerate(raw_addresses, 1):
            self.stdout.write(f'{i:2d}. –°—ã—Ä–æ–π –∞–¥—Ä–µ—Å: {raw_addr.street}, {raw_addr.building}')
            self.stdout.write(f'    {raw_addr.locality}, {raw_addr.region}, {raw_addr.country}')
            
            if hasattr(raw_addr, 'formatted_address') and raw_addr.formatted_address:
                formatted = raw_addr.formatted_address
                self.stdout.write(f'    ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {formatted.place_id[:30]}...')
                if formatted.latitude and formatted.longitude:
                    self.stdout.write(f'    üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {formatted.latitude:.6f}, {formatted.longitude:.6f}')
            else:
                self.stdout.write(f'    ‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            self.stdout.write('')

    def _show_geocoding_results(self, addresses):
        """Show results of geocoding demonstration."""
        self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø:')
        self.stdout.write('=' * 70)
        
        successful = 0
        failed = 0
        
        for addr_data in addresses:
            raw = addr_data['raw']
            formatted = addr_data['formatted']
            description = addr_data['description']
            
            self.stdout.write(f'üìç {description}')
            self.stdout.write(f'   –°—ã—Ä–æ–π: {raw.street}, {raw.building}, {raw.locality}')
            
            if formatted:
                self.stdout.write(f'   ‚úÖ Place ID: {formatted.place_id}')
                successful += 1
            else:
                self.stdout.write(f'   ‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                failed += 1
            self.stdout.write('')
        
        self.stdout.write(f'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}')
        self.stdout.write(f'   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}')
        self.stdout.write(f'   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/(successful+failed)*100):.1f}%' if (successful+failed) > 0 else '0%')
        
        # Show table structure info
        self.stdout.write(f'\nüóÇÔ∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶:')
        self.stdout.write(f'   üìã raw_account_addresses: {RawAccountAddress.objects.count()} –∑–∞–ø–∏—Å–µ–π')
        self.stdout.write(f'   üìã formatted_account_addresses: {FormattedAccountAddress.objects.count()} –∑–∞–ø–∏—Å–µ–π')
        
        self.stdout.write(f'\nüí° –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:')
        self.stdout.write(f'   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Å—ã—Ä–æ–π –∞–¥—Ä–µ—Å)')
        self.stdout.write(f'   2. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Google Maps API')
        self.stdout.write(f'   3. –ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π place_id –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å')
        self.stdout.write(f'   4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ formatted_account_addresses –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏')
        self.stdout.write(f'   5. –í—Å–µ –∞–¥—Ä–µ—Å–∞ —Å –æ–¥–Ω–∏–º place_id —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏')
