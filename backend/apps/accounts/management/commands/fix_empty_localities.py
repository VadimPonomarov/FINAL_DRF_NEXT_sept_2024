"""
Django management command to fix addresses with empty locality fields.
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.accounts.models import RawAccountAddress
from apps.accounts.utils.geocoding import get_minimal_geocode


class Command(BaseCommand):
    help = 'Fix addresses with empty locality fields'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Show what would be fixed without making changes'
        )

    def handle(self, *args, **options):
        """Fix addresses with empty locality fields."""
        try:
            self.stdout.write('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–°–¢–´–• LOCALITY')
            self.stdout.write('=' * 50)
            
            # Find addresses with empty locality but non-empty region
            empty_locality_addresses = RawAccountAddress.objects.filter(
                locality=''
            ).exclude(region='')
            
            self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ {empty_locality_addresses.count()} –∞–¥—Ä–µ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º locality')
            
            if empty_locality_addresses.count() == 0:
                self.stdout.write('‚úÖ –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
                return
            
            if options['dry_run']:
                self._show_dry_run(empty_locality_addresses)
            else:
                self._fix_empty_localities(empty_locality_addresses)
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}')
            raise

    def _show_dry_run(self, addresses):
        """Show what would be fixed."""
        self.stdout.write('\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ó–ê–ü–ò–°–ï–ô')
        self.stdout.write('-' * 40)
        
        for i, address in enumerate(addresses, 1):
            self.stdout.write(f'{i}. üìç –ê–î–†–ï–° #{address.id}')
            self.stdout.write(f'   region: "{address.region}"')
            self.stdout.write(f'   locality: "{address.locality}" (–ü–£–°–¢–û–ï)')
            self.stdout.write(f'   input_region: "{address.input_region}"')
            self.stdout.write(f'   input_locality: "{address.input_locality}"')
            self.stdout.write(f'   geo_code: "{address.geo_code}"')
            self.stdout.write(f'   coordinates: {address.latitude}, {address.longitude}')
            
            # Suggest fix strategy
            if address.input_locality:
                self.stdout.write(f'   üîß –°–¢–†–ê–¢–ï–ì–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å input_locality = "{address.input_locality}"')
            elif '–∫–∏—ó–≤' in address.region.lower():
                self.stdout.write(f'   üîß –°–¢–†–ê–¢–ï–ì–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å locality = "–ö–∏—ó–≤" (—Å—Ç–æ–ª–∏—Ü–∞ —Ä–µ–≥–∏–æ–Ω–∞)')
            elif '–ª—å–≤—ñ–≤' in address.region.lower():
                self.stdout.write(f'   üîß –°–¢–†–ê–¢–ï–ì–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å locality = "–õ—å–≤—ñ–≤" (—Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞)')
            elif '–æ–¥–µ—Å' in address.region.lower():
                self.stdout.write(f'   üîß –°–¢–†–ê–¢–ï–ì–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å locality = "–û–¥–µ—Å–∞" (—Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞)')
            elif '—Ö–∞—Ä–∫—ñ–≤' in address.region.lower():
                self.stdout.write(f'   üîß –°–¢–†–ê–¢–ï–ì–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å locality = "–•–∞—Ä–∫—ñ–≤" (—Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞)')
            else:
                self.stdout.write(f'   üîß –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–≥–∏–æ–Ω—É')
            
            self.stdout.write('')

    def _fix_empty_localities(self, addresses):
        """Fix addresses with empty localities."""
        self.stdout.write('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–°–¢–´–• LOCALITY')
        self.stdout.write('-' * 40)
        
        fixed_count = 0
        geocoded_count = 0
        
        for address in addresses:
            try:
                with transaction.atomic():
                    original_locality = address.locality
                    
                    # Strategy 1: Use input_locality if available
                    if address.input_locality and address.input_locality.strip():
                        address.locality = address.input_locality.strip()
                        self.stdout.write(f'‚úÖ –ê–¥—Ä–µ—Å #{address.id}: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω input_locality = "{address.locality}"')
                        fixed_count += 1
                    
                    # Strategy 2: Set regional center based on region name
                    elif self._set_regional_center(address):
                        self.stdout.write(f'‚úÖ –ê–¥—Ä–µ—Å #{address.id}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞ = "{address.locality}"')
                        fixed_count += 1
                    
                    # Strategy 3: Try geocoding with region only
                    else:
                        geocode_result = self._try_geocoding_region(address)
                        if geocode_result:
                            address.locality = geocode_result.get('locality', '')
                            if geocode_result.get('latitude'):
                                address.latitude = geocode_result['latitude']
                            if geocode_result.get('longitude'):
                                address.longitude = geocode_result['longitude']
                            
                            self.stdout.write(f'‚úÖ –ê–¥—Ä–µ—Å #{address.id}: –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ = "{address.locality}"')
                            geocoded_count += 1
                        else:
                            self.stdout.write(f'‚ö†Ô∏è –ê–¥—Ä–µ—Å #{address.id}: –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å')
                            continue
                    
                    # Update geo_code if locality was fixed
                    if address.locality:
                        address.geo_code = self._generate_geo_code(address.region, address.locality)
                        address.save()
                        
                        if original_locality != address.locality:
                            self.stdout.write(f'   üîë –ù–æ–≤—ã–π geo_code: {address.geo_code}')
                        
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ #{address.id}: {e}')
        
        self.stdout.write(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:')
        self.stdout.write(f'   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ input_locality: {fixed_count}')
        self.stdout.write(f'   üåê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {geocoded_count}')
        self.stdout.write(f'   üìà –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count + geocoded_count}')
        
        # Show final statistics
        self._show_final_statistics()

    def _set_regional_center(self, address):
        """Set locality to regional center based on region name."""
        region_lower = address.region.lower()
        
        regional_centers = {
            '–∫–∏—ó–≤': '–ö–∏—ó–≤',
            '–ª—å–≤—ñ–≤': '–õ—å–≤—ñ–≤', 
            '–æ–¥–µ—Å': '–û–¥–µ—Å–∞',
            '—Ö–∞—Ä–∫—ñ–≤': '–•–∞—Ä–∫—ñ–≤',
            '–¥–Ω—ñ–ø—Ä': '–î–Ω—ñ–ø—Ä–æ',
            '–∑–∞–ø–æ—Ä—ñ–∂': '–ó–∞–ø–æ—Ä—ñ–∂–∂—è',
            '–∫—Ä–∏–≤–∏–π —Ä—ñ–≥': '–ö—Ä–∏–≤–∏–π –†—ñ–≥',
            '–º–∏–∫–æ–ª–∞—ó–≤': '–ú–∏–∫–æ–ª–∞—ó–≤',
            '–º–∞—Ä—ñ—É–ø–æ–ª—å': '–ú–∞—Ä—ñ—É–ø–æ–ª—å',
            '–ª—É–≥–∞–Ω—Å—å–∫': '–õ—É–≥–∞–Ω—Å—å–∫',
            '–≤—ñ–Ω–Ω–∏—Ü': '–í—ñ–Ω–Ω–∏—Ü—è',
            '–º–∞–∫—ñ—ó–≤': '–ú–∞–∫—ñ—ó–≤–∫–∞',
            '—á–µ—Ä–Ω—ñ–≥—ñ–≤': '–ß–µ—Ä–Ω—ñ–≥—ñ–≤',
            '–ø–æ–ª—Ç–∞–≤': '–ü–æ–ª—Ç–∞–≤–∞',
            '—á–µ—Ä–∫–∞—Å': '–ß–µ—Ä–∫–∞—Å–∏',
            '–∂–∏—Ç–æ–º–∏—Ä': '–ñ–∏—Ç–æ–º–∏—Ä',
            '—Å—É–º–∏': '–°—É–º–∏',
            '—Ö–º–µ–ª—å–Ω–∏—Ü': '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π',
            '—á–µ—Ä–Ω—ñ–≤—Ü': '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ',
            '—Ä—ñ–≤–Ω': '–†—ñ–≤–Ω–µ',
            '—ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤': '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫',
            '—Ç–µ—Ä–Ω–æ–ø—ñ–ª—å': '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å',
            '–ª—É—Ü—å–∫': '–õ—É—Ü—å–∫',
            '—É–∂–≥–æ—Ä–æ–¥': '–£–∂–≥–æ—Ä–æ–¥',
            '–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü': '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π',
            '—Ö–µ—Ä—Å–æ–Ω': '–•–µ—Ä—Å–æ–Ω'
        }
        
        for key, center in regional_centers.items():
            if key in region_lower:
                address.locality = center
                return True
        
        return False

    def _try_geocoding_region(self, address):
        """Try geocoding with region only."""
        try:
            # Try geocoding with region + "–æ–±–ª–∞—Å—Ç—å"
            region_query = address.region
            if '–æ–±–ª–∞—Å—Ç—å' not in region_query.lower():
                region_query += ' –æ–±–ª–∞—Å—Ç—å'
            
            geocode_result = get_minimal_geocode(
                region=region_query,
                locality='—Ü–µ–Ω—Ç—Ä',  # Try with "center"
                locale='uk'
            )
            
            return geocode_result
            
        except Exception as e:
            self.stdout.write(f'   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
            return None

    def _generate_geo_code(self, region, locality):
        """Generate geo_code from region and locality."""
        if not region and not locality:
            return 'unknown_location'
        
        # Normalize region and locality for consistent grouping
        region_normalized = region.lower().strip().replace(' ', '_').replace('-', '_').replace('–æ–±–ª–∞—Å—Ç—å', '').replace('_', '').strip() if region else 'unknown_region'
        locality_normalized = locality.lower().strip().replace(' ', '_').replace('-', '_') if locality else 'unknown_locality'
        
        # Remove empty parts
        if region_normalized:
            region_normalized = region_normalized.replace('__', '_').strip('_')
        if locality_normalized:
            locality_normalized = locality_normalized.replace('__', '_').strip('_')
        
        return f"{region_normalized}_{locality_normalized}"

    def _show_final_statistics(self):
        """Show final statistics."""
        self.stdout.write('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write('-' * 40)
        
        total_addresses = RawAccountAddress.objects.count()
        empty_localities = RawAccountAddress.objects.filter(locality='').count()
        valid_localities = total_addresses - empty_localities
        unknown_locations = RawAccountAddress.objects.filter(geo_code='unknown_location').count()
        
        self.stdout.write(f'üìç –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total_addresses}')
        self.stdout.write(f'‚úÖ –° –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º locality: {valid_localities}')
        self.stdout.write(f'‚ùì –° –ø—É—Å—Ç—ã–º locality: {empty_localities}')
        self.stdout.write(f'üîë –° unknown_location geo_code: {unknown_locations}')
        
        if total_addresses > 0:
            valid_percent = (valid_localities / total_addresses) * 100
            self.stdout.write(f'üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º locality: {valid_percent:.1f}%')
            
            if empty_localities == 0:
                self.stdout.write('üéâ –í—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–º–µ—é—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ locality!')
            elif empty_localities < 5:
                self.stdout.write('‚úÖ –ü–æ—á—Ç–∏ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!')
            else:
                self.stdout.write('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏')
