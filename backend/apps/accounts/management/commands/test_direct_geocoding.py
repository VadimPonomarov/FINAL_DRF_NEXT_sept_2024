"""
Django management command to test geocoding directly with decrypted API key.
"""

import os
from django.core.management.base import BaseCommand
from apps.accounts.utils.geocoding import geocode_address_simple
from core.utils.encryption import encryption_service


class Command(BaseCommand):
    help = 'Test geocoding directly with decrypted API key'

    def handle(self, *args, **options):
        """Test direct geocoding."""
        try:
            self.stdout.write('üó∫Ô∏è –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø')
            self.stdout.write('=' * 60)
            
            # Get and decrypt API key
            api_key = self._get_decrypted_api_key()
            if not api_key:
                return
            
            # Test geocoding with Ukrainian address
            self._test_ukrainian_geocoding(api_key)
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
            raise

    def _get_decrypted_api_key(self):
        """Get and decrypt the API key."""
        self.stdout.write('\nüîê –î–ï–®–ò–§–†–û–í–ê–ù–ò–ï API –ö–õ–Æ–ß–ê')
        self.stdout.write('-' * 40)
        
        try:
            # Get encrypted key from environment
            encrypted_key = os.getenv('ENCRYPTED_GOOGLE_MAPS_API_KEY')
            if not encrypted_key:
                self.stdout.write('‚ùå –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã')
                return None
            
            self.stdout.write(f'üìù –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: {encrypted_key[:50]}...')
            
            # Decrypt the key
            decrypted_key = encryption_service.decrypt_api_key(encrypted_key, 'GOOGLE_MAPS_API_KEY')
            
            self.stdout.write(f'‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω: {decrypted_key[:20]}...')
            self.stdout.write(f'üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(decrypted_key)} —Å–∏–º–≤–æ–ª–æ–≤')
            
            return decrypted_key
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}')
            return None

    def _test_ukrainian_geocoding(self, api_key):
        """Test geocoding with Ukrainian addresses."""
        self.stdout.write('\nüá∫üá¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ö–†–ê–ò–ù–°–ö–ò–• –ê–î–†–ï–°–û–í')
        self.stdout.write('-' * 40)
        
        test_addresses = [
            "–ó–∞–ø–æ—Ä–æ–∂—å–µ, –£–∫—Ä–∞–∏–Ω–∞",  # –ö–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
            "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
            "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
            "–û–¥–µ—Å–∞, –£–∫—Ä–∞—ó–Ω–∞",
            "–õ—å–≤—ñ–≤, –£–∫—Ä–∞—ó–Ω–∞"
        ]
        
        for address in test_addresses:
            self.stdout.write(f'\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {address}')
            
            try:
                result = geocode_address_simple(address, api_key)
                
                if result:
                    self.stdout.write('‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
                    self.stdout.write(f'   üÜî Place ID: {result["place_id"]}')
                    self.stdout.write(f'   üè† –ê–¥—Ä–µ—Å: {result["formatted_address"]}')
                    
                    location = result["geometry"]["location"]
                    self.stdout.write(f'   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location["lat"]}, {location["lng"]}')
                    
                    # Show first few address components
                    components = result.get("address_components", [])
                    if components:
                        self.stdout.write('   üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞:')
                        for comp in components[:3]:
                            types = ', '.join(comp['types'])
                            self.stdout.write(f'      {comp["long_name"]} ({types})')
                else:
                    self.stdout.write('‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                    
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞: {e}')

    def _test_full_geocoding_flow(self, api_key):
        """Test the full geocoding flow."""
        self.stdout.write('\nüåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–û–¢–û–ö–ê –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø')
        self.stdout.write('-' * 50)
        
        from apps.accounts.utils.geocoding import get_full_geocode
        
        test_components = {
            'country': '–£–∫—Ä–∞—ó–Ω–∞',
            'region': '–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'locality': '–ó–∞–ø–æ—Ä–æ–∂—å–µ',
            'street': '–ø—Ä–æ—Å–ø–µ–∫—Ç –°–æ–±–æ—Ä–Ω—ã–π',
            'building': '1'
        }
        
        self.stdout.write('üìç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞:')
        for key, value in test_components.items():
            self.stdout.write(f'   {key}: {value}')
        
        try:
            result = get_full_geocode(**test_components)
            
            if result:
                self.stdout.write('\n‚úÖ –ü–û–õ–ù–û–ï –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!')
                self.stdout.write(f'üÜî Place ID: {result["place_id"]}')
                self.stdout.write(f'üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result["latitude"]}, {result["longitude"]}')
                self.stdout.write(f'üè† –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {result["formatted_address"]}')
                self.stdout.write(f'üîó –•–µ—à –∞–¥—Ä–µ—Å–∞: {result["address_hash"][:16]}...')
                
                self.stdout.write('\nüåç –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:')
                self.stdout.write(f'   –°—Ç—Ä–∞–Ω–∞: {result["country"]} ({result["country_code"]})')
                self.stdout.write(f'   –†–µ–≥–∏–æ–Ω: {result["region"]}')
                self.stdout.write(f'   –ì–æ—Ä–æ–¥: {result["locality"]}')
                self.stdout.write(f'   –£–ª–∏—Ü–∞: {result["street"]}')
                self.stdout.write(f'   –î–æ–º: {result["building"]}')
                
                self.stdout.write('\nüí° –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!')
                self.stdout.write('   ‚úÖ –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                self.stdout.write('   ‚úÖ Google Maps API –æ—Ç–≤–µ—á–∞–µ—Ç')
                self.stdout.write('   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç')
                self.stdout.write('   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                
            else:
                self.stdout.write('‚ùå –ü–æ–ª–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
