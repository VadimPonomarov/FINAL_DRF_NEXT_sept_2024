"""
Django management command to diagnose encryption system issues.
"""

import os
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = 'Diagnose encryption system issues'

    def handle(self, *args, **options):
        """Diagnose encryption system."""
        try:
            self.stdout.write('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –®–ò–§–†–û–í–ê–ù–ò–Ø')
            self.stdout.write('=' * 50)
            
            # Check environment variables
            encrypted_key = os.getenv('ENCRYPTED_GOOGLE_MAPS_API_KEY')
            self.stdout.write(f'üìù –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ .env.local: {encrypted_key[:50] if encrypted_key else "–ù–ï–¢"}...')
            
            # Check encryption_service
            self._test_encryption_service(encrypted_key)
            
            # Check key_manager
            self._test_key_manager()
            
            # Suggest solutions
            self._suggest_solutions()
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}')
            raise

    def _test_encryption_service(self, encrypted_key):
        """Test encryption_service."""
        self.stdout.write('\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENCRYPTION_SERVICE')
        self.stdout.write('-' * 40)
        
        try:
            from core.utils.encryption import encryption_service
            self.stdout.write('‚úÖ encryption_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
            
            if encrypted_key:
                decrypted = encryption_service.decrypt_api_key(encrypted_key, 'GOOGLE_MAPS_API_KEY')
                if decrypted:
                    self.stdout.write(f'‚úÖ –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {decrypted[:20]}...')
                    self.stdout.write(f'üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(decrypted)} —Å–∏–º–≤–æ–ª–æ–≤')
                    return decrypted
                else:
                    self.stdout.write('‚ùå –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ None')
            else:
                self.stdout.write('‚ùå –ù–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ encryption_service: {e}')
        
        return None

    def _test_key_manager(self):
        """Test key_manager."""
        self.stdout.write('\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KEY_MANAGER')
        self.stdout.write('-' * 40)
        
        try:
            from core.security import key_manager
            self.stdout.write('‚úÖ key_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
            
            api_key = key_manager.google_maps_api_key
            if api_key:
                self.stdout.write(f'‚úÖ key_manager —Ä–∞–±–æ—Ç–∞–µ—Ç: {api_key[:20]}...')
                self.stdout.write(f'üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤')
                return api_key
            else:
                self.stdout.write('‚ùå key_manager –≤–µ—Ä–Ω—É–ª None')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ key_manager: {e}')
        
        return None

    def _suggest_solutions(self):
        """Suggest solutions."""
        self.stdout.write('\nüí° –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø')
        self.stdout.write('-' * 40)
        
        self.stdout.write('üîß –í–ê–†–ò–ê–ù–¢ 1: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ')
        self.stdout.write('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
        self.stdout.write('   - –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á –∑–∞–Ω–æ–≤–æ')
        self.stdout.write('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π')
        
        self.stdout.write('\nüîß –í–ê–†–ò–ê–ù–¢ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á')
        self.stdout.write('   - –î–æ–±–∞–≤–∏—Ç—å GOOGLE_MAPS_API_KEY –≤ .env.local')
        self.stdout.write('   - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∫–ª—é—á–∞')
        self.stdout.write('   - –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
        
        self.stdout.write('\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:')
        self.stdout.write('   –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á')
        self.stdout.write('   –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ!')

    def _test_direct_api_call(self, api_key):
        """Test direct API call."""
        if not api_key:
            return
        
        self.stdout.write('\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û –í–´–ó–û–í–ê API')
        self.stdout.write('-' * 40)
        
        try:
            import requests
            
            # Test geocoding call
            endpoint = "https://maps.googleapis.com/maps/api/geocode/json"
            params = {
                "address": "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
                "key": api_key,
                "language": "uk"
            }
            
            response = requests.get(endpoint, params=params, timeout=10)
            data = response.json()
            
            if data.get("status") == "OK":
                self.stdout.write('‚úÖ Google Maps API —Ä–∞–±–æ—Ç–∞–µ—Ç!')
                result = data["results"][0]
                self.stdout.write(f'üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: {result["formatted_address"]}')
                location = result["geometry"]["location"]
                self.stdout.write(f'üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location["lat"]}, {location["lng"]}')
            else:
                self.stdout.write(f'‚ùå Google Maps API –æ—à–∏–±–∫–∞: {data.get("status")}')
                self.stdout.write(f'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get("error_message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")}')
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}')
