"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
"""
import logging
import requests
from decimal import Decimal
from typing import Optional, Dict, List
from django.utils import timezone
from django.core.cache import cache
from django.conf import settings

from .models import CurrencyRate

logger = logging.getLogger(__name__)


class CurrencyService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
    """
    
    # –ö—ç—à –Ω–∞ 1 —á–∞—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    CACHE_TIMEOUT = 3600
    
    @classmethod
    def get_rate(cls, base_currency='UAH', target_currency='USD', force_update=False):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        
        Args:
            base_currency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            target_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            force_update: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å
            
        Returns:
            Decimal: –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–ª–∏ None
        """
        cache_key = f"currency_rate_{base_currency}_{target_currency}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        if not force_update:
            cached_rate = cache.get(cache_key)
            if cached_rate is not None:
                logger.debug(f"üíæ Using cached rate {target_currency}/{base_currency}: {cached_rate}")
                return Decimal(str(cached_rate))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        rate_obj = CurrencyRate.get_latest_rate(
            base_currency=base_currency,
            target_currency=target_currency,
            auto_update=True
        )

        if rate_obj:
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache.set(cache_key, str(rate_obj.rate), cls.CACHE_TIMEOUT)
            logger.info(f"üí± Rate {target_currency}/{base_currency}: {rate_obj.rate}")
            return rate_obj.rate

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π NBU
        try:
            # –í –±–∞–∑–µ –∫—É—Ä—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ NBU: UAH/CURRENCY = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ UAH –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã
            # UAH/USD = 41.449 –æ–∑–Ω–∞—á–∞–µ—Ç: 1 USD = 41.449 UAH

            if target_currency == 'UAH':
                # –ò—â–µ–º –∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ UAH/base_currency
                reverse_rate_obj = CurrencyRate.get_latest_rate(
                    base_currency='UAH',
                    target_currency=base_currency,
                    auto_update=True
                )

                if reverse_rate_obj:
                    # UAH/USD = 41.449 –æ–∑–Ω–∞—á–∞–µ—Ç 1 USD = 41.449 UAH
                    # –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USD –≤ UAH –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –∫—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é
                    rate = reverse_rate_obj.rate
                    cache.set(cache_key, str(rate), cls.CACHE_TIMEOUT)
                    logger.info(f"üí± Found UAH/{base_currency} = {rate}, using for {base_currency} to UAH conversion")
                    return rate

            elif base_currency == 'UAH':
                # –ò—â–µ–º –∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ UAH/target_currency
                reverse_rate_obj = CurrencyRate.get_latest_rate(
                    base_currency='UAH',
                    target_currency=target_currency,
                    auto_update=True
                )

                if reverse_rate_obj:
                    # UAH/USD = 41.449 –æ–∑–Ω–∞—á–∞–µ—Ç 1 USD = 41.449 UAH
                    # –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ UAH –≤ USD: 1 UAH = 1/41.449 USD
                    reverse_rate = Decimal('1') / reverse_rate_obj.rate
                    cache.set(cache_key, str(reverse_rate), cls.CACHE_TIMEOUT)
                    logger.info(f"üí± Found UAH/{target_currency} = {reverse_rate_obj.rate}, calculated UAH to {target_currency} = {reverse_rate}")
                    return reverse_rate

        except Exception as e:
            logger.debug(f"üîç Could not find reverse rate: {e}")

        logger.warning(f"‚ö†Ô∏è No rate found for {target_currency}/{base_currency}")
        return None
    
    @classmethod
    def convert_amount(cls, amount, from_currency='UAH', to_currency='USD'):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏
        
        Args:
            amount: –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            from_currency: –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
            to_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            
        Returns:
            Decimal: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ None
        """
        if from_currency == to_currency:
            return Decimal(str(amount))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        rate = cls.get_rate(from_currency, to_currency)
        
        if rate:
            converted = Decimal(str(amount)) * rate
            logger.info(f"üí∞ Converted {amount} {from_currency} = {converted} {to_currency}")
            return converted
        
        logger.error(f"‚ùå Cannot convert {amount} {from_currency} to {to_currency}: no rate")
        return None
    
    @classmethod
    def update_single_rate(cls, base_currency='UAH', target_currency='USD', source='NBU'):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç
        
        Args:
            base_currency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            target_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–∞
        """
        logger.info(f"üîÑ Updating rate {target_currency}/{base_currency} from {source}")
        
        try:
            if source == 'NBU':
                success = cls._fetch_from_nbu(target_currency)
            elif source == 'PRIVATBANK':
                success = cls._fetch_from_privatbank(target_currency)
            elif source == 'EXCHANGERATE_API':
                success = cls._fetch_from_exchangerate_api(target_currency)
            else:
                logger.error(f"‚ùå Unknown source: {source}")
                return False
            
            if success:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç
                cache_key = f"currency_rate_{base_currency}_{target_currency}"
                cache.delete(cache_key)
                logger.info(f"‚úÖ Rate {target_currency}/{base_currency} updated successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to update rate {target_currency}/{base_currency}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error updating rate {target_currency}/{base_currency}: {str(e)}")
            return False
    
    @classmethod
    def _fetch_from_nbu(cls, target_currency):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ—Ç –ù–ë–£ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
        """
        try:
            url = f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode={target_currency}&json"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            if not data:
                logger.warning(f"‚ö†Ô∏è No data from NBU for {target_currency}")
                return False
            
            item = data[0]
            rate_value = item.get('rate')
            
            if rate_value:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å
                rate, created = CurrencyRate.objects.update_or_create(
                    base_currency='UAH',
                    target_currency=target_currency,
                    fetched_at__date=timezone.now().date(),
                    defaults={
                        'rate': Decimal(str(rate_value)),
                        'source': 'NBU',
                        'fetched_at': timezone.now(),
                        'is_active': True,
                        'raw_data': item
                    }
                )
                
                action = "created" if created else "updated"
                logger.info(f"‚úÖ NBU: {target_currency} = {rate_value} UAH ({action})")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå NBU fetch error for {target_currency}: {str(e)}")
            return False
    
    @classmethod
    def _fetch_from_privatbank(cls, target_currency):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ—Ç –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
        """
        try:
            url = "https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # –ò—â–µ–º –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É
            for item in data:
                if item.get('ccy') == target_currency:
                    buy_rate = item.get('buy')
                    sale_rate = item.get('sale')
                    
                    if buy_rate and sale_rate:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å
                        avg_rate = (float(buy_rate) + float(sale_rate)) / 2
                        
                        rate, created = CurrencyRate.objects.update_or_create(
                            base_currency='UAH',
                            target_currency=target_currency,
                            fetched_at__date=timezone.now().date(),
                            source='PRIVATBANK',
                            defaults={
                                'rate': Decimal(str(avg_rate)),
                                'fetched_at': timezone.now(),
                                'is_active': True,
                                'raw_data': item
                            }
                        )
                        
                        action = "created" if created else "updated"
                        logger.info(f"‚úÖ PrivatBank: {target_currency} = {avg_rate} UAH ({action})")
                        return True
            
            logger.warning(f"‚ö†Ô∏è Currency {target_currency} not found in PrivatBank data")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå PrivatBank fetch error for {target_currency}: {str(e)}")
            return False
    
    @classmethod
    def _fetch_from_exchangerate_api(cls, target_currency):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ—Ç ExchangeRate-API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
        """
        try:
            url = f"https://api.exchangerate-api.com/v4/latest/{target_currency}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            rates = data.get('rates', {})
            uah_rate = rates.get('UAH')
            
            if uah_rate:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å (—Å–∫–æ–ª—å–∫–æ UAH –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É target_currency)
                rate_value = float(uah_rate)
                
                rate, created = CurrencyRate.objects.update_or_create(
                    base_currency='UAH',
                    target_currency=target_currency,
                    fetched_at__date=timezone.now().date(),
                    source='EXCHANGERATE_API',
                    defaults={
                        'rate': Decimal(str(rate_value)),
                        'fetched_at': timezone.now(),
                        'is_active': True,
                        'raw_data': {'uah_rate': uah_rate}
                    }
                )
                
                action = "created" if created else "updated"
                logger.info(f"‚úÖ ExchangeRate-API: {target_currency} = {rate_value} UAH ({action})")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå ExchangeRate-API fetch error for {target_currency}: {str(e)}")
            return False
    
    @classmethod
    def get_all_rates(cls, base_currency='UAH'):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
        
        Args:
            base_currency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤ {currency: rate}
        """
        rates = {}
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
        currencies = [choice[0] for choice in CurrencyRate.CURRENCY_CHOICES]
        
        for currency in currencies:
            if currency != base_currency:
                rate = cls.get_rate(base_currency, currency)
                if rate:
                    rates[currency] = rate
        
        logger.info(f"üìä Retrieved {len(rates)} rates for {base_currency}")
        return rates
    
    @classmethod
    def is_rate_fresh(cls, base_currency='UAH', target_currency='USD', max_age_hours=24):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–µ–∂–∏–π –ª–∏ –∫—É—Ä—Å
        
        Args:
            base_currency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            target_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ —á–∞—Å–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫—É—Ä—Å —Å–≤–µ–∂–∏–π
        """
        try:
            rate = CurrencyRate.objects.filter(
                base_currency=base_currency,
                target_currency=target_currency,
                is_active=True
            ).latest('fetched_at')
            
            return rate.is_fresh(max_age_hours)
            
        except CurrencyRate.DoesNotExist:
            return False
