#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏
"""
import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.ads.models.car_ad_model import CarAd
from apps.ads.models.reference import CarMarkModel, RegionModel, CityModel
from core.enums.ads import AdStatusEnum

User = get_user_model()

def create_test_moderation_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏...")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        test_user = User.objects.get(email='test@example.com')
    except User.DoesNotExist:
        test_user = User.objects.create_user(
            email='test@example.com',
            password='testpass123',
            first_name='–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            is_active=True
        )

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        mark = CarMarkModel.objects.first()
        region = RegionModel.objects.first()
        city = CityModel.objects.first()
    except:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ seeding —Å–Ω–∞—á–∞–ª–∞.")
        return

    if not mark or not region or not city:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    test_ads_data = [
        {
            'title': 'BMW X5 2020 –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
            'description': '–ü—Ä–æ–¥–∞—é BMW X5 2020 –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è —Å–µ—Ä–≤–∏—Å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è.',
            'price': 45000,
            'currency': 'USD',
            'status': AdStatusEnum.PENDING,
            'model': 'X5'
        },
        {
            'title': 'Toyota Camry 2019 —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø—Ä–æ–±–µ–≥–æ–º',
            'description': 'Toyota Camry –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—Ä–æ–±–µ–≥ –≤—Å–µ–≥–æ 45000 –∫–º. –í—Å–µ –¢–û –ø—Ä–æ–π–¥–µ–Ω—ã timely.',
            'price': 25000,
            'currency': 'USD',
            'status': AdStatusEnum.PENDING,
            'model': 'Camry'
        },
        {
            'title': 'Mercedes C-Class 2021 –ø—Ä–µ–º—ñ—É–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è',
            'description': 'Mercedes C-Class –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏. –ö–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, –ø–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞, –≤—Å–µ –æ–ø—Ü–∏–∏.',
            'price': 55000,
            'currency': 'EUR',
            'status': AdStatusEnum.PENDING,
            'model': 'C-Class'
        },
        {
            'title': 'Honda Civic 2018 —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
            'description': 'Honda Civic 2018 –≥–æ–¥–∞. –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å 1.5 —Ç—É—Ä–±–æ. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞.',
            'price': 18000,
            'currency': 'USD',
            'status': AdStatusEnum.NEEDS_REVIEW,
            'model': 'Civic'
        },
        {
            'title': 'Audi A4 2020 —Å–ø–æ—Ä—Ç –≤–µ—Ä—Å–∏—è',
            'description': 'Audi A4 –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ S-line. –ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥ quattro, —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞.',
            'price': 42000,
            'currency': 'EUR',
            'status': AdStatusEnum.REJECTED,
            'model': 'A4'
        }
    ]

    created_count = 0

    for ad_data in test_ads_data:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            existing_ad = CarAd.objects.filter(
                title=ad_data['title'],
                account=test_user.addsaccount
            ).first()

            if existing_ad:
                print(f"‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ad_data['title']}")
                continue

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            ad = CarAd.objects.create(
                title=ad_data['title'],
                description=ad_data['description'],
                price=ad_data['price'],
                currency=ad_data['currency'],
                status=ad_data['status'],
                model=ad_data['model'],
                account=test_user.addsaccount,
                mark=mark,
                region=region,
                city=city,
                dynamic_fields={
                    'year': 2020,
                    'mileage': 50000,
                    'fuel_type': '–ë–µ–Ω–∑–∏–Ω',
                    'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                    'body_type': '–°–µ–¥–∞–Ω',
                    'color': '–ß–µ—Ä–Ω—ã–π',
                    'condition': '–û—Ç–ª–∏—á–Ω–æ–µ'
                }
            )

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad.title} (ID: {ad.id}, –°—Ç–∞—Ç—É—Å: {ad.status})")
            created_count += 1

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è '{ad_data['title']}': {str(e)}")

    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        'pending': CarAd.objects.filter(status=AdStatusEnum.PENDING).count(),
        'needs_review': CarAd.objects.filter(status=AdStatusEnum.NEEDS_REVIEW).count(),
        'rejected': CarAd.objects.filter(status=AdStatusEnum.REJECTED).count(),
        'active': CarAd.objects.filter(status=AdStatusEnum.ACTIVE).count(),
        'blocked': CarAd.objects.filter(status=AdStatusEnum.BLOCKED).count(),
    }

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
    for status, count in stats.items():
        print(f"   {status}: {count}")

    print("
üîó –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/autoria/moderation —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!"
if __name__ == '__main__':
    create_test_moderation_data()