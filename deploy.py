#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ü–õ–û–ô AutoRia Clone
===================================

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è —Å production —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python deploy.py --local-frontend

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Node.js –∏ npm
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
- –°–æ–±–∏—Ä–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ production —Ä–µ–∂–∏–º–µ
- –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import sys
import subprocess
import time
import threading
import re
from pathlib import Path

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_step(step, message):
    """–í–∏–≤–æ–¥–∏—Ç—å –∫—Ä–æ–∫ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    print(f"{Colors.OKBLUE}[–ö–†–û–ö {step}]{Colors.ENDC} {Colors.BOLD}{message}{Colors.ENDC}")

def print_success(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    print(f"{Colors.OKGREEN}[OK] {message}{Colors.ENDC}")

def print_warning(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    print(f"{Colors.WARNING}[WARNING] {message}{Colors.ENDC}")

def print_error(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    print(f"{Colors.FAIL}[ERROR] {message}{Colors.ENDC}")

def print_warning(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"""
    print(f"{Colors.WARNING}[WARNING] {message}{Colors.ENDC}")

def show_progress_bar(current, total, description="", width=50):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    percent = (current / total) * 100
    filled = int(width * current // total)
    bar = '‚ñà' * filled + '‚ñë' * (width - filled)
    print(f"\r{Colors.OKCYAN}[{bar}] {percent:.1f}% {description}{Colors.ENDC}", end='', flush=True)
    if current == total:
        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ

def show_step_progress(step, total_steps, step_name):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ–≥—Ä–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤"""
    print(f"\n{Colors.OKBLUE}{'='*60}{Colors.ENDC}")
    show_progress_bar(step, total_steps, f"–ï—Ç–∞–ø {step}/{total_steps}: {step_name}")
    print(f"{Colors.OKBLUE}{'='*60}{Colors.ENDC}")

def show_service_selection_menu():
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –∑–±—ñ—Ä–∫–∏ —Ç–∞ —Ä–µ–∂–∏–º—É frontend"""
    services = [
        "app", "frontend", "pg", "redis", "redis-insight",
        "rabbitmq", "celery-worker", "celery-beat", "flower", "mailing", "nginx"
    ]

    print("\n" + "="*60)
    print("üîß –ú–ï–ù–Æ –í–ò–ë–û–†–£ –†–ï–ñ–ò–ú–£ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø")
    print("="*60)
    print("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:")
    print()
    print("üè† –õ–û–ö–ê–õ–¨–ù–ò–ô FRONTEND:")
    print("0. üöÄ Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ (–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û)")
    print()
    print("üê≥ –ü–û–í–ù–ò–ô DOCKER:")
    print("00. üåê –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker (–≤–∫–ª—é—á–Ω–æ –∑ Frontend)")
    print()
    print("üéØ –í–ò–ë–Ü–†–ö–û–í–ò–ô –†–ï–ñ–ò–ú:")
    print("-" * 40)

    for i, service in enumerate(services, 1):
        icon = "üåê" if service == "frontend" else "üì¶"
        note = " (–±—É–¥–µ –≤ Docker)" if service == "frontend" else ""
        print(f"{i:2}. {icon} {service}{note}")

    print("-" * 40)
    print("üí° –ü—ñ–¥–∫–∞–∑–∫–∏:")
    print("  2  - —Ç—ñ–ª—å–∫–∏ frontend –≤ Docker")
    print("  1,3,4 - –≤–∏–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: app+pg+redis)")
    print("  0/00 - —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –≤—Å—ñ—Ö —Ä–µ–∂–∏–º—ñ–≤")

    while True:
        try:
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == "0":
                # Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ
                backend_services = [s for s in services if s != "frontend"]
                return backend_services, "local"

            if choice == "00":
                # –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker
                return services, "docker"

            if not choice:
                print("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤")
                continue

            # –ü–∞—Ä—Å–∏–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            selected_indices = []
            for part in choice.split(","):
                part = part.strip()
                if part.isdigit():
                    idx = int(part)
                    if 1 <= idx <= len(services):
                        selected_indices.append(idx - 1)
                    else:
                        print(f"‚ùå –ù–æ–º–µ—Ä {idx} –ø–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º (1-{len(services)})")
                        raise ValueError()
                else:
                    print(f"‚ùå '{part}' –Ω–µ —î —á–∏—Å–ª–æ–º")
                    raise ValueError()

            if not selected_indices:
                print("‚ùå –ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É")
                continue

            selected_services = [services[i] for i in selected_indices]

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º frontend
            if "frontend" in selected_services:
                frontend_mode = "docker"
                print(f"\n‚úÖ –û–±—Ä–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(selected_services)}")
                print("üåê Frontend –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ")
            else:
                frontend_mode = "local"
                print(f"\n‚úÖ –û–±—Ä–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(selected_services)}")
                print("üè† Frontend –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ")

            confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ").strip().lower()

            if confirm in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                return selected_services, frontend_mode
            else:
                print("–û–±–µ—Ä—ñ—Ç—å –∑–Ω–æ–≤—É:")
                continue

        except (ValueError, KeyboardInterrupt):
            print("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            continue

def auto_fix_build_errors(service_name, error_log):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø–æ—à–∏—Ä–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∑–±—ñ—Ä–∫–∏"""
    fixes_applied = []

    if not error_log:
        return fixes_applied

    error_lower = error_log.lower()

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 1: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø—É
    if "permission denied" in error_lower or "access denied" in error_lower:
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
            if os.name != 'nt':  # Unix/Linux
                subprocess.run(["sudo", "chmod", "-R", "755", "."], check=True)
                fixes_applied.append("–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É")
        except:
            pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 2: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–µ—à–µ–º Docker
    if "cache" in error_lower or "layer" in error_lower:
        try:
            subprocess.run(["docker", "system", "prune", "-f"], check=True)
            fixes_applied.append("–û—á–∏—â–µ–Ω–æ –∫–µ—à Docker")
        except:
            pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 3: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é
    if "network" in error_lower or "connection" in error_lower or "timeout" in error_lower:
        try:
            subprocess.run(["docker", "network", "prune", "-f"], check=True)
            fixes_applied.append("–û—á–∏—â–µ–Ω–æ –º–µ—Ä–µ–∂—ñ Docker")
        except:
            pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 4: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ Python
    if service_name in ["app", "celery-worker", "celery-beat", "flower", "mailing"]:
        if "requirements" in error_lower or "pip" in error_lower:
            try:
                # –û–Ω–æ–≤–ª—é—î–º–æ pip –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                fixes_applied.append("–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è pip")
            except:
                pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 5: –ü—Ä–æ–±–ª–µ–º–∏ –∑ Node.js
    if service_name == "frontend":
        if "npm" in error_lower or "node" in error_lower:
            try:
                # –û—á–∏—â–∞—î–º–æ npm –∫–µ—à
                if os.path.exists("frontend/node_modules"):
                    import shutil
                    shutil.rmtree("frontend/node_modules")
                    fixes_applied.append("–í–∏–¥–∞–ª–µ–Ω–æ node_modules")

                if os.path.exists("frontend/package-lock.json"):
                    os.remove("frontend/package-lock.json")
                    fixes_applied.append("–í–∏–¥–∞–ª–µ–Ω–æ package-lock.json")
            except:
                pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 6: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—Ä—Ç–∞–º–∏
    if "port" in error_lower or "bind" in error_lower:
        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —â–æ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ—Ä—Ç–∏
            subprocess.run(["docker-compose", "down"], check=True)
            fixes_applied.append("–ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏")
        except:
            pass

    return fixes_applied

def run_docker_build_with_progress(selected_services=None):
    """–ó–∞–ø—É—Å–∫–∞—î docker-compose build –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ, –±–µ–∑ –ø–∞—Ä–∞–ª–µ–ª—ñ)"""

    # –§–ª–∞–≥ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∑–±—ñ—Ä–∫–∏
    stop_build_flag = threading.Event()

    all_services = {
        "app": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "frontend": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "pg": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "redis": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "redis-insight": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "rabbitmq": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "celery-worker": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "celery-beat": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "flower": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "mailing": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "nginx": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""}
    }

    # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ
    if selected_services is None:
        selected_services = list(all_services.keys())

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
    services = {name: data for name, data in all_services.items() if name in selected_services}

    # –î–ª—è –Ω–µ –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
    for name, data in all_services.items():
        if name not in selected_services:
            data["status"] = "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ"
            data["progress"] = 0

    display_lock = threading.Lock()

    def get_log_color_and_icon(log_msg):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—ñ—Ä —Ç–∞ —ñ–∫–æ–Ω–∫—É –¥–ª—è –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not log_msg:
            return "", ""

        log_lower = log_msg.lower()
        if any(word in log_lower for word in ["error", "failed", "fatal", "exception"]):
            return "\033[91m", "üî¥"  # –ß–µ—Ä–≤–æ–Ω–∏–π –¥–ª—è –ø–æ–º–∏–ª–æ–∫
        elif any(word in log_lower for word in ["warning", "warn", "deprecated"]):
            return "\033[93m", "üü°"  # –ñ–æ–≤—Ç–∏–π –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
        elif any(word in log_lower for word in ["info", "installing", "downloading"]):
            return "\033[94m", "üîµ"  # –°–∏–Ω—ñ–π –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        else:
            return "\033[90m", "‚ö™"  # –°—ñ—Ä–∏–π –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    # –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    last_service_state = {}
    progress_header_shown = False
    services_positions = {}  # –ü–æ–∑–∏—Ü—ñ—ó —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É

    def update_all_services():
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ) - —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ"""
        nonlocal progress_header_shown, last_service_state, services_positions

        with display_lock:
            # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
            if not progress_header_shown:
                print(f"\nüì¶ –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤ ({len(selected_services)} —Å–µ—Ä–≤—ñ—Å—ñ–≤)...")
                print()

                # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ä—è–¥–∫–∏ –¥–ª—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
                line_number = 0
                for service, data in all_services.items():
                    with data["lock"]:
                        progress_bar = "‚ñà" * int(data["progress"] / 10) + "‚ñë" * (10 - int(data["progress"] / 10))
                        base_line = f"üî® {service:15} [{progress_bar}] {data['progress']:3.0f}% {data['status']}"

                        if data["log_msg"]:
                            color, icon = get_log_color_and_icon(data["log_msg"])
                            log_part = f" {icon} {color}{data['log_msg'][:50]}\033[0m"
                            line = base_line + log_part
                        else:
                            line = base_line

                        print(line)
                        services_positions[service] = line_number
                        last_service_state[service] = {
                            "progress": data["progress"],
                            "status": data["status"],
                            "log_msg": data["log_msg"]
                        }
                        line_number += 1

                progress_header_shown = True
                return

            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
            for service, data in all_services.items():
                with data["lock"]:
                    current_state = {
                        "progress": data["progress"],
                        "status": data["status"],
                        "log_msg": data["log_msg"]
                    }

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Å—Ç–∞–Ω
                    if service not in last_service_state or last_service_state[service] != current_state:
                        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ—Å—è –¥–æ —Ä—è–¥–∫–∞ —Ü—å–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
                        current_line = services_positions[service]
                        lines_to_move = len(services_positions) - current_line

                        # –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ—Å—è –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä—è–¥–∫–∞
                        print(f"\033[{lines_to_move}A", end='')

                        # –û—á–∏—â–∞—î–º–æ —Ä—è–¥–æ–∫ —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ –Ω–æ–≤–∏–π
                        progress_bar = "‚ñà" * int(data["progress"] / 10) + "‚ñë" * (10 - int(data["progress"] / 10))
                        base_line = f"üî® {service:15} [{progress_bar}] {data['progress']:3.0f}% {data['status']}"

                        if data["log_msg"]:
                            color, icon = get_log_color_and_icon(data["log_msg"])
                            log_part = f" {icon} {color}{data['log_msg'][:50]}\033[0m"
                            line = base_line + log_part
                        else:
                            line = base_line

                        print(f"\r{line}\033[K", end='')

                        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –∫—ñ–Ω–µ—Ü—å
                        print(f"\033[{lines_to_move}B", end='')

                        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
                        last_service_state[service] = current_state.copy()

    def extract_important_log(line):
        """–í–∏—Ç—è–≥—É—î –≤–∞–∂–ª–∏–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –∑ –ª–æ–≥ —Ä—è–¥–∫–∞"""
        line = line.strip()

        # –í–∏–¥–∞–ª—è—î–º–æ ANSI –∫–æ–¥–∏
        import re
        line = re.sub(r'\033\[[0-9;]*m', '', line)

        # –®—É–∫–∞—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if any(word in line.lower() for word in ["error", "failed", "fatal", "exception"]):
            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è "ERROR:" –∞–±–æ –ø–æ–¥—ñ–±–Ω–æ–≥–æ
            for pattern in [r"ERROR:?\s*(.+)", r"FAILED:?\s*(.+)", r"FATAL:?\s*(.+)"]:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    return match.group(1).strip()
            return line

        elif any(word in line.lower() for word in ["warning", "warn", "deprecated"]):
            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è "WARNING:" –∞–±–æ –ø–æ–¥—ñ–±–Ω–æ–≥–æ
            for pattern in [r"WARNING:?\s*(.+)", r"WARN:?\s*(.+)", r"DEPRECATED:?\s*(.+)"]:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    return match.group(1).strip()
            return line

        elif any(word in line.lower() for word in ["installing", "downloading", "building"]):
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å
            if "installing" in line.lower():
                match = re.search(r"installing\s+(.+)", line, re.IGNORECASE)
                if match:
                    return f"Installing {match.group(1).strip()}"
            elif "downloading" in line.lower():
                return "Downloading dependencies..."
            elif "building" in line.lower():
                return "Building..."

        return ""

    def build_single_service(service_name, retry_count=0):
        """–ó–±–∏—Ä–∞—î –æ–∫—Ä–µ–º–∏–π —Å–µ—Ä–≤—ñ—Å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫"""
        max_retries = 2

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –±—É–ª–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
        if stop_build_flag.is_set():
            return False

        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–±—ñ—Ä–∫–∞"
            with services[service_name]["lock"]:
                retry_text = f" (—Å–ø—Ä–æ–±–∞ {retry_count + 1})" if retry_count > 0 else ""
                services[service_name]["status"] = f"üî® –ó–±—ñ—Ä–∫–∞...{retry_text}"
                services[service_name]["progress"] = 10
                services[service_name]["log_msg"] = "–ó–∞–ø—É—Å–∫ –∑–±—ñ—Ä–∫–∏..."
                services[service_name]["error_log"] = ""
            update_all_services()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
            process = subprocess.Popen(
                ["docker-compose", "build", "--no-cache", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )

            error_lines = []

            # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            for line in iter(process.stdout.readline, ''):
                if not line:
                    break

                line = line.strip()

                # –ó–±–∏—Ä–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                if any(word in line.lower() for word in ["error", "failed", "fatal"]):
                    error_lines.append(line)

                # –í–∏—Ç—è–≥—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                important_log = extract_important_log(line)

                with services[service_name]["lock"]:
                    old_progress = services[service_name]["progress"]
                    new_progress = old_progress

                    if "WORKDIR" in line or "COPY" in line:
                        new_progress = 30
                        services[service_name]["log_msg"] = "–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤..."
                    elif "RUN" in line:
                        new_progress = 60
                        services[service_name]["log_msg"] = "–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥..."
                    elif "EXPOSE" in line or "CMD" in line:
                        new_progress = 90
                        services[service_name]["log_msg"] = "–§—ñ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è..."
                    elif "Successfully built" in line or "Successfully tagged" in line:
                        new_progress = 100
                        services[service_name]["status"] = "‚úÖ –ì–æ—Ç–æ–≤–æ"
                        services[service_name]["log_msg"] = "–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ"

                    # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ
                    if important_log:
                        services[service_name]["log_msg"] = important_log

                    if new_progress > old_progress:
                        services[service_name]["progress"] = new_progress

                update_all_services()
                time.sleep(0.1)

            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
            return_code = process.wait()

            # –Ø–∫—â–æ –∑–±—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è —ñ —î —Å–ø—Ä–æ–±–∏
            if return_code != 0 and retry_count < max_retries:
                error_log = " ".join(error_lines)

                with services[service_name]["lock"]:
                    services[service_name]["status"] = "üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
                    services[service_name]["log_msg"] = "–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
                    services[service_name]["error_log"] = error_log
                update_all_services()

                # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏
                fixes = auto_fix_build_errors(service_name, error_log)

                if fixes:
                    with services[service_name]["lock"]:
                        services[service_name]["log_msg"] = f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: {', '.join(fixes)}"
                    update_all_services()
                    time.sleep(2)

                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑–±—ñ—Ä–∫–∏
                    return build_single_service(service_name, retry_count + 1)

            # –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            with services[service_name]["lock"]:
                if return_code == 0:
                    services[service_name]["progress"] = 100
                    services[service_name]["status"] = "‚úÖ –ì–æ—Ç–æ–≤–æ"
                    services[service_name]["log_msg"] = "–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ"
                else:
                    services[service_name]["status"] = "‚ùå –ü–æ–º–∏–ª–∫–∞"
                    services[service_name]["log_msg"] = f"–ó–±—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è (–∫–æ–¥ {return_code})"
                    if error_lines:
                        services[service_name]["error_log"] = " ".join(error_lines[-3:])  # –û—Å—Ç–∞–Ω–Ω—ñ 3 –ø–æ–º–∏–ª–∫–∏

            update_all_services()
            return return_code == 0

        except Exception as e:
            with services[service_name]["lock"]:
                services[service_name]["status"] = "‚ùå –ü–æ–º–∏–ª–∫–∞"
                services[service_name]["log_msg"] = f"Exception: {str(e)[:30]}"
            update_all_services()
            return False

    # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ —É —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    try:
        for service_name in selected_services:
            ok = build_single_service(service_name)
            if not ok:
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±—É–¥—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏, –∞–ª–µ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É
                pass
            time.sleep(0.1)
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º...{Colors.ENDC}")
        print("üõë –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –∑–±—ñ—Ä–∫–∏...")
        stop_build_flag.set()
        print("‚ùå –ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return False

    # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ—Å—è –≤ –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É
    with display_lock:
        print(f"\033[{len(all_services)}B")
        print("‚úÖ –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –æ–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—ñ–±—Ä–∞–ª–∏—Å—è —É—Å–ø—ñ—à–Ω–æ
    success_count = sum(1 for name, data in all_services.items()
                       if name in selected_services and "‚úÖ" in data["status"])
    selected_count = len(selected_services)

    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{selected_count} –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ —î
    failed_services = [name for name, data in all_services.items()
                      if name in selected_services and "‚ùå" in data["status"]]

    if failed_services:
        print(f"‚ùå –°–µ—Ä–≤—ñ—Å–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {', '.join(failed_services)}")
        for service in failed_services:
            if all_services[service]["error_log"]:
                print(f"   {service}: {all_services[service]['error_log'][:100]}...")

    return success_count == selected_count

def check_services_health():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤...")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    result = subprocess.run(
        ["docker-compose", "ps", "--format", "json"],
        capture_output=True,
        text=True
    )

    services_status = {}
    if result.returncode == 0:
        try:
            import json
            containers = json.loads(result.stdout) if result.stdout.strip() else []
            if not isinstance(containers, list):
                containers = [containers]

            for container in containers:
                service_name = container.get("Service", "unknown")
                state = container.get("State", "unknown")
                health = container.get("Health", "")

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
                if state == "running":
                    if health == "healthy" or not health:
                        status = "‚úÖ Healthy"
                    elif health == "unhealthy":
                        status = "‚ùå Unhealthy"
                    else:
                        status = "‚è≥ Starting"
                else:
                    status = f"‚ùå {state}"

                services_status[service_name] = status
        except:
            # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            pass

    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤ (Health Check):")
    print("=" * 50)

    expected_services = ["app", "pg", "redis", "redis-insight", "rabbitmq",
                        "celery-worker", "celery-beat", "flower", "mailing", "nginx"]

    for service in expected_services:
        if service in services_status:
            status = services_status[service]
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∑–∞–≥–∞–ª—ñ —ñ—Å–Ω—É—î
            check_result = subprocess.run(
                ["docker", "ps", "-f", f"name={service}", "--format", "{{.Status}}"],
                capture_output=True,
                text=True
            )
            if check_result.returncode == 0 and check_result.stdout.strip():
                if "Up" in check_result.stdout:
                    status = "‚úÖ Running"
                else:
                    status = "‚ùå Stopped"
            else:
                status = "‚ö†Ô∏è  Not found"

        print(f"üîß {service:15} {status}")

    print("=" * 50)

    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    healthy_count = sum(1 for status in services_status.values() if "‚úÖ" in status)
    total_count = len(expected_services)

    if healthy_count == total_count:
        print(f"üéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ ({healthy_count}/{total_count}) –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        print()
        print("üåê " + "="*50)
        print("üöÄ AutoRia Clone –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        print("üîó –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: http://localhost:3000")
        print("="*53)
        return True
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–∞—Ü—é—î {healthy_count}/{total_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏.")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        return False

def run_command(command, cwd=None, check=True, capture_output=False):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        if capture_output:
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check,
                capture_output=True,
                text=True
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check
            )
        return result
    except subprocess.CalledProcessError as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command}")
        print_error(f"–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: {e.returncode}")
        if capture_output:
            print_error(f"–í–∏–≤—ñ–¥: {e.stdout}")
            print_error(f"–ü–æ–º–∏–ª–∫–∏: {e.stderr}")
        return None

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏"""
    show_step_progress(1, 4, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
    show_progress_bar(1, 3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js...")
    result = run_command("node --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Node.js: {result.stdout.strip()}")
    else:
        print_error("Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
    show_progress_bar(2, 3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm...")
    result = run_command("npm --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"npm: {result.stdout.strip()}")
    else:
        print_error("npm –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    show_progress_bar(3, 3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker...")
    result = run_command("docker --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Docker: {result.stdout.strip()}")
    else:
        print_error("Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    print_success("–í—Å—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
    return True

def check_project_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"""
    show_step_progress(2, 4, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É")

    required_files = [
        "docker-compose.yml",
        "backend/Dockerfile",
        "frontend/Dockerfile",
        "frontend/package.json"
    ]

    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)

    if missing_files:
        print_error("–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in missing_files:
            print_error(f"  - {file}")
        return False

    print_success("–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ .env —Ñ–∞–π–ª–∏
    env_files = [
        "backend/.env",
        "frontend/.env.local"
    ]

    for env_file in env_files:
        if not Path(env_file).exists():
            print_warning(f"–§–∞–π–ª –æ—Ç–æ—á–µ–Ω–Ω—è {env_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print_success(f"–§–∞–π–ª –æ—Ç–æ—á–µ–Ω–Ω—è {env_file} –∑–Ω–∞–π–¥–µ–Ω–æ")

    return True

def build_frontend():
    """–ó–±–∏—Ä–∞—î —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ production —Ä–µ–∂–∏–º—ñ"""
    show_step_progress(4, 4, "–ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ PRODUCTION —Ä–µ–∂–∏–º—ñ")

    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print_error("–ü–∞–ø–∫–∞ frontend –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return False

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    show_progress_bar(1, 4, "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    result = run_command("npm install --legacy-peer-deps", cwd=frontend_dir, capture_output=False)
    if not result:
        return False
    print_success("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

    # –û—á–∏—â–∞—î–º–æ –ø–æ—Ä—Ç 3000 –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é
    show_progress_bar(2, 4, "üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000...")
    run_command("npm run kill 3000", cwd=frontend_dir, check=False, capture_output=False)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç–∞—Ä–æ—ó –∑–±—ñ—Ä–∫–∏
    next_dir = frontend_dir / ".next"
    if next_dir.exists():
        show_progress_bar(3, 4, "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –∑–±—ñ—Ä–∫–∏...")
        run_command("rm -rf .next", cwd=frontend_dir, check=False, capture_output=False)

    # Production –∑–±—ñ—Ä–∫–∞
    show_progress_bar(4, 4, "üî® –ó–±—ñ—Ä–∫–∞ –≤ production —Ä–µ–∂–∏–º—ñ...")
    print("‚è≥ –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 2-3 —Ö–≤–∏–ª–∏–Ω–∏...")

    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∑ –ø–æ–≤–Ω–∏–º –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è–º –≤–∏–≤–æ–¥—É —Ç–∞ –±–µ–∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        process = subprocess.Popen(
            "npm run build",
            shell=True,
            cwd=frontend_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            stdin=subprocess.DEVNULL,  # –ë–ª–æ–∫—É—î–º–æ stdin —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            text=True
        )

        stdout, stderr = process.communicate()

        if process.returncode != 0:
            print_error("–ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞!")
            if stderr:
                print(f"–ü–æ–º–∏–ª–∫–∞: {stderr}")
            return False
        else:
            print_success("–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

    except KeyboardInterrupt:
        print_warning("\n‚ö†Ô∏è –ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!")
        if 'process' in locals():
            process.terminate()
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –∑–±—ñ—Ä–∫–∏
    if next_dir.exists():
        print_success("Production –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–±—ñ—Ä–∫–∏
        result = run_command("du -sh .next", cwd=frontend_dir, check=False, capture_output=True)
        if result and result.returncode == 0:
            print_success(f"–†–æ–∑–º—ñ—Ä –∑–±—ñ—Ä–∫–∏: {result.stdout.strip()}")

        return True
    else:
        print_error("–ó–±—ñ—Ä–∫–∞ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
        return False

def comment_frontend_service(comment=True):
    """–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç frontend —Å–µ—Ä–≤–∏—Å –≤ docker-compose.yml"""
    compose_file = Path("docker-compose.yml")
    if not compose_file.exists():
        return False

    with open(compose_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    in_frontend_section = False
    modified_lines = []

    for line in lines:
        if line.strip().startswith('frontend:'):
            in_frontend_section = True
            if comment:
                modified_lines.append(f"  # {line}")
            else:
                modified_lines.append(line.replace('# ', '', 1) if line.strip().startswith('#') else line)
        elif in_frontend_section and (line.startswith('  ') or line.strip() == ''):
            if line.strip() == '' or line.startswith('  # ====='):
                in_frontend_section = False
                modified_lines.append(line)
            else:
                if comment:
                    modified_lines.append(f"  # {line[2:]}" if not line.strip().startswith('#') else line)
                else:
                    modified_lines.append(line.replace('# ', '', 1) if line.strip().startswith('#') else line)
        else:
            in_frontend_section = False
            modified_lines.append(line)

    with open(compose_file, 'w', encoding='utf-8') as f:
        f.writelines(modified_lines)

    return True

def deploy_docker_services():
    """–†–æ–∑–≥–æ—Ä—Ç–∞—î —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker –∑ –ø–æ–≤–Ω–æ—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ—é"""

    # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Ç–∞ —Ä–µ–∂–∏–º—É frontend
    selected_services, frontend_mode = show_service_selection_menu()

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ docker-compose.yml –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä–µ–∂–∏–º—É frontend
    if frontend_mode == "local":
        show_step_progress(3, 4, "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è backend —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker")
        print("üè† –†–µ–∂–∏–º: Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ")
        print("–ö–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è frontend —Å–µ—Ä–≤—ñ—Å—É –≤ docker-compose.yml...")
        comment_frontend_service(comment=True)
    else:  # frontend_mode == "docker"
        show_step_progress(3, 4, "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker")
        print("üê≥ –†–µ–∂–∏–º: –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker")
        print("–†–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è frontend —Å–µ—Ä–≤—ñ—Å—É –≤ docker-compose.yml...")
        comment_frontend_service(comment=False)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å docker-compose.yml
    if not Path("docker-compose.yml").exists():
        print_error("–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False

    # –ü–û–í–ù–ï –û–ß–ò–©–ï–ù–ù–Ø - –µ–º—É–ª—é—î–º–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑ –Ω—É–ª—è
    show_progress_bar(1, 6, "üßπ –ó—É–ø–∏–Ω–∫–∞ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    run_command("docker-compose down --volumes --remove-orphans", check=False, capture_output=False)

    show_progress_bar(2, 6, "üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –æ–±—Ä–∞–∑—ñ–≤...")
    run_command("docker image prune -f", check=False, capture_output=False)

    show_progress_bar(3, 6, "üßπ –û—á–∏—â–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ç–æ–º—ñ–≤...")
    run_command("docker volume prune -f", check=False, capture_output=False)

    # –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê –ó–ë–Ü–†–ö–ê –í–°–Ü–• –ö–û–ù–¢–ï–ô–ù–ï–†–Ü–í –ó –ù–£–õ–Ø
    show_progress_bar(4, 6, "üî® –ó–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ–±—Ä–∞–∑—ñ–≤...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    if not run_docker_build_with_progress(selected_services):
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –¥–µ—è–∫—ñ Docker –æ–±—Ä–∞–∑–∏!")

        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
        retry = input("\nüîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ—Å—ñ–±—Ä–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏? (y/n): ").strip().lower()
        if retry in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∑–±—ñ—Ä–∫–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
            pass
        return None

    print_success("–í—Å—ñ –æ–±—Ä–∞–Ω—ñ –æ–±—Ä–∞–∑–∏ –∑—ñ–±—Ä–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")

    show_progress_bar(5, 6, "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")

    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è–º –≤–∏–≤–æ–¥—É (–±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
    result = run_command("docker-compose up -d --force-recreate", capture_output=True)
    if not result:
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker —Å–µ—Ä–≤—ñ—Å–∏!")
        return False

    print_success("–í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ!")

    # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    show_progress_bar(6, 6, "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")

    print("\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤:")
    wait_time = 20
    for i in range(wait_time):
        progress = (i + 1) / wait_time * 100
        show_progress_bar(i+1, wait_time, f"‚è≥ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ ({i+1}/{wait_time} —Å–µ–∫)")
        time.sleep(1)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–µ–∫—Ç –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
    print("\nüå± –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...")
    print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown...")

    try:
        result = run_command(
            "docker-compose exec -T app python manage.py init_project_data --verbosity=2",
            capture_output=True
        )
        if result and result.returncode == 0:
            print_success("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
            print("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è dropdown –≤ frontend")
        else:
            print_warning("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö")
            if result and result.stderr:
                print(f"–ü–æ–º–∏–ª–∫–∞: {result.stderr}")
    except Exception as e:
        print_warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ: {e}")
        print("üí° Dropdown –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    services_healthy = check_services_health()

    if services_healthy:
        print_success("Docker —Å–µ—Ä–≤—ñ—Å–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ –∑ –Ω—É–ª—è!")
    else:
        print_warning("Docker —Å–µ—Ä–≤—ñ—Å–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ, –∞–ª–µ –¥–µ—è–∫—ñ –º–æ–∂—É—Ç—å –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –¥–æ–¥atk–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")

    return frontend_mode

def deploy_full_docker():
    """–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Docker –≤–∫–ª—é—á–∞—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
    print_step(4, "–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker
    if not run_command("docker-compose up -d frontend", capture_output=True):
        print_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker")
        return False

    print_success("–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –≤ Docker!")
    return True

def start_local_frontend():
    """–ó–∞–ø—É—Å–∫–∞—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ production —Ä–µ–∂–∏–º—ñ"""
    print_step(4, "–¢–†–ï–¢–Ü–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")

    frontend_dir = Path("frontend")
    next_dir = frontend_dir / ".next"

    if not next_dir.exists():
        print_error("Production –∑–±—ñ—Ä–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ npm run build")
        return False

    # –û—á–∏—â–∞—î–º–æ –ø–æ—Ä—Ç 3000 –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("–û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000...")
    run_command("npm run kill 3000", cwd=frontend_dir, check=False)

    print("üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º—ñ...")
    print("üåê URL: http://localhost:3000")
    print("‚ö†Ô∏è  –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    print()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ production —Ä–µ–∂–∏–º—ñ
    try:
        subprocess.run("npm run start", shell=True, cwd=frontend_dir)
    except KeyboardInterrupt:
        print_success("\n‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    return True

def check_services():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print_step(5, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤")

    result = run_command("python monitor_services.py --detailed", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success("–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≥–æ—Ç–æ–≤—ñ!")
        return True
    else:
        print_warning("–î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å monitor_services.py –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
        if sys.platform == "win32":
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

        print(f"{Colors.HEADER}{Colors.BOLD}")
        print("–ü–û–í–ù–ò–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –î–ï–ü–õ–û–ô AutoRia Clone")
        print("=" * 50)
        print("üöÄ –ï–ú–£–õ–Ø–¶–Ü–Ø –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ó –ù–£–õ–Ø (—è–∫ –ø—ñ—Å–ª—è git clone)")
        print(f"{Colors.ENDC}")

        print("üìã –ü–ª–∞–Ω —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:")
        print("   1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥")
        print("   1Ô∏è‚É£.5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É")
        print("   2Ô∏è‚É£  –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É —Ç–∞ –∑–±—ñ—Ä–∫–∞ Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        print("   3Ô∏è‚É£  –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—è–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º)")
        print("   4Ô∏è‚É£  –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏")
        print()

        # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if not check_requirements():
            sys.exit(1)

        # –≠–¢–ê–ü 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        if not check_project_files():
            sys.exit(1)

        # –≠–¢–ê–ü 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker (–ü–ï–†–í–´–ú –î–ï–õ–û–ú!)
        # –§—É–Ω–∫—Ü–∏—è deploy_docker_services() —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ –º–µ–Ω—é
        frontend_mode = deploy_docker_services()
        if frontend_mode is None:  # –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            sys.exit(1)

        # –≠–¢–ê–ü 3: –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ production —Ä–µ–∂–∏–º–µ (–ü–û–°–õ–ï Docker)
        if frontend_mode == "local":
            if not build_frontend():
                sys.exit(1)

        # –≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        if frontend_mode == "local":
            print()
            print_success("–í—Å—ñ Docker —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ!")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è backend —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ backend —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
            services_healthy = check_services_health()

            if services_healthy:
                print("–§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
                start_local_frontend()
            else:
                print_warning("‚ö†Ô∏è –î–µ—è–∫—ñ backend —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.")
                print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.")
                print()
                print("üåê " + "="*50)
                print("üöÄ AutoRia Clone –∑–∞–ø—É—â–µ–Ω–∏–π (–∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏)")
                print("üîó –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: http://localhost:3000")
                print("="*53)
        else:  # frontend_mode == "docker"
            check_services()
            print()
            print_success("–ü–û–í–ù–ò–ô –î–ï–ü–õ–û–ô –í DOCKER –ó–ê–í–ï–†–®–ï–ù–û!")
            print("–î–æ—Å—Ç—É–ø–Ω—ñ URL:")
            print("   - http://localhost - –ì–æ–ª–æ–≤–Ω–∏–π UI (—á–µ—Ä–µ–∑ nginx)")
            print("   - http://localhost:3000 - Frontend (Docker)")
            print("   - http://localhost/api/ - Backend API")
            print("   - http://localhost/admin/ - Django Admin")
            print("   - http://localhost/rabbitmq/ - RabbitMQ Management")
            print("   - http://localhost/flower/ - Celery Flower")
            print("   - http://localhost/redis/ - Redis Insight")

    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º{Colors.ENDC}")
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        sys.exit(130)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–¥ –≤–∏—Ö–æ–¥—É –¥–ª—è Ctrl+C
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()
