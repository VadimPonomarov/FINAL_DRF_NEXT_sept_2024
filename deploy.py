#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –î–ï–ü–õ–û–ô AutoRia Clone
===================================

–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–≤–∏–¥–∫–æ–≥–æ –¥–µ–ø–ª–æ—é –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏.
–ü—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω–µ –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è, —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞ –≤–∏–±—ñ—Ä–∫–æ–≤—É –ø–µ—Ä–µ–∑–±—ñ—Ä–∫—É.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python deploy.py                                    # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    python deploy.py --mode restart                     # –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    python deploy.py --mode full_rebuild                # –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞
    python deploy.py --mode selective_rebuild --services app nginx  # –í–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞
    python deploy.py --auto                             # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

–†–µ–∂–∏–º–∏ –¥–µ–ø–ª–æ—é:
- restart: –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (–Ω–∞–π—à–≤–∏–¥—à–∏–π)
- full_rebuild: –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ–±—Ä–∞–∑—ñ–≤ (—è–∫ –∑ –Ω—É–ª—è)
- selective_rebuild: –ü–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ —Ç—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤

–©–æ —Ä–æ–±–∏—Ç—å —Å–∫—Ä–∏–ø—Ç:
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
- –í–∏–±–∏—Ä–∞—î —Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—é (—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∞–±–æ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)
- –†–æ–∑–≥–æ—Ä—Ç–∞—î Docker —Å–µ—Ä–≤—ñ—Å–∏ –∑–≥—ñ–¥–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏–º —Ä–µ–∂–∏–º–æ–º
- –ó–±–∏—Ä–∞—î —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ production —Ä–µ–∂–∏–º—ñ (—è–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º)
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –í–°–Ü–• —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–¥ –Ω–∞–¥–∞–Ω–Ω—è–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è
- –ù–∞–¥–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –í–°–Ü —Å–µ—Ä–≤—ñ—Å–∏ healthy
"""

import os
import sys
import subprocess
import time
import threading
import re
import argparse
from pathlib import Path
import select

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def input_with_timeout(prompt, timeout=10, default=""):
    """Input –∑ —Ç–∞–π–º–∞—É—Ç–æ–º. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–≤–æ–¥–∏—Ç—å –Ω—ñ—á–æ–≥–æ –∑–∞ timeout —Å–µ–∫—É–Ω–¥, –ø–æ–≤–µ—Ä—Ç–∞—î default"""
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    if default:
        print(f"{prompt}{default}", end='', flush=True)
    else:
        print(prompt, end='', flush=True)
    
    if sys.platform == 'win32':
        # Windows
        import msvcrt
        start_time = time.time()
        input_chars = []
        
        while True:
            if msvcrt.kbhit():
                char = msvcrt.getwche()
                if char == '\r':  # Enter
                    print()
                    return ''.join(input_chars)
                elif char == '\b':  # Backspace
                    if input_chars:
                        input_chars.pop()
                        print('\b \b', end='', flush=True)
                else:
                    input_chars.append(char)
            
            if time.time() - start_time > timeout:
                if not input_chars:
                    print(f"\n‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç {timeout}—Å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {default}")
                    return default
            
            time.sleep(0.01)
    else:
        # Unix/Linux
        import select
        ready, _, _ = select.select([sys.stdin], [], [], timeout)
        if ready:
            return sys.stdin.readline().rstrip('\n')
        else:
            print(f"\n‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç {timeout}—Å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {default}")
            return default

def print_step(step, message):
    """–í–∏–≤–æ–¥–∏—Ç—å –∫—Ä–æ–∫ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    print(f"{Colors.OKBLUE}[–ö–†–û–ö {step}]{Colors.ENDC} {Colors.BOLD}{message}{Colors.ENDC}")

def print_success(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    print(f"{Colors.OKGREEN}[OK] {message}{Colors.ENDC}")

def print_warning(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    print(f"{Colors.WARNING}[WARNING] {message}{Colors.ENDC}")

def print_error(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    print(f"{Colors.FAIL}[ERROR] {message}{Colors.ENDC}")

def show_progress_bar(current, total, description="", width=50):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä"""
    percent = (current / total) * 100
    filled = int(width * current // total)
    bar = '‚ñà' * filled + '‚ñë' * (width - filled)
    print(f"\r{Colors.OKCYAN}[{bar}] {percent:.1f}% {description}{Colors.ENDC}", end='', flush=True)
    if current == total:
        print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –≤ –∫—ñ–Ω—Ü—ñ

def show_step_progress(step, total_steps, step_name):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ–≥—Ä–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤"""
    print(f"\n{Colors.OKBLUE}{'='*60}{Colors.ENDC}")
    show_progress_bar(step, total_steps, f"–ï—Ç–∞–ø {step}/{total_steps}: {step_name}")
    print(f"{Colors.OKBLUE}{'='*60}{Colors.ENDC}")

def show_service_selection_menu():
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –∑–±—ñ—Ä–∫–∏ —Ç–∞ —Ä–µ–∂–∏–º—É frontend"""
    services = [
        "app", "frontend", "pg", "redis", "redis-insight",
        "rabbitmq", "celery-worker", "celery-beat", "flower", "mailing", "nginx"
    ]

    print("\n" + "="*60)
    print("üîß –ú–ï–ù–Æ –í–ò–ë–û–†–£ –†–ï–ñ–ò–ú–£ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø")
    print("="*60)
    print("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:")
    print()
    print("üè† –õ–û–ö–ê–õ–¨–ù–ò–ô FRONTEND:")
    print("0. üöÄ Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ (–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û)")
    print()
    print("üê≥ –ü–û–í–ù–ò–ô DOCKER:")
    print("00. üåê –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker (–≤–∫–ª—é—á–Ω–æ –∑ Frontend)")
    print()
    print("üéØ –í–ò–ë–Ü–†–ö–û–í–ò–ô –†–ï–ñ–ò–ú:")
    print("-" * 40)

    for i, service in enumerate(services, 1):
        icon = "üåê" if service == "frontend" else "üì¶"
        note = " (–±—É–¥–µ –≤ Docker)" if service == "frontend" else ""
        print(f"{i:2}. {icon} {service}{note}")

    print("-" * 40)
    print("üí° –ü—ñ–¥–∫–∞–∑–∫–∏:")
    print("  2  - —Ç—ñ–ª—å–∫–∏ frontend –≤ Docker")
    print("  1,3,4 - –≤–∏–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: app+pg+redis)")
    print("  0/00 - —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –≤—Å—ñ—Ö —Ä–µ–∂–∏–º—ñ–≤")
    print("  s - skip (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—ñ–≤)")
    print()
    print("üéØ –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 0 (Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ)")
    print("üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥: –æ–ø—Ü—ñ—è 0")

    while True:
        try:
            choice = input_with_timeout("\n–í–∞—à –≤–∏–±—ñ—Ä: ", timeout=10, default="0").strip().lower()
            if not choice:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ Enter
                choice = "0"

            if choice == "0":
                # Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ
                backend_services = [s for s in services if s != "frontend"]
                return backend_services, "local"

            if choice == "00":
                # –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker
                return services, "docker"

            if choice == "s" or choice == "skip":
                # Skip - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ —ñ skip —Ä–µ–∂–∏–º
                return [], "skip"

            if not choice:
                print("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤")
                continue

            # –ü–∞—Ä—Å—É—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            selected_indices = []
            for part in choice.split(","):
                part = part.strip()
                if part.isdigit():
                    idx = int(part)
                    if 1 <= idx <= len(services):
                        selected_indices.append(idx - 1)
                    else:
                        print(f"‚ùå –ù–æ–º–µ—Ä {idx} –ø–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º (1-{len(services)})")
                        raise ValueError()
                else:
                    print(f"‚ùå '{part}' –Ω–µ —î —á–∏—Å–ª–æ–º")
                    raise ValueError()

            if not selected_indices:
                print("‚ùå –ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É")
                continue

            selected_services = [services[i] for i in selected_indices]

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º frontend
            if "frontend" in selected_services:
                frontend_mode = "docker"
                print(f"\n‚úÖ –û–±—Ä–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(selected_services)}")
                print("üåê Frontend –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ")
            else:
                frontend_mode = "local"
                print(f"\n‚úÖ –û–±—Ä–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(selected_services)}")
                print("üè† Frontend –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ")

            confirm = input_with_timeout("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ", timeout=10, default="y").strip().lower()

            if not confirm or confirm in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                return selected_services, frontend_mode
            else:
                print("–û–±–µ—Ä—ñ—Ç—å –∑–Ω–æ–≤—É:")
                continue

        except (ValueError, KeyboardInterrupt):
            print("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            continue

def auto_fix_build_errors(service_name, error_log):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø–æ—à–∏—Ä–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∑–±—ñ—Ä–∫–∏"""
    fixes_applied = []

    if not error_log:
        return fixes_applied

    error_lower = error_log.lower()

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 1: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø—É
    if "permission denied" in error_lower or "access denied" in error_lower:
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
            if os.name != 'nt':  # Unix/Linux
                subprocess.run(["sudo", "chmod", "-R", "755", "."], check=True)
                fixes_applied.append("–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É")
        except:
            pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 2: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–µ—à–µ–º Docker
    if "cache" in error_lower or "layer" in error_lower:
        try:
            subprocess.run(["docker", "system", "prune", "-f"], check=True)
            fixes_applied.append("–û—á–∏—â–µ–Ω–æ –∫–µ—à Docker")
        except:
            pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 3: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é
    if "network" in error_lower or "connection" in error_lower or "timeout" in error_lower:
        try:
            subprocess.run(["docker", "network", "prune", "-f"], check=True)
            fixes_applied.append("–û—á–∏—â–µ–Ω–æ –º–µ—Ä–µ–∂—ñ Docker")
        except:
            pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 4: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ Python
    if service_name in ["app", "celery-worker", "celery-beat", "flower", "mailing"]:
        if "requirements" in error_lower or "pip" in error_lower:
            try:
                # –û–Ω–æ–≤–ª—é—î–º–æ pip –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                fixes_applied.append("–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è pip")
            except:
                pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 5: –ü—Ä–æ–±–ª–µ–º–∏ –∑ Node.js
    if service_name == "frontend":
        if "npm" in error_lower or "node" in error_lower:
            try:
                # –û—á–∏—â–∞—î–º–æ npm –∫–µ—à
                if os.path.exists("frontend/node_modules"):
                    import shutil
                    shutil.rmtree("frontend/node_modules")
                    fixes_applied.append("–í–∏–¥–∞–ª–µ–Ω–æ node_modules")

                if os.path.exists("frontend/package-lock.json"):
                    os.remove("frontend/package-lock.json")
                    fixes_applied.append("–í–∏–¥–∞–ª–µ–Ω–æ package-lock.json")
            except:
                pass

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 6: –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—Ä—Ç–∞–º–∏
    if "port" in error_lower or "bind" in error_lower:
        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —â–æ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ—Ä—Ç–∏
            subprocess.run(["docker-compose", "down"], check=True)
            fixes_applied.append("–ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏")
        except:
            pass

    return fixes_applied

def run_docker_build_with_progress(selected_services=None):
    """–ó–∞–ø—É—Å–∫–∞—î docker-compose build –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ, –±–µ–∑ –ø–∞—Ä–∞–ª–µ–ª—ñ)"""

    # –ü—Ä–∞–ø–æ—Ä –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∑–±—ñ—Ä–∫–∏
    stop_build_flag = threading.Event()

    # –°–ª–æ–≤–Ω–∏–∫ –∑ –∑—Ä—É—á–Ω–∏–º–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –Ω–∞–∑–≤–∞–º–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    service_display_names = {
        "app": "üêç Django Backend",
        "frontend": "‚öõÔ∏è Next.js Frontend",
        "pg": "üêò PostgreSQL DB",
        "redis": "üî¥ Redis Cache",
        "redis-insight": "üìä Redis Insight",
        "rabbitmq": "üê∞ RabbitMQ Broker",
        "celery-worker": "‚öôÔ∏è Celery Worker",
        "celery-beat": "‚è∞ Celery Beat",
        "flower": "üå∏ Flower Monitor",
        "mailing": "üìß Mail Service",
        "nginx": "üåê Nginx Proxy"
    }

    all_services = {
        "app": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "frontend": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "pg": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "redis": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "redis-insight": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "rabbitmq": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "celery-worker": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "celery-beat": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "flower": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "mailing": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""},
        "nginx": {"progress": 0, "status": "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è", "log_msg": "", "lock": threading.Lock(), "error_log": ""}
    }

    # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ
    if selected_services is None:
        selected_services = list(all_services.keys())

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –∑ –æ–±—Ä–∞–Ω–∏–º–∏
    services = {}
    for name in selected_services:
        if name in all_services:
            services[name] = all_services[name]

    display_lock = threading.Lock()

    def get_log_color_and_icon(log_msg):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—ñ—Ä —Ç–∞ —ñ–∫–æ–Ω–∫—É –¥–ª—è –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not log_msg:
            return "", ""

        log_lower = log_msg.lower()
        if any(word in log_lower for word in ["error", "failed", "fatal", "exception"]):
            return "\033[91m", "üî¥"  # –ß–µ—Ä–≤–æ–Ω–∏–π –¥–ª—è –ø–æ–º–∏–ª–æ–∫
        elif any(word in log_lower for word in ["warning", "warn", "deprecated"]):
            return "\033[93m", "üü°"  # –ñ–æ–≤—Ç–∏–π –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
        elif any(word in log_lower for word in ["info", "installing", "downloading"]):
            return "\033[94m", "üîµ"  # –°–∏–Ω—ñ–π –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        else:
            return "\033[90m", "‚ö™"  # –°—ñ—Ä–∏–π –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    # –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    last_service_state = {}
    progress_header_shown = False
    services_positions = {}  # –ü–æ–∑–∏—Ü—ñ—ó —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É

    def update_all_services():
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ) - —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ"""
        nonlocal progress_header_shown, last_service_state, services_positions

        with display_lock:
            # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
            if not progress_header_shown:
                print(f"\nüì¶ –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤ ({len(selected_services)} —Å–µ—Ä–≤—ñ—Å—ñ–≤)...")
                print()

                # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ä—è–¥–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
                line_number = 0
                for service, data in services.items():
                    with data["lock"]:
                        progress_bar = "‚ñà" * int(data["progress"] / 10) + "‚ñë" * (10 - int(data["progress"] / 10))
                        # –û—Ç—Ä–∏–º—É—î–º–æ –∑—Ä—É—á–Ω—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –Ω–∞–∑–≤—É —Å–µ—Ä–≤—ñ—Å—É
                        display_name = service_display_names.get(service, service)
                        base_line = f"üî® {display_name:20} [{progress_bar}] {data['progress']:3.0f}% {data['status']}"

                        if data["log_msg"]:
                            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–±–∞–∂–∞–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                            filtered_msg = data["log_msg"]
                            if "Running pip as the 'root' user" in filtered_msg:
                                filtered_msg = "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                            elif "WARNING" in filtered_msg and "pip" in filtered_msg:
                                filtered_msg = "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."

                            color, icon = get_log_color_and_icon(filtered_msg)
                            log_part = f" {icon} {color}{filtered_msg[:50]}\033[0m"
                            line = base_line + log_part
                        else:
                            line = base_line

                        print(line)
                        services_positions[service] = line_number
                        last_service_state[service] = {
                            "progress": data["progress"],
                            "status": data["status"],
                            "log_msg": data["log_msg"]
                        }
                        line_number += 1

                progress_header_shown = True
                return

            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ (—Ç—ñ–ª—å–∫–∏ –æ–±—Ä–∞–Ω—ñ)
            for service, data in services.items():
                with data["lock"]:
                    current_state = {
                        "progress": data["progress"],
                        "status": data["status"],
                        "log_msg": data["log_msg"]
                    }

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Å—Ç–∞–Ω
                    if service not in last_service_state or last_service_state[service] != current_state:
                        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ—Å—è –¥–æ —Ä—è–¥–∫–∞ —Ü—å–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
                        current_line = services_positions[service]
                        lines_to_move = len(services_positions) - current_line

                        # –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ—Å—è –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä—è–¥–∫–∞
                        print(f"\033[{lines_to_move}A", end='')

                        # –û—á–∏—â–∞—î–º–æ —Ä—è–¥–æ–∫ —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ –Ω–æ–≤–∏–π
                        progress_bar = "‚ñà" * int(data["progress"] / 10) + "‚ñë" * (10 - int(data["progress"] / 10))
                        base_line = f"üî® {service:15} [{progress_bar}] {data['progress']:3.0f}% {data['status']}"

                        if data["log_msg"]:
                            color, icon = get_log_color_and_icon(data["log_msg"])
                            log_part = f" {icon} {color}{data['log_msg'][:100]}\033[0m"
                            line = base_line + log_part
                        else:
                            line = base_line

                        print(f"\r{line}\033[K", end='')

                        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –∫—ñ–Ω–µ—Ü—å
                        print(f"\033[{lines_to_move}B", end='')

                        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
                        last_service_state[service] = current_state.copy()

    def extract_important_log(line):
        """–í–∏—Ç—è–≥—É—î –≤–∞–∂–ª–∏–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –∑ –ª–æ–≥ —Ä—è–¥–∫–∞"""
        line = line.strip()

        # –í–∏–¥–∞–ª—è—î–º–æ ANSI –∫–æ–¥–∏
        import re
        line = re.sub(r'\033\[[0-9;]*m', '', line)

        # –®—É–∫–∞—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if any(word in line.lower() for word in ["error", "failed", "fatal", "exception"]):
            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è "ERROR:" –∞–±–æ –ø–æ–¥—ñ–±–Ω–æ–≥–æ
            for pattern in [r"ERROR:?\s*(.+)", r"FAILED:?\s*(.+)", r"FATAL:?\s*(.+)"]:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    return match.group(1).strip()
            return line

        elif any(word in line.lower() for word in ["warning", "warn", "deprecated"]):
            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è "WARNING:" –∞–±–æ –ø–æ–¥—ñ–±–Ω–æ–≥–æ
            for pattern in [r"WARNING:?\s*(.+)", r"WARN:?\s*(.+)", r"DEPRECATED:?\s*(.+)"]:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    return match.group(1).strip()
            return line

        elif any(word in line.lower() for word in ["installing", "downloading", "building"]):
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å
            if "installing" in line.lower():
                match = re.search(r"installing\s+(.+)", line, re.IGNORECASE)
                if match:
                    return f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {match.group(1).strip()}"
            elif "downloading" in line.lower():
                return "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
            elif "building" in line.lower():
                return "–ó–±—ñ—Ä–∫–∞..."

        return ""

    def build_single_service(service_name, retry_count=0):
        """–ó–±–∏—Ä–∞—î –æ–∫—Ä–µ–º–∏–π —Å–µ—Ä–≤—ñ—Å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫"""
        max_retries = 2

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –±—É–ª–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
        if stop_build_flag.is_set():
            return False

        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–±—ñ—Ä–∫–∞"
            with services[service_name]["lock"]:
                retry_text = f" (—Å–ø—Ä–æ–±–∞ {retry_count + 1})" if retry_count > 0 else ""
                services[service_name]["status"] = f"üî® –ó–±—ñ—Ä–∫–∞...{retry_text}"
                services[service_name]["progress"] = 10
                services[service_name]["log_msg"] = "–ó–∞–ø—É—Å–∫ –∑–±—ñ—Ä–∫–∏..."
                services[service_name]["error_log"] = ""
            update_all_services()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
            process = subprocess.Popen(
                ["docker-compose", "build", "--no-cache", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )

            error_lines = []

            # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            for line in iter(process.stdout.readline, ''):
                if not line:
                    break

                line = line.strip()

                # –ó–±–∏—Ä–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                if any(word in line.lower() for word in ["error", "failed", "fatal"]):
                    error_lines.append(line)

                # –í–∏—Ç—è–≥—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                important_log = extract_important_log(line)

                with services[service_name]["lock"]:
                    old_progress = services[service_name]["progress"]
                    new_progress = old_progress

                    if "WORKDIR" in line or "COPY" in line:
                        new_progress = 30
                        services[service_name]["log_msg"] = "–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤..."
                    elif "RUN" in line:
                        new_progress = 60
                        services[service_name]["log_msg"] = "–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥..."
                    elif "EXPOSE" in line or "CMD" in line:
                        new_progress = 90
                        services[service_name]["log_msg"] = "–§—ñ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è..."
                    elif "Successfully built" in line or "Successfully tagged" in line:
                        new_progress = 100
                        services[service_name]["status"] = "‚úÖ –ì–æ—Ç–æ–≤–æ"
                        services[service_name]["log_msg"] = "–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ"

                    # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ
                    if important_log:
                        services[service_name]["log_msg"] = important_log

                    if new_progress > old_progress:
                        services[service_name]["progress"] = new_progress

                update_all_services()
                time.sleep(0.1)

            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
            return_code = process.wait()

            # –Ø–∫—â–æ –∑–±—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è —ñ —î —Å–ø—Ä–æ–±–∏
            if return_code != 0 and retry_count < max_retries:
                error_log = " ".join(error_lines)

                with services[service_name]["lock"]:
                    services[service_name]["status"] = "üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
                    services[service_name]["log_msg"] = "–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
                    services[service_name]["error_log"] = error_log
                update_all_services()

                # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏
                fixes = auto_fix_build_errors(service_name, error_log)

                if fixes:
                    with services[service_name]["lock"]:
                        services[service_name]["log_msg"] = f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: {', '.join(fixes)}"
                    update_all_services()
                    time.sleep(2)

                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑–±—ñ—Ä–∫–∏
                    return build_single_service(service_name, retry_count + 1)

            # –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            with services[service_name]["lock"]:
                if return_code == 0:
                    services[service_name]["progress"] = 100
                    services[service_name]["status"] = "‚úÖ –ì–æ—Ç–æ–≤–æ"
                    services[service_name]["log_msg"] = "–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ"
                else:
                    services[service_name]["status"] = "‚ùå –ü–æ–º–∏–ª–∫–∞"
                    services[service_name]["log_msg"] = f"–ó–±—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è (–∫–æ–¥ {return_code})"
                    if error_lines:
                        services[service_name]["error_log"] = " ".join(error_lines[-3:])  # –û—Å—Ç–∞–Ω–Ω—ñ 3 –ø–æ–º–∏–ª–∫–∏

            update_all_services()
            return return_code == 0

        except Exception as e:
            with services[service_name]["lock"]:
                services[service_name]["status"] = "‚ùå –ü–æ–º–∏–ª–∫–∞"
                services[service_name]["log_msg"] = f"Exception: {str(e)[:80]}"
            update_all_services()
            return False

    # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ —É —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    try:
        for service_name in selected_services:
            ok = build_single_service(service_name)
            if not ok:
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±—É–¥—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏, –∞–ª–µ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É
                pass
            time.sleep(0.1)
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º...{Colors.ENDC}")
        print("üõë –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –∑–±—ñ—Ä–∫–∏...")
        stop_build_flag.set()
        print("‚ùå –ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return False

    # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ—Å—è –≤ –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É
    with display_lock:
        print(f"\033[{len(services)}B")
        print("‚úÖ –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –æ–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—ñ–±—Ä–∞–ª–∏—Å—è —É—Å–ø—ñ—à–Ω–æ
    success_count = sum(1 for name, data in services.items() if "‚úÖ" in data["status"])
    selected_count = len(services)

    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{selected_count} –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ —î
    failed_services = [name for name, data in services.items() if "‚ùå" in data["status"]]

    if failed_services:
        print(f"‚ùå –°–µ—Ä–≤—ñ—Å–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {', '.join(failed_services)}")
        for service in failed_services:
            if services[service]["error_log"]:
                print(f"   {service}: {services[service]['error_log'][:100]}...")

    return success_count == selected_count

def start_nginx_with_retry(max_attempts=5, wait_between_attempts=10):
    """
    –ó–∞–ø—É—Å–∫–∞—î nginx –∑ —Ü–∏–∫–ª—ñ—á–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏ –¥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ health check
    """
    print("üåê –ó–∞–ø—É—Å–∫ Nginx –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ...")

    for attempt in range(1, max_attempts + 1):
        print(f"üîÑ –°–ø—Ä–æ–±–∞ {attempt}/{max_attempts}: –ó–∞–ø—É—Å–∫ Nginx...")

        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ nginx —è–∫—â–æ –≤—ñ–Ω –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
            subprocess.run(
                "docker-compose stop nginx",
                shell=True,
                capture_output=True,
                text=True,
                timeout=30
            )

            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä nginx
            subprocess.run(
                "docker-compose rm -f nginx",
                shell=True,
                capture_output=True,
                text=True,
                timeout=30
            )

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ nginx –∑–∞–Ω–æ–≤–æ
            nginx_result = subprocess.run(
                "docker-compose up -d nginx",
                shell=True,
                capture_output=True,
                text=True,
                timeout=60
            )

            if nginx_result.returncode != 0:
                print_warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Nginx (—Å–ø—Ä–æ–±–∞ {attempt})")
                if nginx_result.stderr:
                    print(f"   –ü–æ–º–∏–ª–∫–∞: {nginx_result.stderr}")
                continue

            print_success(f"‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {attempt})")

            # –ß–µ–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Nginx ({wait_between_attempts} —Å–µ–∫)...")
            time.sleep(wait_between_attempts)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ health check nginx
            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health check Nginx...")
            health_check_passed = False

            # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ health check
            for health_attempt in range(3):
                try:
                    health_result = subprocess.run(
                        'docker exec nginx wget --quiet --tries=1 --spider http://localhost/nginx-health || echo "failed"',
                        shell=True,
                        capture_output=True,
                        text=True,
                        timeout=10
                    )

                    if health_result.returncode == 0 and "failed" not in health_result.stdout:
                        health_check_passed = True
                        break
                    else:
                        print(f"   Health check –Ω–µ–≤–¥–∞–ª–∏–π (—Å–ø—Ä–æ–±–∞ {health_attempt + 1}/3)")
                        time.sleep(3)

                except Exception as e:
                    print(f"   –ü–æ–º–∏–ª–∫–∞ health check: {e}")
                    time.sleep(3)

            if health_check_passed:
                print_success("‚úÖ Nginx —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —ñ –ø—Ä–æ–π–¥–µ–Ω–æ health check!")
                return True
            else:
                print_warning(f"‚ö†Ô∏è Nginx –∑–∞–ø—É—â–µ–Ω–æ, –∞–ª–µ health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {attempt})")

        except Exception as e:
            print_warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Nginx (—Å–ø—Ä–æ–±–∞ {attempt}): {e}")

        if attempt < max_attempts:
            print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
            time.sleep(5)

    print_error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Nginx –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±")
    print("üîß Nginx –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –∞–ª–µ health check –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å")
    print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ localhost:3000")
    return False

def check_services_health(frontend_mode="local"):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤–∫–ª—é—á–∞—é—á–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤...")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    result = subprocess.run(
        ["docker-compose", "ps", "--format", "json"],
        capture_output=True,
        text=True
    )

    services_status = {}
    if result.returncode == 0:
        try:
            import json
            containers = json.loads(result.stdout) if result.stdout.strip() else []
            if not isinstance(containers, list):
                containers = [containers]

            for container in containers:
                service_name = container.get("Service", "unknown")
                state = container.get("State", "unknown")
                health = container.get("Health", "")

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
                if state == "running":
                    if health == "healthy" or not health:
                        status = "‚úÖ Healthy"
                    elif health == "unhealthy":
                        status = "‚ùå Unhealthy"
                    else:
                        status = "‚è≥ Starting"
                else:
                    status = f"‚ùå {state}"

                services_status[service_name] = status
        except:
            # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            pass

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
    if frontend_mode == "local":
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex(('localhost', 3000))
            sock.close()

            if result == 0:
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTP –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                try:
                    import urllib.request
                    response = urllib.request.urlopen('http://localhost:3000', timeout=5)
                    if response.getcode() == 200:
                        services_status["frontend"] = "‚úÖ Healthy"
                    else:
                        services_status["frontend"] = "‚ùå HTTP Error"
                except:
                    services_status["frontend"] = "‚ö†Ô∏è  HTTP Issue"
            else:
                services_status["frontend"] = "‚ùå Not Running"
        except:
            services_status["frontend"] = "‚ùå Connection Failed"
    elif frontend_mode == "docker":
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker...")
        # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π —Ä–∞–∑–æ–º –∑ —ñ–Ω—à–∏–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        # –ê–ª–µ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ HTTP –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
        try:
            import urllib.request
            response = urllib.request.urlopen('http://localhost:3000', timeout=10)
            if response.getcode() == 200:
                services_status["frontend"] = "‚úÖ Healthy"
            else:
                services_status["frontend"] = "‚ùå HTTP Error"
        except:
            services_status["frontend"] = "‚ùå Not Accessible"

    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤ (Health Check):")
    print("=" * 60)

    expected_services = ["app", "pg", "redis", "redis-insight", "rabbitmq",
                        "celery-worker", "celery-beat", "flower", "mailing", "nginx"]

    # –î–æ–¥–∞—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if frontend_mode == "local":
        expected_services.append("frontend")

    all_healthy = True
    healthy_count = 0

    for service in expected_services:
        if service in services_status:
            status = services_status[service]
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∑–∞–≥–∞–ª—ñ —ñ—Å–Ω—É—î
            check_result = subprocess.run(
                ["docker", "ps", "-f", f"name={service}", "--format", "{{.Status}}"],
                capture_output=True,
                text=True
            )
            if check_result.returncode == 0 and check_result.stdout.strip():
                if "Up" in check_result.stdout:
                    status = "‚úÖ Running"
                else:
                    status = "‚ùå Stopped"
                    all_healthy = False
            else:
                status = "‚ö†Ô∏è  Not found"
                all_healthy = False

        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–¥–æ—Ä–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏
        if "‚úÖ" in status:
            healthy_count += 1
        else:
            all_healthy = False

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        if service == "frontend":
            print(f"‚öõÔ∏è  {service:15} {status} (Local)")
        else:
            print(f"üîß {service:15} {status}")

    print("=" * 60)

    total_count = len(expected_services)

    if all_healthy and healthy_count == total_count:
        print(f"üéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ ({healthy_count}/{total_count}) –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        print()
        print("üåê " + "="*50)
        print("üöÄ AutoRia Clone –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        if frontend_mode == "local":
            print("üîó –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: http://localhost:3000")
        else:
            print("üîó –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: http://localhost")
        print("="*53)
        return True
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–∞—Ü—é—î {healthy_count}/{total_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤. –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞!")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.")
        print()
        print("‚ùå –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ï –ù–ê–î–ê–Ñ–¢–¨–°–Ø - –°–ï–†–í–Ü–°–ò –ù–ï –ì–û–¢–û–í–Ü!")
        return False

def run_command(command, cwd=None, check=True, capture_output=False):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        if capture_output:
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check,
                capture_output=True,
                text=True
            )
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–≤—ñ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
            print(f"–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è: {command}")
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check
            )
        return result
    except subprocess.CalledProcessError as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command}")
        print_error(f"–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: {e.returncode}")
        if capture_output:
            print_error(f"–í–∏–≤—ñ–¥: {e.stdout}")
            print_error(f"–ü–æ–º–∏–ª–∫–∏: {e.stderr}")
        return None

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏"""
    show_step_progress(1, 4, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
    show_progress_bar(1, 3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js...")
    result = run_command("node --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Node.js: {result.stdout.strip()}")
    else:
        print_error("Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
    show_progress_bar(2, 3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm...")
    result = run_command("npm --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"npm: {result.stdout.strip()}")
    else:
        print_error("npm –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    show_progress_bar(3, 3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker...")
    result = run_command("docker --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Docker: {result.stdout.strip()}")
    else:
        print_error("Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    print_success("–í—Å—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
    return True

def check_project_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"""
    show_step_progress(2, 4, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É")

    required_files = [
        "docker-compose.yml",
        "backend/Dockerfile",
        "frontend/Dockerfile",
        "frontend/package.json"
    ]

    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)

    if missing_files:
        print_error("–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in missing_files:
            print_error(f"  - {file}")
        return False

    print_success("–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ .env —Ñ–∞–π–ª–∏
    env_files = [
        "backend/.env",
        "frontend/.env.local"
    ]

    for env_file in env_files:
        if not Path(env_file).exists():
            print_warning(f"–§–∞–π–ª –æ—Ç–æ—á–µ–Ω–Ω—è {env_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print_success(f"–§–∞–π–ª –æ—Ç–æ—á–µ–Ω–Ω—è {env_file} –∑–Ω–∞–π–¥–µ–Ω–æ")

    return True

def build_frontend():
    """–ó–±–∏—Ä–∞—î —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ production —Ä–µ–∂–∏–º—ñ"""
    show_step_progress(4, 4, "–ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ PRODUCTION —Ä–µ–∂–∏–º—ñ")

    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print_error("–ü–∞–ø–∫–∞ frontend –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return False

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    show_progress_bar(1, 4, "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    result = run_command("npm install --legacy-peer-deps", cwd=frontend_dir, capture_output=False)
    if not result:
        return False
    print_success("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

    # –û—á–∏—â–∞—î–º–æ –ø–æ—Ä—Ç 3000 –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é
    show_progress_bar(2, 4, "üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000...")
    run_command("npm run kill 3000", cwd=frontend_dir, check=False, capture_output=False)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç–∞—Ä–æ—ó –∑–±—ñ—Ä–∫–∏
    next_dir = frontend_dir / ".next"
    if next_dir.exists():
        show_progress_bar(3, 4, "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –∑–±—ñ—Ä–∫–∏...")
        run_command("rm -rf .next", cwd=frontend_dir, check=False, capture_output=False)

    # Production –∑–±—ñ—Ä–∫–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω–¥–∏–∫–∞—Ü—ñ—î—é –ø—Ä–æ–≥—Ä–µ—Å—É
    print("‚è≥ –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 2-3 —Ö–≤–∏–ª–∏–Ω–∏...")
    print("üîÑ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–±—ñ—Ä–∫–∏:")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    build_progress = {
        "progress": 40,
        "status": "üî® –ó–±—ñ—Ä–∫–∞",
        "log_msg": "–ó–∞–ø—É—Å–∫ –∑–±—ñ—Ä–∫–∏...",
        "lock": threading.Lock()
    }

    def update_frontend_progress(progress, status, log_msg=""):
        with build_progress["lock"]:
            build_progress["progress"] = progress
            build_progress["status"] = status
            build_progress["log_msg"] = log_msg

            progress_bar = "‚ñà" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
            display_name = "‚öõÔ∏è Next.js Frontend"

            if log_msg:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å —É—á–µ—Ç–æ–º —à–∏—Ä–∏–Ω—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                max_log_length = 80  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
                truncated_log = log_msg[:max_log_length]
                if len(log_msg) > max_log_length:
                    truncated_log += "..."
                line = f"üî® {display_name:20} [{progress_bar}] {progress:3.0f}% {status} üîÑ {truncated_log}"

                # –ï—Å–ª–∏ –ª–æ–≥ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                if len(log_msg) > max_log_length:
                    print(f"\r{line}")
                    print(f"   üìÑ –ü–æ–≤–Ω–∏–π —à–ª—è—Ö: {log_msg}")
                    return
            else:
                line = f"üî® {display_name:20} [{progress_bar}] {progress:3.0f}% {status}"

            print(f"\r{line}", end="", flush=True)

    try:
        update_frontend_progress(40, "üî® –ó–±—ñ—Ä–∫–∞", "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è TypeScript...")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É
        process = subprocess.Popen(
            "npm run build",
            shell=True,
            cwd=frontend_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            stdin=subprocess.DEVNULL,
            text=True,
            bufsize=1,
            universal_newlines=True
        )

        # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑–±—ñ—Ä–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –∑ –¥–µ—Ç–µ–∫—Ü—ñ—î—é –∑–∞—Å—Ç–æ—ó–≤
        current_progress = 40
        last_progress_time = time.time()
        last_progress_value = current_progress
        stuck_timeout = 600  # 10 —Ö–≤–∏–ª–∏–Ω –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—É = –∑–∞—Å—Ç—ñ–π (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤)
        last_activity_time = time.time()  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–±—É–¥—å-—è–∫–æ–≥–æ –≤–∏–≤–æ–¥—É)
        activity_timeout = 120  # 2 —Ö–≤–∏–ª–∏–Ω–∏ –±–µ–∑ –±—É–¥—å-—è–∫–æ–≥–æ –≤–∏–≤–æ–¥—É = –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break

            current_time = time.time()

            if output:
                output_lower = output.lower()
                old_progress = current_progress
                last_activity_time = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ (—Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü—ñ—è –¥–ª—è Next.js 15+ —ñ Turbopack)
                if any(keyword in output_lower for keyword in ['compiling', '—Ç—É—Ä–±–æ–ø–∞–∫', 'turbopack', 'bundling']):
                    current_progress = min(60, current_progress + 2)
                    update_frontend_progress(current_progress, "üî® –ó–±—ñ—Ä–∫–∞", "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")
                elif any(keyword in output_lower for keyword in ['compiled successfully', 'compiled', 'build successful', '–∑–±—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞']):
                    current_progress = min(75, current_progress + 3)
                    update_frontend_progress(current_progress, "‚úÖ –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è", "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞...")
                elif any(keyword in output_lower for keyword in ['optimizing', '–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è', 'minifying', '–º—ñ–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—è']):
                    current_progress = min(85, current_progress + 2)
                    update_frontend_progress(current_progress, "‚ö° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –±–∞–Ω–¥–ª—ñ–≤...")
                elif any(keyword in output_lower for keyword in ['creating', 'generating', '—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', '–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è', 'static', '—Å—Ç–∞—Ç–∏—á–Ω']):
                    current_progress = min(95, current_progress + 2)
                    update_frontend_progress(current_progress, "üì¶ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
                elif any(keyword in output_lower for keyword in ['route', 'page', '–º–∞—Ä—à—Ä—É—Ç', '—Å—Ç–æ—Ä—ñ–Ω–∫', '/', 'app/']):
                    current_progress = min(98, current_progress + 1)
                    update_frontend_progress(current_progress, "üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏", "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫...")
                elif any(keyword in output_lower for keyword in ['ready', '–≥–æ—Ç–æ–≤', 'server', '—Å–µ—Ä–≤–µ—Ä', 'localhost', 'build completed', '–∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'export success', '–µ–∫—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π']):
                    current_progress = 100
                    update_frontend_progress(current_progress, "‚úÖ –ì–æ—Ç–æ–≤–æ", "–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    # –Ø–∫—â–æ —Ü–µ production –∑–±—ñ—Ä–∫–∞ (–Ω–µ dev —Å–µ—Ä–≤–µ—Ä), –º–æ–∂–µ–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
                    if any(keyword in output_lower for keyword in ['build completed', 'export success', '–∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞']):
                        break
                else:
                    # –Ø–∫—â–æ —î –±—É–¥—å-—è–∫–∏–π –≤–∏–≤—ñ–¥, –∞–ª–µ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ - –ø–æ–≤—ñ–ª—å–Ω–æ –∑–±—ñ–ª—å—à—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                    if len(output.strip()) > 10:  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        current_progress = min(current_progress + 0.5, 95)
                        # –û—á–∏—â–∞—î–º–æ –≤–∏–≤—ñ–¥ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                        clean_output = output.strip().replace('\n', ' ').replace('\r', ' ')
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã
                        safe_output = clean_output[:60] + ("..." if len(clean_output) > 60 else "")
                        update_frontend_progress(current_progress, "üîÑ –û–±—Ä–æ–±–∫–∞", safe_output)
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤–∏–≤–æ–¥—É, –∞–ª–µ –ø—Ä–æ—Ü–µ—Å –∂–∏–≤–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                if process.poll() is None and time_without_activity > 10:
                    # –ö–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –≤–∏–≤–æ–¥—É –ø–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    if int(time_without_activity) % 10 == 0:
                        spinner_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
                        spinner = spinner_chars[int(time_without_activity // 2) % len(spinner_chars)]
                        update_frontend_progress(current_progress, f"{spinner} –û–±—Ä–æ–±–∫–∞", f"–¢–∏—Ö–∞ –æ–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤... ({int(time_without_activity)}—Å –±–µ–∑ –≤–∏–≤–æ–¥—É)")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –ø—Ä–æ–≥—Ä–µ—Å
                if current_progress > old_progress:
                    last_progress_time = time.time()
                    last_progress_value = current_progress

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –∑–∞—Å—Ç—ñ–π (–∞–ª–µ –Ω–µ —è–∫—â–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è)
            time_without_progress = current_time - last_progress_time
            time_without_activity = current_time - last_activity_time

            # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —è–∫—â–æ –Ω–µ–º–∞—î –≤–∏–≤–æ–¥—É, –∞–ª–µ –ø—Ä–æ—Ü–µ—Å –∂–∏–≤–∏–π
            if time_without_activity > activity_timeout and process.poll() is None:
                if time_without_activity % 30 < 1:  # –ö–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                    dots = "." * (int(time_without_activity // 30) % 4)
                    update_frontend_progress(current_progress, "üîÑ –û–±—Ä–æ–±–∫–∞", f"–¢–∏—Ö–∞ –æ–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤{dots} ({int(time_without_activity//60)} —Ö–≤ –±–µ–∑ –≤–∏–≤–æ–¥—É)")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
            if time_without_progress > 120 and time_without_progress % 120 < 1 and process.poll() is None:
                minutes_stuck = int(time_without_progress // 60)
                print(f"\n‚è≥ –ó–±—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–∞—î {minutes_stuck} —Ö–≤–∏–ª–∏–Ω –±–µ–∑ –∑–º—ñ–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—É –Ω–∞ {current_progress}%...")
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {stuck_timeout//60} —Ö–≤–∏–ª–∏–Ω")
                print(f"   –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {(stuck_timeout - time_without_progress)//60:.0f} —Ö–≤–∏–ª–∏–Ω –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è")
                print(f"   –ü—Ä–æ—Ü–µ—Å –∞–∫—Ç–∏–≤–Ω–∏–π: {'–¢–∞–∫' if time_without_activity < activity_timeout else '–¢–∏—Ö–∞ –æ–±—Ä–æ–±–∫–∞'}")

            if time_without_progress > stuck_timeout and process.poll() is None:
                print(f"\nüö® –ó–ê–°–¢–Ü–ô –í–ò–Ø–í–õ–ï–ù–û: –ó–±—ñ—Ä–∫–∞ –∑–∞—Å—Ç—Ä—è–≥–ª–∞ –Ω–∞ {current_progress}% –±—ñ–ª—å—à–µ –Ω—ñ–∂ {stuck_timeout//60} —Ö–≤–∏–ª–∏–Ω")
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
                print("   - –ü–µ—Ä–µ—Ä–≤—ñ—Ç—å –∑–±—ñ—Ä–∫—É (Ctrl+C) —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É")
                print("   - –û—á–∏—Å—Ç—ñ—Ç—å –∫–µ—à: rm -rf frontend/.next frontend/node_modules")
                print("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä –Ω–∞ –¥–∏—Å–∫—É")
                print("   - –í–∏–º–∫–Ω—ñ—Ç—å –∞–Ω—Ç–∏–≤—ñ—Ä—É—Å –¥–ª—è –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç—É")
                print("   - –°–ø—Ä–æ–±—É–π—Ç–µ dev —Ä–µ–∂–∏–º: npm run dev")

                # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–≤—ñ–¥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                print(f"\nüîç –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–≤—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É:")
                print(f"   {output.strip() if 'output' in locals() else '–ù–µ–º–∞—î –≤–∏–≤–æ–¥—É'}")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                print("   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –Ω–µ–≥–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è")
                time.sleep(60)
                process.terminate()
                return False

            # –Ø–∫—â–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –∞–ª–µ –º–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ 100% - —Ü–µ —Ç–µ–∂ –ø—Ä–æ–±–ª–µ–º–∞
            if process.poll() is not None and current_progress < 100:
                print(f"\n‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –Ω–∞ {current_progress}%, –∞–ª–µ –∑–±—ñ—Ä–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–ø–æ–≤–Ω–æ—é")
                break

        return_code = process.poll()
        if return_code != 0:
            stderr_output = process.stderr.read()
            update_frontend_progress(0, "‚ùå –ü–æ–º–∏–ª–∫–∞", "–ó–±—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è")
            print(f"\n–ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {stderr_output}")
            return False
        else:
            # –Ø–∫—â–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ, –∞–ª–µ –ø—Ä–æ–≥—Ä–µ—Å –º–µ–Ω—à–µ 100% - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 100%
            if current_progress < 100:
                update_frontend_progress(100, "‚úÖ –ì–æ—Ç–æ–≤–æ", "–ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É
            print_success("‚úÖ Frontend –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

    except KeyboardInterrupt:
        update_frontend_progress(0, "‚ö†Ô∏è –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ", "–ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        print("\n‚ö†Ô∏è –ó–±—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!")
        if 'process' in locals():
            process.terminate()
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –∑–±—ñ—Ä–∫–∏
    if next_dir.exists():
        print_success("‚úÖ Production –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–±—ñ—Ä–∫–∏
        result = run_command("du -sh .next", cwd=frontend_dir, check=False, capture_output=True)
        if result and result.returncode == 0:
            print_success(f"üì¶ –†–æ–∑–º—ñ—Ä –∑–±—ñ—Ä–∫–∏: {result.stdout.strip()}")

        print()
        print("üéâ –§–†–û–ù–¢–ï–ù–î –ì–û–¢–û–í–ò–ô –î–û –ó–ê–ü–£–°–ö–£!")
        print("üåê –ü—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:")
        print("   ‚Ä¢ –ü–æ–≤–Ω—ñ—Å—Ç—é —Ä–æ–±–æ—á–∏–π —Å–∞–π—Ç –Ω–∞ http://localhost:3000")
        print("   ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—É production –∑–±—ñ—Ä–∫—É")
        print("   ‚Ä¢ –®–≤–∏–¥–∫—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
        print("   ‚Ä¢ –ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print()

        return True
    else:
        print_error("‚ùå –ó–±—ñ—Ä–∫–∞ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
        return False

def comment_frontend_service(comment=True):
    """–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç frontend —Å–µ—Ä–≤–∏—Å –≤ docker-compose.yml"""
    compose_file = Path("docker-compose.yml")
    if not compose_file.exists():
        return False

    with open(compose_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    in_frontend_section = False
    modified_lines = []

    for line in lines:
        if line.strip().startswith('frontend:'):
            in_frontend_section = True
            if comment:
                modified_lines.append(f"  # {line}")
            else:
                modified_lines.append(line.replace('# ', '', 1) if line.strip().startswith('#') else line)
        elif in_frontend_section and (line.startswith('  ') or line.strip() == ''):
            if line.strip() == '' or line.startswith('  # ====='):
                in_frontend_section = False
                modified_lines.append(line)
            else:
                if comment:
                    modified_lines.append(f"  # {line[2:]}" if not line.strip().startswith('#') else line)
                else:
                    modified_lines.append(line.replace('# ', '', 1) if line.strip().startswith('#') else line)
        else:
            in_frontend_section = False
            modified_lines.append(line)

    with open(compose_file, 'w', encoding='utf-8') as f:
        f.writelines(modified_lines)

    return True

def deploy_docker_services(deploy_mode="full_rebuild", services_to_rebuild=None):
    """–†–æ–∑–≥–æ—Ä—Ç–∞—î —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏"""

    if services_to_rebuild is None:
        services_to_rebuild = []

    # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Ç–∞ —Ä–µ–∂–∏–º—É frontend
    selected_services, frontend_mode = show_service_selection_menu()

    # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ skip - –æ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
    if frontend_mode == "skip":
        return "skip"

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ docker-compose.yml –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä–µ–∂–∏–º—É frontend
    if frontend_mode == "local":
        show_step_progress(3, 4, "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è backend —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker")
        print("üè† –†–µ–∂–∏–º: Backend –≤ Docker + Frontend –ª–æ–∫–∞–ª—å–Ω–æ")
        print("–ö–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è frontend —Å–µ—Ä–≤—ñ—Å—É –≤ docker-compose.yml...")
        comment_frontend_service(comment=True)
    else:  # frontend_mode == "docker"
        show_step_progress(3, 4, "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker")
        print("üê≥ –†–µ–∂–∏–º: –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≤ Docker")
        print("–†–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è frontend —Å–µ—Ä–≤—ñ—Å—É –≤ docker-compose.yml...")
        comment_frontend_service(comment=False)

    # –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–µ–∂–∏–º—É –¥–µ–ø–ª–æ—é
    if deploy_mode == "restart":
        print("üîÑ –†–µ–∂–∏–º: –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
        return restart_existing_containers(selected_services, frontend_mode)
    elif deploy_mode == "selective_rebuild":
        print(f"üéØ –†–µ–∂–∏–º: –í–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤: {', '.join(services_to_rebuild)}")
        return selective_rebuild_services(selected_services, services_to_rebuild, frontend_mode)
    elif deploy_mode == "fast_rebuild":
        print("‚ö° –†–µ–∂–∏–º: FAST - —à–≤–∏–¥–∫–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ –±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è")
        return fast_rebuild_services(selected_services, frontend_mode)
    else:  # full_rebuild
        print("üèóÔ∏è –†–µ–∂–∏–º: –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        return full_rebuild_services(selected_services, frontend_mode)

def deploy_full_docker():
    """–ü–æ–≤–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤ Docker –≤–∫–ª—é—á–∞—é—á–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
    print_step(4, "–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker
    if not run_command("docker-compose up -d frontend", capture_output=True):
        print_warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker")
        return False

    print_success("–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker!")
    return True

def start_local_frontend():
    """–ó–∞–ø—É—Å–∫–∞—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ production —Ä–µ–∂–∏–º—ñ"""
    print_step(4, "–¢–†–ï–¢–Ü–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")

    frontend_dir = Path("frontend")
    next_dir = frontend_dir / ".next"

    if not next_dir.exists():
        print_error("Production –∑–±—ñ—Ä–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ npm run build")
        return False

    # –û—á–∏—â–∞—î–º–æ –ø–æ—Ä—Ç 3000 –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("–û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000...")
    run_command("npm run kill 3000", cwd=frontend_dir, check=False)

    print("üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º—ñ...")
    print("üåê URL: http://localhost:3000")
    print("‚ö†Ô∏è  –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    print()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ production —Ä–µ–∂–∏–º—ñ
    try:
        subprocess.run("npm run start", shell=True, cwd=frontend_dir)
    except KeyboardInterrupt:
        print_success("\n‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    return True

def start_local_frontend_background():
    """–ó–∞–ø—É—Å–∫–∞—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ"""
    frontend_dir = Path("frontend")
    next_dir = frontend_dir / ".next"

    if not next_dir.exists():
        print_error("Production –∑–±—ñ—Ä–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞! –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ npm run build")
        return None

    # –û—á–∏—â–∞—î–º–æ –ø–æ—Ä—Ç 3000 –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000...")
    run_command("npm run kill 3000", cwd=frontend_dir, check=False, capture_output=True)

    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")

    try:
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        env = os.environ.copy()
        env['NODE_ENV'] = 'production'
        env['IS_DOCKER'] = 'false'
        env['NEXT_PUBLIC_IS_DOCKER'] = 'false'
        env['NEXT_PUBLIC_BACKEND_URL'] = 'http://localhost:8000'
        env['BACKEND_URL'] = 'http://localhost:8000'
        env['REDIS_HOST'] = 'localhost'
        env['REDIS_URL'] = 'redis://localhost:6379/0'

        print("üîß –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è frontend:")
        print(f"   NEXT_PUBLIC_BACKEND_URL: {env['NEXT_PUBLIC_BACKEND_URL']}")
        print(f"   NEXT_PUBLIC_IS_DOCKER: {env['NEXT_PUBLIC_IS_DOCKER']}")
        print(f"   REDIS_HOST: {env['REDIS_HOST']}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏ –æ—Ç–æ—á–µ–Ω–Ω—è
        # –í–ê–ñ–õ–ò–í–û: –ù–ï –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ stdout/stderr –≤ PIPE, —â–æ–± –±–∞—á–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏
        process = subprocess.Popen(
            "npm run start",
            shell=True,
            cwd=frontend_dir,
            env=env,
            stdin=subprocess.DEVNULL
        )

        print(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω–æ (PID: {process.pid})")
        print("üåê URL: http://localhost:3000")
        print("üìã –õ–æ–≥–∏ frontend –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ")
        return process

    except Exception as e:
        print_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return None

def check_services():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print_step(5, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤")

    result = run_command("python monitor_services.py --detailed", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success("–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≥–æ—Ç–æ–≤—ñ!")
        return True
    else:
        print_warning("–î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å monitor_services.py –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        return False

def choose_deploy_mode():
    """–í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –¥–µ–ø–ª–æ—é"""
    print("üîß –†–ï–ñ–ò–ú –î–ï–ü–õ–û–Æ")
    print("=" * 50)
    print("1. üîÑ –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–∞–∑–∏)")
    print("2. üèóÔ∏è  –ü–æ–≤–Ω–µ –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–µ—Ä–µ–∑—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –æ–±—Ä–∞–∑–∏) [–ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú]")
    print("3. üéØ –í–∏–±—ñ—Ä–∫–æ–≤–µ –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (–≤–∏–±—Ä–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏)")
    print("f. ‚ö° FAST —Ä–µ–∂–∏–º - —à–≤–∏–¥–∫–∞ –∑–±—ñ—Ä–∫–∞ –ë–ï–ó –æ—á–∏—â–µ–Ω–Ω—è (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞)")
    print("s. ‚è≠Ô∏è  Skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–ø–ª–æ–π (—Ç—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å)")
    print("=" * 50)
    print("üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥: —Ä–µ–∂–∏–º 2 (–ø–æ–≤–Ω–µ –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è)")
    print()

    try:
        choice = input_with_timeout("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º (1-3/f/s): ", timeout=10, default="2").strip().lower()
        if not choice:
            choice = "2"
        
        if choice == "1":
            return "restart", []
        elif choice == "2":
            return "full_rebuild", []
        elif choice == "3":
            return "selective_rebuild", choose_services_to_rebuild()
        elif choice == "f" or choice == "fast":
            return "fast_rebuild", []
        elif choice == "s" or choice == "skip":
            return "skip", []
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∂–∏–º 2 (–ø–æ–≤–Ω–µ –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è)")
            return "full_rebuild", []
    except KeyboardInterrupt:
        print("\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)

def choose_services_to_rebuild():
    """–í–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏"""
    available_services = ["app", "celery-worker", "celery-beat", "flower", "mailing", "nginx"]

    print("\nüéØ –í–ò–ë–Ü–†–ö–û–í–ê –ü–ï–†–ï–ó–ë–Ü–†–ö–ê")
    print("=" * 40)
    print("–î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏:")
    for i, service in enumerate(available_services, 1):
        print(f"{i}. {service}")
    print("=" * 40)
    print("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3,5)")
    print("–ê–±–æ 'all' –¥–ª—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤")

    while True:
        try:
            choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()
            if choice.lower() == 'all':
                return available_services

            # –ü–∞—Ä—Å—É—î–º–æ –Ω–æ–º–µ—Ä–∏
            indices = [int(x.strip()) for x in choice.split(',')]
            selected_services = []

            for idx in indices:
                if 1 <= idx <= len(available_services):
                    selected_services.append(available_services[idx - 1])
                else:
                    print(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä: {idx}")
                    break
            else:
                if selected_services:
                    print(f"‚úÖ –û–±—Ä–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(selected_services)}")
                    return selected_services
                else:
                    print("‚ùå –ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É")
        except (ValueError, KeyboardInterrupt):
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É.")

def remove_conflicting_containers(services_list):
    """–í–∏–¥–∞–ª—è—î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print("üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    
    # –ú–∞–ø—ñ–Ω–≥ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–æ –º–æ–∂–ª–∏–≤–∏—Ö —ñ–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    service_container_names = {
        "app": ["app", "autoria_fresh_deploy-app-1", "autoria_clean_install-app-1"],
        "frontend": ["frontend"],
        "pg": ["pg"],
        "redis": ["redis"],
        "redis-insight": ["redis-insight"],
        "rabbitmq": ["rabbitmq"],
        "celery-worker": ["celery-worker"],
        "celery-beat": ["celery-beat"],
        "flower": ["celery-flower", "flower"],
        "mailing": ["mailing"],
        "nginx": ["nginx"]
    }
    
    containers_to_remove = []
    for service in services_list:
        if service in service_container_names:
            containers_to_remove.extend(service_container_names[service])
    
    if containers_to_remove:
        # –ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
        containers_str = " ".join(containers_to_remove)
        print(f"   –ó—É–ø–∏–Ω–∫–∞: {containers_str}")
        subprocess.run(
            f"docker stop {containers_str}",
            shell=True,
            capture_output=True,
            text=True,
            timeout=60
        )
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
        print(f"   –í–∏–¥–∞–ª–µ–Ω–Ω—è: {containers_str}")
        result = subprocess.run(
            f"docker rm -f {containers_str}",
            shell=True,
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            print_success(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏: {len(containers_to_remove)}")
            return True
        else:
            print_warning(f"‚ö†Ô∏è –î–µ—è–∫—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            return True
    else:
        print("   –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
        return True

def restart_existing_containers(selected_services, frontend_mode):
    """–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
    print("\nüîÑ –†–ï–ñ–ò–ú: –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
    print("=" * 60)
    print("üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–∞–∑–∏ Docker")
    print("üí° –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ~1-5 —Ö–≤–∏–ª–∏–Ω (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–∏)")
    print()

    # –ï—Ç–∞–ø 1: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    show_progress_bar(1, 5, "üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    remove_conflicting_containers(selected_services)
    
    # –ï—Ç–∞–ø 2: –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
    show_progress_bar(2, 5, "üõë –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É...")
    if not run_command("docker-compose down", capture_output=True):
        print_error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
        return None
    print_success("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É –∑—É–ø–∏–Ω–µ–Ω—ñ")

    # –ï—Ç–∞–ø 3: –û—á–∏—â–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    show_progress_bar(3, 5, "üßπ –û—á–∏—â–µ–Ω–Ω—è Docker –º–µ—Ä–µ–∂...")
    run_command("docker network prune -f", capture_output=True, check=False)

    # –ï—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (–ë–ï–ó nginx)
    show_progress_bar(4, 5, "üöÄ –ó–∞–ø—É—Å–∫ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ backend —Å–µ—Ä–≤–∏—Å—ã, –∫—Ä–æ–º–µ nginx (nginx –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ü–û–°–õ–ï —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
    backend_services = ["app", "pg", "redis", "redis-insight", "rabbitmq", "celery-worker", "celery-beat", "flower", "mailing"]
    services_to_start = " ".join(backend_services)

    print(f"üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤—ñ—Å—ñ–≤: {services_to_start}")
    print("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 3 —Ö–≤–∏–ª–∏–Ω...")

    try:
        result = subprocess.run(
            f"docker-compose up -d {services_to_start}",
            shell=True,
            capture_output=True,
            text=True,
            timeout=180  # 3 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è backend
        )

        if result.returncode != 0:
            print_error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
            if result.stderr:
                print(f"üîç –ü–æ–º–∏–ª–∫–∞: {result.stderr}")
            if result.stdout:
                print(f"üîç –í–∏–≤—ñ–¥: {result.stdout}")

            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            try:
                status_result = subprocess.run("docker-compose ps", shell=True, capture_output=True, text=True, timeout=10)
                if status_result.stdout:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:\n{status_result.stdout}")
            except:
                pass
            return None
        else:
            print_success("‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ")
            if result.stdout:
                print(f"üìã –ó–∞–ø—É—â–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:\n{result.stdout}")

    except subprocess.TimeoutExpired:
        print_error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (>3 —Ö–≤)")
        print("üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:")
        print("   - –ü–æ–≤—ñ–ª—å–Ω–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è")
        print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Å—É—Ä—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–∏")
        print("   - –ü—Ä–æ–±–ª–µ–º–∏ –∑ Docker Desktop")
        return None
    except Exception as e:
        print_error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return None

    # –ï—Ç–∞–ø 5: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
    show_progress_bar(5, 5, "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤...")

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å—Ç–∞—Ç—É—Å—É
    wait_time = 15
    for i in range(wait_time):
        progress = (i + 1) / wait_time * 100
        print(f"\r‚è≥ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤: {i+1}/{wait_time} —Å–µ–∫ ({progress:.0f}%)", end="", flush=True)
        time.sleep(1)

        # –ö–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
        if (i + 1) % 5 == 0:
            print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫
            try:
                result = subprocess.run("docker-compose ps --format table",
                                      shell=True, capture_output=True, text=True, timeout=10)
                if result.returncode == 0 and result.stdout:
                    running_count = result.stdout.count("running")
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {running_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
                else:
                    print("üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É...")
            except:
                print("üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É...")

    print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
    print_success("üéâ –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return frontend_mode

def selective_rebuild_services(selected_services, services_to_rebuild, frontend_mode):
    """–í–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –≤–∫–∞–∑–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print(f"üéØ –í–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤: {', '.join(services_to_rebuild)}")

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—ñ–≤, —è–∫—ñ –ø–µ—Ä–µ–±—É–¥–æ–≤—É—é—Ç—å—Å—è
    print("üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    remove_conflicting_containers(services_to_rebuild)

    # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
    print("üõë –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É...")
    run_command("docker-compose down", capture_output=True)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ project name (–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∞–±–æ –∑–º—ñ–Ω–Ω–æ—ó COMPOSE_PROJECT_NAME)
    project_name = os.getenv('COMPOSE_PROJECT_NAME')
    if not project_name:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫ project name (lowercase)
        project_name = Path.cwd().name.lower().replace(' ', '_').replace('-', '_')

    # –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–∞–∑–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    for service in services_to_rebuild:
        print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–∞–∑—É –¥–ª—è {service}...")
        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –Ω–∞–∑–≤–∏ –æ–±—Ä–∞–∑—ñ–≤
        possible_image_names = [
            f"{project_name}-{service}",
            f"{project_name}_{service}",
            service
        ]
        
        for image_name in possible_image_names:
            run_command(f"docker rmi {image_name} 2>/dev/null || true",
                   capture_output=True, check=False)

    # –ü–µ—Ä–µ–∑–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–±—Ä–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
    services_str = " ".join(services_to_rebuild)
    print(f"üî® –ü–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤: {services_str}")
    if not run_command(f"docker-compose build --no-cache {services_str}", capture_output=True):
        print_error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–±—ñ—Ä—Ü—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        return None

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    if not run_command("docker-compose up -d", capture_output=True):
        print_error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
        return None

    print_success("‚úÖ –í–∏–±—ñ—Ä–∫–æ–≤–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return frontend_mode

def check_port_available(port, service_name="—Å–µ—Ä–≤—ñ—Å"):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π"""
    import socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    result = sock.connect_ex(('localhost', port))
    sock.close()
    
    if result == 0:
        print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port} –∑–∞–π–Ω—è—Ç–∏–π ({service_name})")
        print(f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ: netstat -ano | findstr :{port}")
        return False
    else:
        print(f"‚úÖ –ü–æ—Ä—Ç {port} –≤—ñ–ª—å–Ω–∏–π ({service_name})")
        return True

def check_and_fix_postgres_volume():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ PostgreSQL volume"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PostgreSQL...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π
    if not check_port_available(5432, "PostgreSQL"):
        print("‚ö†Ô∏è  PostgreSQL –Ω–µ –∑–º–æ–∂–µ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–π–Ω—è—Ç–∏–π –ø–æ—Ä—Ç!")
        print("üîß –°–ø—Ä–æ–±—É–π—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ä—Ç 5432")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å
        try:
            result = subprocess.run(
                "netstat -ano | findstr :5432",
                shell=True,
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.stdout:
                print(f"üìä –ü—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É 5432:\n{result.stdout}")
        except:
            pass
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ volume
    pg_data_path = Path("pg/data")
    
    # –Ø–∫—â–æ –ø–∞–ø–∫–∞ —ñ—Å–Ω—É—î —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    if pg_data_path.exists():
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤–º—ñ—Å—Ç –ø–∞–ø–∫–∏
            list(pg_data_path.iterdir())
            print("‚úÖ PostgreSQL volume –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        except PermissionError:
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ PostgreSQL volume")
            print("üîß –°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...")
            try:
                # –ù–∞ Windows —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–∞–ø–∫—É
                import shutil
                backup_path = Path("pg/data_backup_" + str(int(time.time())))
                if pg_data_path.exists():
                    shutil.move(str(pg_data_path), str(backup_path))
                    print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ backup: {backup_path}")
                pg_data_path.mkdir(parents=True, exist_ok=True)
                print("‚úÖ PostgreSQL volume –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏: {e}")
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –≤—Ä—É—á–Ω—É –≤–∏–¥–∞–ª—ñ—Ç—å –ø–∞–ø–∫—É pg/data")
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        pg_data_path.mkdir(parents=True, exist_ok=True)
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ PostgreSQL volume")

def fast_rebuild_services(selected_services, frontend_mode):
    """‚ö° –®–í–ò–î–ö–ê –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –ë–ï–ó –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞)"""
    print("‚ö° FAST —Ä–µ–∂–∏–º: –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è...")
    print("üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è")
    
    # –ü—Ä–æ—Å—Ç–æ –∑—É–ø–∏–Ω—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ (–Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ)
    print("üõë –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    run_command("docker-compose stop", capture_output=True)
    
    show_progress_bar(4, 6, "üî® –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—ñ–≤...")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑–±–∏—Ä–∞—Ç–∏
    services_to_build = [s for s in selected_services if s not in ["pg", "redis", "redis-insight", "rabbitmq"]]
    
    print(f"üì¶ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—ñ–≤ ({len(services_to_build)} —Å–µ—Ä–≤—ñ—Å—ñ–≤)...")
    print(f"üéØ –°–µ—Ä–≤—ñ—Å–∏: {', '.join(services_to_build)}")
    
    # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ - –ù–ê–ë–ê–ì–ê–¢–û —à–≤–∏–¥—à–µ!
    build_cmd = f"docker-compose build --parallel {' '.join(services_to_build)}"
    
    result = run_command(build_cmd, capture_output=False)  # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–≤—ñ–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
    
    if not result:
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –æ–±—Ä–∞–∑–∏!")
        return None
    
    print_success("‚úÖ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    show_progress_bar(5, 6, "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (—à–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º - –±–µ–∑ —Ç—Ä–∏–≤–∞–ª–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫)...")
    
    result = run_command("docker-compose up -d --force-recreate", capture_output=True)
    if not result:
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker —Å–µ—Ä–≤—ñ—Å–∏!")
        return None
    
    print_success("‚úÖ –í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ!")
    
    # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –∑–∞–º—ñ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
    show_progress_bar(6, 6, "‚è≥ –ö–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ...")
    print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤ (15 —Å–µ–∫—É–Ω–¥ –∑–∞–º—ñ—Å—Ç—å 60)...")
    time.sleep(15)  # –ó–∞–º—ñ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
    
    print()
    print_success("‚ö° FAST —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å: docker-compose ps")
    
    return frontend_mode

def full_rebuild_services(selected_services, frontend_mode):
    """–ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print("üèóÔ∏è –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    print("üßπ –ê–ì–†–ï–°–ò–í–ù–ï –û–ß–ò–©–ï–ù–ù–Ø: –ó—É–ø–∏–Ω–∫–∞ –í–°–Ü–• –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏—Ö –ø–æ—Ä—Ç–∞—Ö...")
    
    # 0. –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –¢–ê –í–ò–ü–†–ê–í–õ–Ø–Ñ–ú–û POSTGRESQL VOLUME
    check_and_fix_postgres_volume()
    
    # 1. –ó–£–ü–ò–ù–Ø–Ñ–ú–û –í–°–Ü –ö–û–ù–¢–ï–ô–ù–ï–†–ò –ù–ê –ü–û–¢–†–Ü–ë–ù–ò–• –ü–û–†–¢–ê–• (–Ω–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É)
    critical_ports = [3000, 8000, 8001, 5432, 6379, 5672, 15672, 5555, 5540]
    
    print(f"üîç –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö: {', '.join(map(str, critical_ports))}")
    for port in critical_ports:
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ø–æ—Ä—Ç
            result = subprocess.run(
                f'docker ps --filter "publish={port}" --format "{{{{.ID}}}}"',
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            if result.stdout.strip():
                container_ids = result.stdout.strip().split('\n')
                print(f"   ‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ {len(container_ids)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                for container_id in container_ids:
                    if container_id:
                        print(f"      üõë –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_id[:12]}...")
                        subprocess.run(f"docker stop {container_id}", shell=True, capture_output=True, timeout=30)
                        subprocess.run(f"docker rm -f {container_id}", shell=True, capture_output=True, timeout=30)
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–æ—Ä—Ç—É {port}: {e}")
    
    # 2. –í–ò–î–ê–õ–Ø–Ñ–ú–û –í–°–Ü –ö–û–ù–¢–ï–ô–ù–ï–†–ò –ó –ü–û–î–Ü–ë–ù–ò–ú–ò –Ü–ú–ï–ù–ê–ú–ò
    print("\nüßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –∑ –ø–æ–¥—ñ–±–Ω–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏...")
    project_patterns = ["final_drf_next", "autoria", "app", "pg", "redis", "rabbitmq", "celery", "mailing", "nginx"]
    for pattern in project_patterns:
        try:
            result = subprocess.run(
                f'docker ps -a --filter "name={pattern}" --format "{{{{.ID}}}}"',
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            if result.stdout.strip():
                container_ids = result.stdout.strip().split('\n')
                for container_id in container_ids:
                    if container_id:
                        subprocess.run(f"docker rm -f {container_id}", shell=True, capture_output=True, timeout=30)
        except:
            pass
    
    # 3. –ó–£–ü–ò–ù–Ø–Ñ–ú–û –Ü –í–ò–î–ê–õ–Ø–Ñ–ú–û –í–°–Ü –ö–û–ù–¢–ï–ô–ù–ï–†–ò –ü–û–¢–û–ß–ù–û–ì–û –ü–†–û–ï–ö–¢–£
    print("\nüõë –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É...")
    run_command("docker-compose down -v --remove-orphans", capture_output=True)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ project name –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–∞–∑—ñ–≤
    project_name = os.getenv('COMPOSE_PROJECT_NAME')
    if not project_name:
        project_name = Path.cwd().name.lower().replace(' ', '_').replace('-', '_')

    # 4. –í–ò–î–ê–õ–Ø–Ñ–ú–û –í–°–Ü –û–ë–†–ê–ó–ò –ü–†–û–ï–ö–¢–£
    print("\nüóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ–±—Ä–∞–∑—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É...")
    # Windows PowerShell –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î xargs, —Ç–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
    result = subprocess.run(
        f'docker images --format "{{{{.Repository}}}}" | Select-String -Pattern "{project_name}" | ForEach-Object {{ docker rmi -f $_ }}',
        shell=True,
        capture_output=True,
        text=True
    )
    if result.returncode != 0 and result.stderr:
        # –Ø–∫—â–æ PowerShell –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –ø—Ä–æ–±—É—î–º–æ bash —Å—Ç–∏–ª—å (–¥–ª—è Git Bash / WSL)
        run_command(f"docker images -q {project_name}-* {project_name}_* 2>/dev/null | xargs -r docker rmi -f 2>/dev/null || true",
               capture_output=True, check=False)
    
    # 5. –û–ß–ò–©–ê–Ñ–ú–û DOCKER –ú–£–°–û–† (–Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ volumes, networks, images)
    print("\nüßπ –û—á–∏—â–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏—Ö Docker —Ä–µ—Å—É—Ä—Å—ñ–≤...")
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ volumes
        subprocess.run("docker volume prune -f", shell=True, capture_output=True, timeout=30)
        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ networks
        subprocess.run("docker network prune -f", shell=True, capture_output=True, timeout=30)
        # –í–∏–¥–∞–ª—è—î–º–æ dangling images
        subprocess.run("docker image prune -f", shell=True, capture_output=True, timeout=30)
        print("‚úÖ Docker –º—É—Å–æ—Ä –æ—á–∏—â–µ–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ Docker –º—É—Å–æ—Ä—É: {e}")

    # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑—ñ –∑–≤–∏—á–∞–π–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏
    return continue_full_rebuild(selected_services, frontend_mode)

def continue_full_rebuild(selected_services, frontend_mode):
    """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞)"""

    # –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê –ó–ë–Ü–†–ö–ê –í–°–Ü–• –ö–û–ù–¢–ï–ô–ù–ï–†–Ü–í –ó –ù–£–õ–Ø
    show_progress_bar(4, 6, "üî® –ó–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ–±—Ä–∞–∑—ñ–≤...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    if not run_docker_build_with_progress(selected_services):
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –¥–µ—è–∫—ñ Docker –æ–±—Ä–∞–∑–∏!")
        return None

    print_success("–í—Å—ñ –æ–±—Ä–∞–Ω—ñ –æ–±—Ä–∞–∑–∏ –∑—ñ–±—Ä–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")

    show_progress_bar(5, 6, "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è–º –≤–∏–≤–æ–¥—É
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 1-2 —Ö–≤–∏–ª–∏–Ω–∏)...")
    print("‚è≥ PostgreSQL –ø–æ—Ç—Ä–µ–±—É—î ~60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
    
    result = run_command("docker-compose up -d --force-recreate", capture_output=True)
    if not result:
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker —Å–µ—Ä–≤—ñ—Å–∏!")
        print("")
        print("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–∏:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ PostgreSQL: docker-compose logs pg")
        print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –ø–æ—Ä—Ç 5432 –≤—ñ–ª—å–Ω–∏–π: netstat -an | findstr 5432")
        print("3. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ volume: docker-compose down -v")
        print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å Docker Desktop")
        return None

    print_success("–í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ!")

    # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–æ—Å–æ–±–ª–∏–≤–æ PostgreSQL)
    show_progress_bar(6, 6, "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    print("")
    print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó PostgreSQL (60 —Å–µ–∫—É–Ω–¥)...")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    for i in range(60):
        print(f"\r‚è≥ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PostgreSQL: {i+1}/60 —Å–µ–∫ ({(i+1)/60*100:.0f}%)", end="", flush=True)
        time.sleep(1)
        
        # –ö–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
        if (i + 1) % 10 == 0:
            print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫
            try:
                result = subprocess.run(
                    "docker-compose ps pg",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                if "healthy" in result.stdout.lower():
                    print("‚úÖ PostgreSQL –≥–æ—Ç–æ–≤–∏–π!")
                    break
                elif "unhealthy" in result.stdout.lower():
                    print("‚ö†Ô∏è  PostgreSQL —â–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è...")
                else:
                    print("üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É PostgreSQL...")
            except:
                pass
    
    print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É

    return frontend_mode

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ü–∞—Ä—Å—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        parser = argparse.ArgumentParser(description='AutoRia Clone Deploy Script')
        parser.add_argument('--mode', choices=['restart', 'full_rebuild', 'selective_rebuild'],
                          help='–†–µ–∂–∏–º –¥–µ–ø–ª–æ—é')
        parser.add_argument('--services', nargs='*',
                          help='–°–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –≤–∏–±—ñ—Ä–∫–æ–≤–æ—ó –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏')
        parser.add_argument('--auto', action='store_true',
                          help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º –±–µ–∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤')

        args = parser.parse_args()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è Windows
        if sys.platform == "win32":
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

        print(f"{Colors.HEADER}{Colors.BOLD}")
        print("–ü–û–í–ù–ò–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –î–ï–ü–õ–û–ô AutoRia Clone")
        print("=" * 50)
        print("üöÄ –ï–ú–£–õ–Ø–¶–Ü–Ø –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ó –ù–£–õ–Ø (—è–∫ –ø—ñ—Å–ª—è git clone)")
        print(f"{Colors.ENDC}")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—é
        if args.mode:
            deploy_mode = args.mode
            services_to_rebuild = args.services or []
        elif args.auto:
            deploy_mode = "restart"
            services_to_rebuild = []
        else:
            deploy_mode, services_to_rebuild = choose_deploy_mode()

        print(f"üîß –†–µ–∂–∏–º –¥–µ–ø–ª–æ—é: {deploy_mode}")
        if services_to_rebuild:
            print(f"üéØ –°–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –ø–µ—Ä–µ–∑–±—ñ—Ä–∫–∏: {', '.join(services_to_rebuild)}")
        print()

        # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ skip - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ
        if deploy_mode == "skip":
            print("‚è≠Ô∏è  SKIP —Ä–µ–∂–∏–º: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–ø–ª–æ–π, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å")
            print("=" * 60)
            print()
            print("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:")
            print()
            try:
                result = subprocess.run(
                    "docker-compose ps",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                print(result.stdout)
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            
            print()
            print("üí° –î–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É –±–µ–∑ –æ–ø—Ü—ñ—ó skip")
            sys.exit(0)

        print("üìã –ü–ª–∞–Ω —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:")
        print("   1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥")
        print("   1Ô∏è‚É£.5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É")
        print("   2Ô∏è‚É£  –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É —Ç–∞ –∑–±—ñ—Ä–∫–∞ Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        print("   3Ô∏è‚É£  –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—è–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º)")
        print("   4Ô∏è‚É£  –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏")
        print()

        # –ï–¢–ê–ü 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
        if not check_requirements():
            sys.exit(1)

        # –ï–¢–ê–ü 1.5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
        if not check_project_files():
            sys.exit(1)

        # –ï–¢–ê–ü 2: –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker
        frontend_mode = deploy_docker_services(deploy_mode, services_to_rebuild)
        
        # –Ø–∫—â–æ frontend_mode == "skip" - —Ç–∞–∫–æ–∂ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        if frontend_mode == "skip":
            print("‚è≠Ô∏è  SKIP —Ä–µ–∂–∏–º: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—ñ–≤")
            print("=" * 60)
            print()
            print("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:")
            print()
            try:
                result = subprocess.run(
                    "docker-compose ps",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                print(result.stdout)
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
            
            print()
            print("üí° –î–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É –±–µ–∑ –æ–ø—Ü—ñ—ó skip")
            sys.exit(0)
        
        if frontend_mode is None:  # –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
            sys.exit(1)

        # –ï–¢–ê–ü 3: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        if frontend_mode == "local":
            # –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ production —Ä–µ–∂–∏–º—ñ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
            if not build_frontend():
                sys.exit(1)
        else:  # frontend_mode == "docker"
            # –î–ª—è Docker —Ä–µ–∂–∏–º—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤–∂–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑—ñ–±—Ä–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
            print("üê≥ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ")

        # –ï–¢–ê–ü 4: –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        print("\n" + "="*60)
        print("üöÄ –§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        print("="*60)

        if frontend_mode == "local":
            print()
            print_success("–í—Å—ñ Docker —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ!")

            # –§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            print("–§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
            frontend_process = start_local_frontend_background()

            if frontend_process:
                # –ß–µ–∫–∞—î–º–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É —â–æ–± —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤—Å—Ç–∏–≥ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è
                print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 15-30 —Å–µ–∫—É–Ω–¥)...")
                print("   –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥...")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å frontend –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
                max_wait = 60  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                wait_interval = 5  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                waited = 0
                frontend_ready = False

                while waited < max_wait:
                    time.sleep(wait_interval)
                    waited += wait_interval

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ frontend –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
                    try:
                        import urllib.request
                        response = urllib.request.urlopen('http://localhost:3000', timeout=2)
                        if response.status == 200:
                            frontend_ready = True
                            print_success(f"‚úÖ Frontend –≥–æ—Ç–æ–≤–∏–π! (—á–µ—Ä–µ–∑ {waited} —Å–µ–∫—É–Ω–¥)")
                            break
                    except:
                        print(f"   ‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è... ({waited}/{max_wait} —Å–µ–∫—É–Ω–¥)")
                        continue

                if not frontend_ready:
                    print_warning(f"‚ö†Ô∏è Frontend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è {max_wait} —Å–µ–∫—É–Ω–¥, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")
                    print("   –ú–æ–∂–ª–∏–≤–æ frontend –≤—Å–µ —â–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ http://localhost:3000 –≤—Ä—É—á–Ω—É.")

                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
                time.sleep(3)

                # –í–ê–ñ–õ–ò–í–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ nginx –ü–Ü–°–õ–Ø –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                print("üåê –ó–∞–ø—É—Å–∫ Nginx (reverse proxy) –ü–Ü–°–õ–Ø –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
                try:
                    nginx_result = subprocess.run(
                        "docker-compose up -d nginx",
                        shell=True,
                        capture_output=True,
                        text=True,
                        timeout=30
                    )

                    if nginx_result.returncode == 0:
                        print_success("‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω–æ")
                        time.sleep(3)  # –î–∞—î–º–æ nginx —á–∞—Å –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                    else:
                        print_warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–ø—É—Å–∫–æ–º Nginx")
                        if nginx_result.stderr:
                            print(f"–ü–æ–º–∏–ª–∫–∞ Nginx: {nginx_result.stderr}")

                except Exception as e:
                    print_warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Nginx: {e}")

                # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –í–°–Ü —Å–µ—Ä–≤—ñ—Å–∏ –≤–∫–ª—é—á–∞—é—á–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ü nginx
                print("üîç –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –í–°–Ü–• —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ Nginx)...")
                all_services_healthy = check_services_health("local")

                if all_services_healthy:
                    print_success("üéâ –í–°–Ü –°–ï–†–í–Ü–°–ò –ì–û–¢–û–í–Ü! –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞!")
                    print()
                    print("üåê " + "="*60)
                    print("üöÄ AutoRia Clone –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
                    print("üîó –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–ø—Ä—è–º–æ): http://localhost:3000")
                    print("üîó –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (—á–µ—Ä–µ–∑ Nginx): http://localhost")
                    print("="*63)
                    print()
                    print("üìã Backend —Å–µ—Ä–≤—ñ—Å–∏ (—á–µ—Ä–µ–∑ Docker + Nginx):")
                    print("   - http://localhost/api/ - Backend API")
                    print("   - http://localhost/admin/ - Django Admin")
                    print("   - http://localhost/rabbitmq/ - RabbitMQ Management")
                    print("   - http://localhost/flower/ - Celery Flower")
                    print("   - http://localhost/redis/ - Redis Insight")
                    print()
                    print("üí° –§—Ä–æ–Ω—Ç–µ–Ω–¥: –ª–æ–∫–∞–ª—å–Ω–æ –≤ production —Ä–µ–∂–∏–º—ñ (–ø–æ—Ä—Ç 3000)")
                    print("üí° Backend: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ + Nginx reverse proxy")
                    print("üí° Nginx: –ø—Ä–æ–∫—Å—É—î –∑–∞–ø–∏—Ç–∏ –º—ñ–∂ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º —ñ –±–µ–∫–µ–Ω–¥–æ–º")
                else:
                    print_warning("‚ö†Ô∏è –î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ. –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.")
                    print("‚ùå –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ï –ù–ê–î–ê–Æ–¢–¨–°–Ø - –ù–ï –í–°–Ü –°–ï–†–í–Ü–°–ò –ì–û–¢–û–í–Ü!")
                    print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.")
            else:
                print_error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!")
                print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Ä—É—á–Ω—É: npm run start")
        else:  # frontend_mode == "docker"
            print("üê≥ –†–µ–∂–∏–º: –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ")

            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ
            print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker...")
            try:
                result = subprocess.run(
                    "docker-compose up -d frontend",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=60
                )

                if result.returncode == 0:
                    print_success("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ")
                else:
                    print_warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–ø—É—Å–∫–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
                    if result.stderr:
                        print(f"–ü–æ–º–∏–ª–∫–∞: {result.stderr}")

            except Exception as e:
                print_warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")

            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ Docker...")
            wait_time = 20
            for i in range(wait_time):
                progress = (i + 1) / wait_time * 100
                print(f"\r‚è≥ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {i+1}/{wait_time} —Å–µ–∫ ({progress:.0f}%)", end="", flush=True)
                time.sleep(1)
            print()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ nginx –ü–Ü–°–õ–Ø –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑ —Ü–∏–∫–ª—ñ—á–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
            print("üåê –ó–∞–ø—É—Å–∫ Nginx (reverse proxy) –ü–Ü–°–õ–Ø –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
            nginx_healthy = start_nginx_with_retry()

            # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –í–°–Ü–• —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤–∫–ª—é—á–∞—é—á–∏ nginx
            print("üîç –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –í–°–Ü–• —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ Nginx)...")
            all_services_healthy = check_services_health("docker")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∞—Ü—é—î nginx —Ö–æ—á–∞ –± —á–∞—Å—Ç–∫–æ–≤–æ
            nginx_running = False
            try:
                nginx_status = subprocess.run(
                    "docker ps --filter name=nginx --format '{{.Status}}'",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                nginx_running = "Up" in nginx_status.stdout
            except:
                pass

            # –ù–∞–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å
            if all_services_healthy:
                print_success("üéâ –í–°–Ü –°–ï–†–í–Ü–°–ò –ì–û–¢–û–í–Ü! –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞!")
                print()
                print("üåê " + "="*60)
                print("üöÄ AutoRia Clone –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
                print("üîó –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: http://localhost")
                print("üîó –§—Ä–æ–Ω—Ç–µ–Ω–¥ (–ø—Ä—è–º–æ): http://localhost:3000")
                print("="*63)
                print()
                print("üìã –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏:")
                print("   - http://localhost/api/ - Backend API")
                print("   - http://localhost/admin/ - Django Admin")
                print("   - http://localhost/rabbitmq/ - RabbitMQ Management")
                print("   - http://localhost/flower/ - Celery Flower")
                print("   - http://localhost/redis/ - Redis Insight")
                print()
                print("üí° –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö")
            elif nginx_running:
                print_warning("‚ö†Ô∏è –î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –º–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ health check, –∞–ª–µ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î!")
                print()
                print("üåê " + "="*60)
                print("üöÄ AutoRia Clone –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
                print("üîó –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: http://localhost")
                print("üîó –§—Ä–æ–Ω—Ç–µ–Ω–¥ (–ø—Ä—è–º–æ): http://localhost:3000")
                print("="*63)
                print()
                print("üìã –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏:")
                print("   - http://localhost/api/ - Backend API")
                print("   - http://localhost/admin/ - Django Admin")
                print("   - http://localhost/rabbitmq/ - RabbitMQ Management")
                print("   - http://localhost/flower/ - Celery Flower")
                print("   - http://localhost/redis/ - Redis Insight")
                print()
                print("‚ö†Ô∏è –ü—Ä–∏–º—ñ—Ç–∫–∞: –î–µ—è–∫—ñ health check –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç—å, –∞–ª–µ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å")
                print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ —è–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º–∏")
            else:
                print_warning("‚ö†Ô∏è –î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ. –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.")
                print("‚ùå –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ï –ù–ê–î–ê–Æ–¢–¨–°–Ø - –ù–ï –í–°–Ü –°–ï–†–í–Ü–°–ò –ì–û–¢–û–í–Ü!")
                print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.")

    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º{Colors.ENDC}")
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        sys.exit(130)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–¥ –≤–∏—Ö–æ–¥—É –¥–ª—è Ctrl+C
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()

