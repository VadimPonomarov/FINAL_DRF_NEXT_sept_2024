#!/usr/bin/env python3
"""
‚ö° –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –î–ï–ü–õ–û–ô AutoRia Clone - Frontend –õ–û–ö–ê–õ–¨–ù–û
========================================================

–ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É:
- Backend —Ç–∞ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏: –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
- Frontend: –ª–æ–∫–∞–ª—å–Ω–æ (—Ç—Ä–µ–±—É—î Node.js/npm –Ω–∞ —Ö–æ—Å—Ç–µ)

üéØ –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
    python deploy-frontend-local.py                # ‚úÖ –ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º
    python deploy-frontend-local.py --skip-docker  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ docker-compose up --build

üöÄ –ß–¢–û –î–ï–õ–ê–Ñ –°–ö–†–ò–ü–¢:
‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ (Node.js, npm, Docker)
‚úÖ –ó–∞–ø—É—Å–∫–∞—î docker-compose.local.yml up --build (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
‚úÖ –û—á—ñ–∫—É—î healthy —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ frontend –ª–æ–∫–∞–ª—å–Ω–æ (npm install)
‚úÖ –ó–±–∏—Ä–∞—î frontend –ª–æ–∫–∞–ª—å–Ω–æ (npm run build)
‚úÖ –ó–∞–ø—É—Å–∫–∞—î frontend —Å–µ—Ä–≤–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ (npm run start)
‚úÖ –í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
"""

import os
import sys
import subprocess
import time
import argparse
from pathlib import Path
from dotenv import load_dotenv

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_step(step, message):
    """–í–∏–≤–æ–¥–∏—Ç—å –∫—Ä–æ–∫ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    print(f"{Colors.OKBLUE}[–ö–†–û–ö {step}]{Colors.ENDC} {Colors.BOLD}{message}{Colors.ENDC}")

def print_success(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    print(f"{Colors.OKGREEN}[OK] {message}{Colors.ENDC}")

def print_warning(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    print(f"{Colors.WARNING}[WARNING] {message}{Colors.ENDC}")

def print_error(message):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    print(f"{Colors.FAIL}[ERROR] {message}{Colors.ENDC}")

def wait_for_all_containers_healthy(timeout=600):
    """–û—á—ñ–∫—É—î –ø–æ–∫–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑ healthcheck —Å—Ç–∞–Ω—É—Ç—å healthy"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è healthy —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑ healthcheck –∑ docker-compose.yml
    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ —ñ–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ docker-compose ps
    compose_file = "docker-compose.yml"
    service_to_container = {}
    
    try:
        result = subprocess.run(
            ["docker-compose", "-f", compose_file, "ps", "--format", "json"],
            capture_output=True,
            text=True,
            timeout=10
        )
        if result.returncode == 0:
            import json
            containers_json = result.stdout.strip()
            if containers_json:
                # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–ø–∞–¥–æ–∫ –∫–æ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ JSON –∞–±–æ –º–∞—Å–∏–≤
                if containers_json.startswith('['):
                    containers = json.loads(containers_json)
                else:
                    # –ú–æ–∂–µ –±—É—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ JSON, –æ–¥–∏–Ω –Ω–∞ —Ä—è–¥–æ–∫
                    containers = []
                    for line in containers_json.split('\n'):
                        line = line.strip()
                        if line:
                            try:
                                containers.append(json.loads(line))
                            except:
                                pass
                
                for container in containers:
                    service_name = container.get("Service", "")
                    container_name = container.get("Name", "")
                    if service_name and container_name:
                        service_to_container[service_name] = container_name
                        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {service_name} -> {container_name}")
    except Exception as e:
        print_warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {e}")
    
    # –ú–∞–ø–ø—ñ–Ω–≥ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –Ω–∞ container_name (—è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ docker-compose ps)
    default_container_names = {
        "pg": "pg",
        "redis": "redis",
        "rabbitmq": "rabbitmq",
        "celery-worker": "celery-worker",
        "mailing": "mailing",
        "nginx": "nginx"
    }
    
    # –°–µ—Ä–≤—ñ—Å–∏ –∑ healthcheck –∑ docker-compose.yml
    services_with_healthcheck = [
        "pg",           # PostgreSQL
        "redis",        # Redis
        "rabbitmq",     # RabbitMQ
        "app",         # Django Backend
        "celery-worker", # Celery Worker
        "mailing",     # Mailing Service
        "nginx"        # Nginx
    ]
    
    # –°–µ—Ä–≤—ñ—Å–∏, –¥–ª—è —è–∫–∏—Ö running –¥–æ—Å—Ç–∞—Ç–Ω—å–æ (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å)
    services_optional_health = {"mailing", "nginx"}
    
    # –°–ø–æ—á–∞—Ç–∫—É —à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —á–∏ –≤—Å—ñ –≤–∂–µ healthy
    print("üîç –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    all_already_healthy = True
    initial_status = {}
    
    for service in services_with_healthcheck:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_name = service_to_container.get(service) or default_container_names.get(service) or service
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ health —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ docker inspect
            result = subprocess.run(
                ["docker", "inspect", "--format", "{{.State.Health.Status}}", container_name],
                capture_output=True,
                text=True,
                timeout=3
            )
            
            if result.returncode == 0:
                health_status = result.stdout.strip().lower()
                
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –±–µ–∑ healthcheck - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–æ–Ω–∏ running
                if not health_status:
                    status_result = subprocess.run(
                        ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                        capture_output=True,
                        text=True,
                        timeout=3
                    )
                    if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                        initial_status[service] = "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ (–±–µ–∑ healthcheck)"
                        continue
                    else:
                        all_already_healthy = False
                        initial_status[service] = "‚è≥ –ù–µ –∑–∞–ø—É—â–µ–Ω–æ"
                        continue
                
                if health_status == "healthy":
                    initial_status[service] = "‚úÖ Healthy"
                elif health_status == "unhealthy":
                    # –î–ª—è –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–æ–Ω–∏ running
                    if service in services_optional_health:
                        status_result = subprocess.run(
                            ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                            capture_output=True,
                            text=True,
                            timeout=3
                        )
                        if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                            initial_status[service] = "‚úÖ Running (healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å, –∞–ª–µ —Å–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î)"
                            # –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ all_already_healthy = False –¥–ª—è –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö
                        else:
                            all_already_healthy = False
                            initial_status[service] = "‚ùå Unhealthy"
                    else:
                        all_already_healthy = False
                        initial_status[service] = "‚ùå Unhealthy"
                else:
                    all_already_healthy = False
                    initial_status[service] = f"‚è≥ {health_status}"
            else:
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
                all_already_healthy = False
                initial_status[service] = "‚è≥ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        except:
            all_already_healthy = False
            initial_status[service] = "‚è≥ –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:")
    for service, status in initial_status.items():
        print(f"   {status} - {service}")
    
    # –Ø–∫—â–æ –≤—Å—ñ –≤–∂–µ healthy - –æ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è
    if all_already_healthy:
        print_success("\n‚úÖ –í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –≤–∂–µ healthy! –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.")
        return True
    
    # –Ü–Ω–∞–∫—à–µ —á–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≤—Å—ñ —Å—Ç–∞–Ω—É—Ç—å healthy
    print("\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–∫–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Å—Ç–∞–Ω—É—Ç—å healthy...")
    start_time = time.time()
    checked_services = set()
    
    while time.time() - start_time < timeout:
        all_healthy = True
        current_status = {}
        
        for service in services_with_healthcheck:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container_name = service_to_container.get(service) or default_container_names.get(service) or service
            
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ health —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ docker inspect
                result = subprocess.run(
                    ["docker", "inspect", "--format", "{{.State.Health.Status}}", container_name],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                
                if result.returncode == 0:
                    health_status = result.stdout.strip().lower()
                    
                    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –±–µ–∑ healthcheck –º–æ–∂—É—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∑–∞–≥–∞–ª—ñ —ñ—Å–Ω—É—î —ñ running
                    if not health_status:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        status_result = subprocess.run(
                            ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                            capture_output=True,
                            text=True,
                            timeout=5
                        )
                        if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                            current_status[service] = "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ (–±–µ–∑ healthcheck)"
                            if service not in checked_services:
                                checked_services.add(service)
                            continue
                        else:
                            all_healthy = False
                            current_status[service] = "‚è≥ –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è..."
                            continue
                    
                    if health_status == "healthy":
                        if service not in checked_services:
                            print_success(f"‚úÖ {service}: —Å—Ç–∞–≤ healthy")
                            checked_services.add(service)
                        current_status[service] = "‚úÖ Healthy"
                    elif health_status == "unhealthy":
                        # –î–ª—è –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–æ–Ω–∏ running
                        if service in services_optional_health:
                            status_result = subprocess.run(
                                ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                                capture_output=True,
                                text=True,
                                timeout=5
                            )
                            if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                                if service not in checked_services:
                                    print_warning(f"‚ö†Ô∏è {service}: running, –∞–ª–µ healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ)")
                                    checked_services.add(service)
                                current_status[service] = "‚úÖ Running (healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å)"
                                # –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ all_healthy = False –¥–ª—è –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö
                            else:
                                all_healthy = False
                                current_status[service] = "‚ùå Unhealthy"
                        else:
                            all_healthy = False
                            current_status[service] = "‚ùå Unhealthy"
                    elif health_status in ["starting", ""]:
                        all_healthy = False
                        current_status[service] = "‚è≥ –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è..."
                    else:
                        all_healthy = False
                        current_status[service] = f"‚è≥ {health_status}"
                else:
                    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
                    all_healthy = False
                    current_status[service] = "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
                    
            except subprocess.TimeoutExpired:
                all_healthy = False
                current_status[service] = "‚è≥ –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
            except Exception as e:
                all_healthy = False
                current_status[service] = f"‚è≥ –ü–æ–º–∏–ª–∫–∞: {str(e)[:20]}"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        elapsed = int(time.time() - start_time)
        waiting_services = [f"{k}" for k, v in current_status.items() if "‚è≥" in v or "‚ùå" in v]
        if waiting_services:
            print(f"\r‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ({elapsed}/{timeout}—Å): {', '.join(waiting_services[:3])}", end="", flush=True)
        else:
            print(f"\r‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ({elapsed}/{timeout}—Å)...", end="", flush=True)
        
        if all_healthy:
            print(f"\n‚úÖ –í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ healthy! (–∑–∞ {elapsed} —Å–µ–∫—É–Ω–¥)")
            return True
        
        time.sleep(5)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    
    print(f"\n‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ({timeout}—Å). –î–µ—è–∫—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ.")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:")
    for service in services_with_healthcheck:
        container_name = service_to_container.get(service) or default_container_names.get(service) or service
        try:
            result = subprocess.run(
                ["docker", "inspect", "--format", "{{.State.Health.Status}}", container_name],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                health_status = result.stdout.strip()
                status_icon = "‚úÖ" if health_status.lower() == "healthy" else "‚ùå" if health_status.lower() == "unhealthy" else "‚è≥"
                print(f"   {status_icon} {service}: {health_status or '–±–µ–∑ healthcheck'}")
        except:
            print(f"   ‚ùì {service}: –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏")
    
    return False

def run_command(command, cwd=None, check=True, capture_output=False):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        if capture_output:
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check,
                capture_output=True,
                text=True
            )
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–≤—ñ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
            print(f"–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è: {command}")
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check
            )
        return result
    except subprocess.CalledProcessError as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command}")
        print_error(f"–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: {e.returncode}")
        if capture_output:
            print_error(f"–í–∏–≤—ñ–¥: {e.stdout}")
            print_error(f"–ü–æ–º–∏–ª–∫–∏: {e.stderr}")
        return None

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥...")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
    result = run_command("node --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Node.js: {result.stdout.strip()}")
    else:
        print_error("Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js 18+")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
    result = run_command("npm --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"npm: {result.stdout.strip()}")
    else:
        print_error("npm –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    result = run_command("docker --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Docker: {result.stdout.strip()}")
    else:
        print_error("Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    print_success("–í—Å—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
    return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–ª–æ–Ω–∏–≤–∞–Ω–Ω—è –∑ Git"""
    try:
        # –ü–∞—Ä—Å—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        parser = argparse.ArgumentParser(description='AutoRia Clone Deploy Script')
        parser.add_argument('--skip-docker', action='store_true',
                          help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ docker-compose up --build (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)')

        args = parser.parse_args()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è Windows
        if sys.platform == "win32":
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

        print(f"{Colors.HEADER}{Colors.BOLD}")
        print("=" * 70)
        print("–ü–û–í–ù–ò–ô –ü–†–û–¶–ï–° –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø AutoRia Clone")
        print("=" * 70)
        print("üöÄ –ï–ú–£–õ–Ø–¶–Ü–Ø –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ü–Ü–°–õ–Ø GIT CLONE")
        print(f"{Colors.ENDC}")
        print()

        print("üìã –ü–ª–∞–Ω —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:")
        print("   1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥")
        print("   2Ô∏è‚É£  docker-compose.local.yml up --build (–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è)")
        print("   3Ô∏è‚É£  –û—á—ñ–∫—É–≤–∞–Ω–Ω—è healthy —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
        print("   4Ô∏è‚É£  cd frontend && npm install (–ª–æ–∫–∞–ª—å–Ω–æ)")
        print("   5Ô∏è‚É£  npm run build (–ª–æ–∫–∞–ª—å–Ω–æ)")
        print("   6Ô∏è‚É£  npm run start (–ª–æ–∫–∞–ª—å–Ω–æ, –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ)")
        print("   7Ô∏è‚É£  –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏")
        print()

        # –ï–¢–ê–ü 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
        print_step(1, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥")
        if not check_requirements():
            print_error("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            sys.exit(1)

        # –ï–¢–ê–ü 2: docker-compose up --build (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        if not args.skip_docker:
            print_step(2, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ docker-compose.local.yml up --build")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –≤–∂–µ
            compose_file = "docker-compose.yml"
            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
            try:
                result = subprocess.run(
                    ["docker-compose", "-f", compose_file, "ps", "-q"],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                has_containers = bool(result.stdout.strip())
                
                if has_containers:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ healthy
                    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ healthy —Å—Ç–∞—Ç—É—Å—É —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
                    if wait_for_all_containers_healthy(timeout=30):
                        print_success("‚úÖ –í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω—ñ —ñ healthy! –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ docker-compose.local.yml up --build")
                        skip_docker_build = True
                    else:
                        print_warning("‚ö†Ô∏è  –î–µ—è–∫—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–µ healthy, –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–∑–±—ñ—Ä–∫—É...")
                        skip_docker_build = False
                else:
                    skip_docker_build = False
            except:
                skip_docker_build = False
            
            if not skip_docker_build:
                print("üî® –ó–∞–ø—É—Å–∫ –∑–±—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
                print("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 5-10 —Ö–≤–∏–ª–∏–Ω...")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ docker-compose.local.yml up --build
                compose_file = "docker-compose.yml"
                process = subprocess.Popen(
                    ["docker-compose", "-f", compose_file, "up", "--build", "-d"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–≤—ñ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
                for line in iter(process.stdout.readline, ''):
                    if line:
                        print(f"   {line.rstrip()}")
                
                return_code = process.wait()
                
                if return_code != 0:
                    print_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ docker-compose up --build (–∫–æ–¥: {return_code})")
                    sys.exit(1)
                
                print_success("‚úÖ docker-compose.local.yml up --build –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            print_warning("‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ docker-compose.local.yml up --build (--skip-docker)")

        # –ï–¢–ê–ü 3: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è healthy —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
        print_step(3, "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è healthy —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")
        if not wait_for_all_containers_healthy(timeout=600):  # 10 —Ö–≤–∏–ª–∏–Ω –º–∞–∫—Å–∏–º—É–º
            print_warning("‚ö†Ô∏è  –î–µ—è–∫—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–µ —Å—Ç–∞–ª–∏ healthy, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")

        # –ï–¢–ê–ü 4: –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥ frontend —Ç–∞ npm install
        print_step(4, "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π frontend (npm install)")
        frontend_dir = Path("frontend")
        
        if not frontend_dir.exists():
            print_error("‚ùå –ö–∞—Ç–∞–ª–æ–≥ frontend –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            sys.exit(1)
        
        print(f"üìÇ –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥: {frontend_dir}")
        print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (npm install)...")
        
        result = run_command(
            "npm install --legacy-peer-deps",
            cwd=frontend_dir,
            capture_output=False
        )
        
        if not result or (hasattr(result, 'returncode') and result.returncode != 0):
            print_error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ npm install!")
            sys.exit(1)
        
        print_success("‚úÖ npm install –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

        # –ï–¢–ê–ü 5: npm run build
        print_step(5, "–ó–±—ñ—Ä–∫–∞ frontend (npm run build)")
        print("üî® –ó–∞–ø—É—Å–∫ –∑–±—ñ—Ä–∫–∏ frontend...")
        print("‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 2-3 —Ö–≤–∏–ª–∏–Ω–∏...")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ env-config/ –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é
        root_dir = Path.cwd()
        env_files = [
            root_dir / "env-config" / ".env.base",
            root_dir / "env-config" / ".env.secrets",
            root_dir / "env-config" / ".env.local",
        ]
        
        print("üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –∑ env-config/...")
        for env_file in env_files:
            if env_file.exists():
                load_dotenv(env_file, override=True)
                print(f"   ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {env_file.name}")
            else:
                print(f"   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {env_file.name}")
        
        # –ö–æ–ø—ñ—é—î–º–æ env –¥–ª—è –∑–±—ñ—Ä–∫–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
        env = os.environ.copy()
        env['NODE_ENV'] = 'production'
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
        if 'NEXT_PUBLIC_BACKEND_URL' not in env or not env['NEXT_PUBLIC_BACKEND_URL']:
            env['NEXT_PUBLIC_BACKEND_URL'] = 'http://localhost/api'
            print_warning("‚ö†Ô∏è  NEXT_PUBLIC_BACKEND_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: http://localhost/api")
        
        if 'BACKEND_URL' not in env or not env['BACKEND_URL']:
            env['BACKEND_URL'] = 'http://localhost:8000'
            print_warning("‚ö†Ô∏è  BACKEND_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: http://localhost:8000")
        
        if 'IS_DOCKER' not in env:
            env['IS_DOCKER'] = 'false'
        
        if 'NEXT_PUBLIC_IS_DOCKER' not in env:
            env['NEXT_PUBLIC_IS_DOCKER'] = 'false'
        
        # –í–∏–≤–æ–¥–∏–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        print("\nüîß –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è –∑–±—ñ—Ä–∫–∏:")
        print(f"   NODE_ENV: {env.get('NODE_ENV', 'NOT_SET')}")
        print(f"   NEXT_PUBLIC_BACKEND_URL: {env.get('NEXT_PUBLIC_BACKEND_URL', 'NOT_SET')}")
        print(f"   BACKEND_URL: {env.get('BACKEND_URL', 'NOT_SET')}")
        print(f"   IS_DOCKER: {env.get('IS_DOCKER', 'NOT_SET')}")
        print(f"   NEXT_PUBLIC_IS_DOCKER: {env.get('NEXT_PUBLIC_IS_DOCKER', 'NOT_SET')}")
        print()
        
        process = subprocess.Popen(
            "npm run build",
            shell=True,
            cwd=frontend_dir,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–≤—ñ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
        for line in iter(process.stdout.readline, ''):
            if line:
                print(f"   {line.rstrip()}")
        
        return_code = process.wait()
        
        if return_code != 0:
            print_error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ npm run build!")
            sys.exit(1)
        
        print_success("‚úÖ npm run build –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

        # –ï–¢–ê–ü 6: npm run start (–≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ)
        print_step(6, "–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞ (npm run start)")
        print("üöÄ –ó–∞–ø—É—Å–∫ frontend –≤ production —Ä–µ–∂–∏–º—ñ...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π –ø–æ—Ä—Ç 3000
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—É 3000...")
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        port_in_use = (sock.connect_ex(('localhost', 3000)) == 0)
        sock.close()
        
        if port_in_use:
            print_warning("‚ö†Ô∏è  –ü–æ—Ä—Ç 3000 –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π! –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å...")
            try:
                # –ù–∞ Windows –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ netstat —Ç–∞ taskkill
                if sys.platform == 'win32':
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ PID –ø—Ä–æ—Ü–µ—Å—É –Ω–∞ –ø–æ—Ä—Ç—É 3000
                    result = subprocess.run(
                        'netstat -ano | findstr :3000 | findstr LISTENING',
                        shell=True,
                        capture_output=True,
                        text=True
                    )
                    if result.stdout:
                        # –í–∏—Ç—è–≥—É—î–º–æ PID
                        parts = result.stdout.strip().split()
                        if parts:
                            pid = parts[-1]
                            subprocess.run(f'taskkill /F /PID {pid}', shell=True, capture_output=True)
                            print(f"   –ó—É–ø–∏–Ω–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å –∑ PID {pid}")
                            time.sleep(2)
                else:
                    # –ù–∞ Linux/Mac –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ lsof —Ç–∞ kill
                    subprocess.run('lsof -ti:3000 | xargs kill -9', shell=True, capture_output=True)
                    time.sleep(2)
            except:
                pass
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ env-config/ –¥–ª—è –∑–∞–ø—É—Å–∫—É
        print("üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø—É—Å–∫—É frontend...")
        root_dir = Path.cwd()
        env_files = [
            root_dir / "env-config" / ".env.base",
            root_dir / "env-config" / ".env.secrets",
            root_dir / "env-config" / ".env.local",
        ]
        
        for env_file in env_files:
            if env_file.exists():
                load_dotenv(env_file, override=True)
        
        env = os.environ.copy()
        env['NODE_ENV'] = 'production'
        env['IS_DOCKER'] = 'false'
        env['NEXT_PUBLIC_IS_DOCKER'] = 'false'
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
        if 'NEXT_PUBLIC_BACKEND_URL' not in env or not env['NEXT_PUBLIC_BACKEND_URL']:
            env['NEXT_PUBLIC_BACKEND_URL'] = 'http://localhost/api'
            print_warning("‚ö†Ô∏è  NEXT_PUBLIC_BACKEND_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: http://localhost/api")
        
        if 'BACKEND_URL' not in env or not env['BACKEND_URL']:
            env['BACKEND_URL'] = 'http://localhost:8000'
            print_warning("‚ö†Ô∏è  BACKEND_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: http://localhost:8000")
        
        # –í–∏–≤–æ–¥–∏–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        print("üîß –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø—É—Å–∫—É:")
        print(f"   NODE_ENV: {env.get('NODE_ENV', 'NOT_SET')}")
        print(f"   NEXT_PUBLIC_BACKEND_URL: {env.get('NEXT_PUBLIC_BACKEND_URL', 'NOT_SET')}")
        print(f"   BACKEND_URL: {env.get('BACKEND_URL', 'NOT_SET')}")
        print(f"   IS_DOCKER: {env.get('IS_DOCKER', 'NOT_SET')}")
        print(f"   NEXT_PUBLIC_IS_DOCKER: {env.get('NEXT_PUBLIC_IS_DOCKER', 'NOT_SET')}")
        print()
        
        print("üî® –ó–∞–ø—É—Å–∫ npm run start...")
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ, –∞–ª–µ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –±–∞—á–∏—Ç–∏ –≤–∏–≤—ñ–¥
        # –ù–∞ Windows –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CREATE_NEW_PROCESS_GROUP
        creationflags = 0
        if sys.platform == 'win32':
            creationflags = subprocess.CREATE_NEW_PROCESS_GROUP
        
        frontend_process = subprocess.Popen(
            "npm run start",
            shell=True,
            cwd=frontend_dir,
            env=env,
            stdin=subprocess.DEVNULL,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            creationflags=creationflags
        )
        
        print_success(f"‚úÖ –ü—Ä–æ—Ü–µ—Å frontend –∑–∞–ø—É—â–µ–Ω–æ (PID: {frontend_process.pid})")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ—Ü–µ—Å –¥—ñ–π—Å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è
        time.sleep(2)
        if frontend_process.poll() is not None:
            # –ü—Ä–æ—Ü–µ—Å –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è - —Ü–µ –ø–æ–≥–∞–Ω–æ
            print_error(f"‚ùå –ü—Ä–æ—Ü–µ—Å frontend –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –≤—ñ–¥—Ä–∞–∑—É! (–∫–æ–¥: {frontend_process.returncode})")
            try:
                output = frontend_process.stdout.read().decode('utf-8', errors='ignore')
                if output:
                    print(f"–í–∏–≤—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É:\n{output[:500]}")
            except:
                pass
            sys.exit(1)
        
        # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ frontend –∑ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ frontend (–¥–æ 90 —Å–µ–∫—É–Ω–¥)...")
        max_wait = 90
        wait_interval = 3
        waited = 0
        frontend_ready = False
        
        while waited < max_wait:
            time.sleep(wait_interval)
            waited += wait_interval
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ—Ü–µ—Å —â–µ –ø—Ä–∞—Ü—é—î
            if frontend_process.poll() is not None:
                print_error(f"‚ùå –ü—Ä–æ—Ü–µ—Å frontend –∑–∞–≤–µ—Ä—à–∏–≤—Å—è! (–∫–æ–¥: {frontend_process.returncode})")
                try:
                    output = frontend_process.stdout.read().decode('utf-8', errors='ignore')
                    if output:
                        print(f"–û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–≤—ñ–¥:\n{output[-500:]}")
                except:
                    pass
                sys.exit(1)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ HTTP
            try:
                import urllib.request
                response = urllib.request.urlopen('http://localhost:3000', timeout=3)
                if response.getcode() == 200:
                    frontend_ready = True
                    print_success(f"‚úÖ Frontend –≥–æ—Ç–æ–≤–∏–π —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î! (—á–µ—Ä–µ–∑ {waited} —Å–µ–∫—É–Ω–¥)")
                    break
            except urllib.error.URLError:
                pass  # –°–µ—Ä–≤–µ—Ä —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π
            except Exception as e:
                pass  # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ socket (—à–≤–∏–¥—à–µ –Ω—ñ–∂ HTTP)
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                port_open = (sock.connect_ex(('localhost', 3000)) == 0)
                sock.close()
                if port_open:
                    print(f"   ‚úÖ –ü–æ—Ä—Ç 3000 –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ HTTP... ({waited}/{max_wait}—Å)")
                else:
                    print(f"   ‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä—Ç—É 3000... ({waited}/{max_wait}—Å)")
            except:
                print(f"   ‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è... ({waited}/{max_wait}—Å)")
        
        if not frontend_ready:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è–º –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            try:
                import urllib.request
                response = urllib.request.urlopen('http://localhost:3000', timeout=3)
                if response.getcode() == 200:
                    frontend_ready = True
                    print_success("‚úÖ Frontend –≥–æ—Ç–æ–≤–∏–π!")
            except:
                pass
            
            if not frontend_ready:
                print_warning(f"‚ö†Ô∏è Frontend –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è {max_wait} —Å–µ–∫—É–Ω–¥")
                print(f"   –ü—Ä–æ—Ü–µ—Å –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—î (PID: {frontend_process.pid})")
                print("   –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ http://localhost:3000 –≤—Ä—É—á–Ω—É")

        # –ï–¢–ê–ü 7: –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
        print_step(7, "–í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏")
        
        print()
        print("="*70)
        print(f"{Colors.OKGREEN}{Colors.BOLD}üéâ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!{Colors.ENDC}")
        print("="*70)
        print()
        print(f"{Colors.BOLD}üåê AutoRia Clone –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}üåü –û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:{Colors.ENDC}")
        print(f"   üîó –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (—á–µ—Ä–µ–∑ Nginx): {Colors.OKBLUE}http://localhost{Colors.ENDC}")
        print(f"   üîó Frontend (–Ω–∞–ø—Ä—è–º—É): {Colors.OKBLUE}http://localhost:3000{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}üìã Backend —Å–µ—Ä–≤—ñ—Å–∏:{Colors.ENDC}")
        print(f"   üîó Backend API: {Colors.OKBLUE}http://localhost:8000/api/{Colors.ENDC}")
        print(f"   üîó API Docs (Swagger): {Colors.OKBLUE}http://localhost:8000/api/docs/{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}‚öôÔ∏è  –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏:{Colors.ENDC}")
        print(f"   üîó RabbitMQ Management: {Colors.OKBLUE}http://localhost:15672{Colors.ENDC}")
        print(f"   üîó Celery Flower: {Colors.OKBLUE}http://localhost:5555{Colors.ENDC}")
        print(f"   üîó Redis Insight: {Colors.OKBLUE}http://localhost:5540{Colors.ENDC}")
        print(f"   üîó Mailing Service: {Colors.OKBLUE}http://localhost:8001{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}üí° –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤:{Colors.ENDC}")
        print(f"   ‚úÖ Frontend: –ª–æ–∫–∞–ª—å–Ω–æ –≤ production —Ä–µ–∂–∏–º—ñ (–ø–æ—Ä—Ç 3000)")
        print(f"   ‚úÖ Backend: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ (–ø–æ—Ä—Ç 8000)")
        print(f"   ‚úÖ Nginx: reverse proxy (–ø–æ—Ä—Ç 80)")
        print()
        print("="*70)
        print()
        print(f"{Colors.WARNING}üí° –ü—Ä–∏–º—ñ—Ç–∫–∞:{Colors.ENDC}")
        print(f"   - Frontend –ø—Ä–∞—Ü—é—î –≤ production —Ä–µ–∂–∏–º—ñ")
        print(f"   - –î–ª—è –∑—É–ø–∏–Ω–∫–∏ frontend –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –∞–±–æ –∑–Ω–∞–π–¥—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å (PID: {frontend_process.pid})")
        print(f"   - –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤ Docker: docker-compose -f docker-compose.local.yml logs -f")
        print()

    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º{Colors.ENDC}")
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        sys.exit(130)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–¥ –≤–∏—Ö–æ–¥—É –¥–ª—è Ctrl+C
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()

