#!/bin/bash

# =============================================================================
# AutoRia Clone - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —Å–∫—Ä–∏–ø—Ç (Shell –≤–µ—Ä—Å–∏—è)
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}${BOLD}[–ö–†–û–ö $1] $2${NC}"
}

print_success() {
    echo -e "${GREEN}[OK] $1${NC}"
}

print_error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
show_progress_bar() {
    local current=$1
    local total=$2
    local description=$3
    local width=50

    local percent=$((current * 100 / total))
    local filled=$((width * current / total))
    local empty=$((width - filled))

    local bar=""
    for ((i=0; i<filled; i++)); do bar+="‚ñà"; done
    for ((i=0; i<empty; i++)); do bar+="‚ñë"; done

    printf "\r${BLUE}[%s] %d%% %s${NC}" "$bar" "$percent" "$description"
    if [ $current -eq $total ]; then
        echo ""
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç—Ç–∞–ø–æ–≤
show_step_progress() {
    local step=$1
    local total_steps=$2
    local step_name=$3

    echo -e "\n${BLUE}============================================================${NC}"
    show_progress_bar $step $total_steps "–ï—Ç–∞–ø $step/$total_steps: $step_name"
    echo -e "${BLUE}============================================================${NC}"
}

run_docker_build_with_progress() {
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    declare -A services_progress
    declare -A services_status
    local services=("app" "frontend" "pg" "redis" "redis-insight" "rabbitmq" "celery-worker" "celery-beat" "flower" "mailing" "nginx")

    for service in "${services[@]}"; do
        services_progress[$service]=0
        services_status[$service]="‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è"
    done

    update_display() {
        echo -e "\nüì¶ –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤:"
        for service in "${services[@]}"; do
            local progress=${services_progress[$service]}
            local status="${services_status[$service]}"
            local bar=""

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            local filled=$((progress / 10))
            local empty=$((10 - filled))

            for ((i=0; i<filled; i++)); do
                bar+="‚ñà"
            done
            for ((i=0; i<empty; i++)); do
                bar+="‚ñë"
            done

            printf "üî® %-15s [%s] %3d%% %s\n" "$service" "$bar" "$progress" "$status"
        done

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤–≥–æ—Ä—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        echo -ne "\033[$(( ${#services[@]} + 2 ))A"
    }

    # –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    echo -e "\nüì¶ –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤:"
    for service in "${services[@]}"; do
        printf "üî® %-15s [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]   0%% ‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è\n" "$service"
    done

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ docker-compose build —É —Ñ–æ–Ω—ñ —Ç–∞ –ø–∞—Ä—Å–∏–º–æ –≤–∏–≤—ñ–¥
    docker-compose build --no-cache 2>&1 | while IFS= read -r line; do
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
        if [[ $line =~ \[([a-z-]+)[[:space:]]+[0-9]+/[0-9]+\] ]]; then
            current_service="${BASH_REMATCH[1]}"
            if [[ " ${services[*]} " =~ " ${current_service} " ]]; then
                services_status[$current_service]="üî® –ó–±—ñ—Ä–∫–∞..."
            fi
        fi

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –µ—Ç–∞–ø—ñ–≤
        if [[ -n "$current_service" ]] && [[ " ${services[*]} " =~ " ${current_service} " ]]; then
            if [[ $line =~ "FROM" ]]; then
                services_progress[$current_service]=10
            elif [[ $line =~ "WORKDIR"|"COPY" ]]; then
                services_progress[$current_service]=30
            elif [[ $line =~ "RUN" ]]; then
                services_progress[$current_service]=60
            elif [[ $line =~ "EXPOSE"|"CMD" ]]; then
                services_progress[$current_service]=90
            elif [[ $line =~ "Successfully built"|"Successfully tagged" ]]; then
                services_progress[$current_service]=100
                services_status[$current_service]="‚úÖ –ì–æ—Ç–æ–≤–æ"
            fi
        fi

        update_display
        sleep 0.1
    done

    # –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    echo -e "\n"
    for service in "${services[@]}"; do
        printf "üî® %-15s [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100%% ‚úÖ –ì–æ—Ç–æ–≤–æ\n" "$service"
    done

    return ${PIPESTATUS[0]}
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
check_requirements() {
    show_step_progress 1 4 "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
    show_progress_bar 1 4 "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js..."
    if ! command -v node &> /dev/null; then
        print_error "Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        return 1
    fi
    NODE_VERSION=$(node --version)
    print_success "Node.js: $NODE_VERSION"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
    show_progress_bar 2 4 "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm..."
    if ! command -v npm &> /dev/null; then
        print_error "npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        return 1
    fi
    NPM_VERSION=$(npm --version)
    print_success "npm: $NPM_VERSION"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    show_progress_bar 3 4 "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker..."
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        return 1
    fi
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    print_success "Docker: $DOCKER_VERSION"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ docker-compose
    show_progress_bar 4 4 "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ docker-compose..."
    if ! command -v docker-compose &> /dev/null; then
        print_error "docker-compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        return 1
    fi

    print_success "–í—Å—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ!"
    return 0
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
check_project_files() {
    show_step_progress 2 4 "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"

    local required_files=("docker-compose.yml" "backend/Dockerfile" "frontend/Dockerfile" "frontend/package.json")
    local missing_files=()

    for file in "${required_files[@]}"; do
        show_progress_bar $((${#missing_files[@]} + 1)) ${#required_files[@]} "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ $file..."
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done

    if [ ${#missing_files[@]} -gt 0 ]; then
        print_error "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏:"
        for file in "${missing_files[@]}"; do
            print_error "  - $file"
        done
        return 1
    fi

    print_success "–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—ñ–≤
    local env_files=("backend/.env" "frontend/.env.local")
    for env_file in "${env_files[@]}"; do
        if [ ! -f "$env_file" ]; then
            print_warning "–§–∞–π–ª –æ—Ç–æ—á–µ–Ω–Ω—è $env_file –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        else
            print_success "–§–∞–π–ª –æ—Ç–æ—á–µ–Ω–Ω—è $env_file –∑–Ω–∞–π–¥–µ–Ω–æ"
        fi
    done

    return 0
}

# –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
build_frontend() {
    show_step_progress 4 4 "–ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ PRODUCTION —Ä–µ–∂–∏–º—ñ"

    if [ ! -d "frontend" ]; then
        print_error "–ü–∞–ø–∫–∞ frontend –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!"
        return 1
    fi

    cd frontend

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    show_progress_bar 1 4 "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
    if ! npm install --legacy-peer-deps; then
        print_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ!"
        cd ..
        return 1
    fi
    print_success "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ"

    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000 –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é
    show_progress_bar 2 4 "üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000..."
    npm run kill 3000 2>/dev/null || true

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –∑–±—ñ—Ä–∫–∏
    show_progress_bar 3 4 "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –∑–±—ñ—Ä–∫–∏..."
    rm -rf .next

    # Production –∑–±—ñ—Ä–∫–∞
    show_progress_bar 4 4 "üî® –ó–±—ñ—Ä–∫–∞ –≤ production —Ä–µ–∂–∏–º—ñ..."
    if ! npm run build; then
        print_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!"
        cd ..
        return 1
    fi

    cd ..
    print_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑—ñ–±—Ä–∞–Ω–æ –≤ production —Ä–µ–∂–∏–º—ñ!"
    return 0
}

# –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend —Å–µ—Ä–≤–∏—Å–∞
comment_frontend_service() {
    local comment=$1
    local compose_file="docker-compose.yml"
    
    if [ ! -f "$compose_file" ]; then
        print_error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    if [ "$comment" = "true" ]; then
        echo "–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose.yml..."
        # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é frontend
        sed -i '/^  frontend:/,/^  [a-zA-Z]/ { /^  [a-zA-Z]/!s/^/  # /; /^  frontend:/s/^/  # / }' "$compose_file"
    else
        echo "–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose.yml..."
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é frontend
        sed -i '/^  # frontend:/,/^  [a-zA-Z]/ { /^  [a-zA-Z]/!s/^  # //; /^  # frontend:/s/^  # // }' "$compose_file"
    fi
    
    return 0
}

# –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑ –ø–æ–≤–Ω–æ—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ—é
deploy_docker_services() {
    local exclude_frontend=$1

    if [ "$exclude_frontend" = "true" ]; then
        show_step_progress 3 4 "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è backend —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker"
        echo "–ö–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è frontend —Å–µ—Ä–≤—ñ—Å—É –≤ docker-compose.yml..."
        comment_frontend_service true
    else
        show_step_progress 3 4 "–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤ Docker"
        echo "–†–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è frontend —Å–µ—Ä–≤—ñ—Å—É –≤ docker-compose.yml..."
        comment_frontend_service false
    fi

    if [ ! -f "docker-compose.yml" ]; then
        print_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        return 1
    fi

    # –ü–û–í–ù–ï –û–ß–ò–©–ï–ù–ù–Ø - –µ–º—É–ª—é—î–º–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑ –Ω—É–ª—è
    show_progress_bar 1 6 "üßπ –ó—É–ø–∏–Ω–∫–∞ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    docker-compose down --volumes --remove-orphans 2>/dev/null || true

    show_progress_bar 2 6 "üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –æ–±—Ä–∞–∑—ñ–≤..."
    docker image prune -f 2>/dev/null || true

    show_progress_bar 3 6 "üßπ –û—á–∏—â–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ç–æ–º—ñ–≤..."
    docker volume prune -f 2>/dev/null || true

    # –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê –ó–ë–Ü–†–ö–ê –í–°–Ü–• –ö–û–ù–¢–ï–ô–ù–ï–†–Ü–í –ó –ù–£–õ–Ø
    show_progress_bar 4 6 "üî® –ó–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ–±—Ä–∞–∑—ñ–≤..."

    echo -e "\nüì¶ –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤ (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω)..."

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    if ! run_docker_build_with_progress; then
        print_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ Docker –æ–±—Ä–∞–∑–∏!"
        return 1
    fi

    print_success "–í—Å—ñ –æ–±—Ä–∞–∑–∏ –∑—ñ–±—Ä–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!"

    show_progress_bar 5 6 "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."

    echo -e "\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑ –≤–∏–≤–æ–¥–æ–º
    if ! docker-compose up -d --force-recreate; then
        print_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker —Å–µ—Ä–≤—ñ—Å–∏!"
        return 1
    fi

    print_success "–í—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ!"

    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    show_progress_bar 6 6 "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."

    echo -e "\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
    local wait_time=20
    for i in $(seq 1 $wait_time); do
        show_progress_bar $i $wait_time "‚è≥ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ ($i/$wait_time —Å–µ–∫)"
        sleep 1
    done

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    echo -e "\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker-compose ps

    print_success "Docker —Å–µ—Ä–≤—ñ—Å–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ –∑ –Ω—É–ª—è!"
    return 0
}

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
start_local_frontend() {
    print_step 4 "–§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"

    cd frontend

    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000 –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    echo "–û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—É 3000..."
    npm run kill 3000 2>/dev/null || true

    echo "–ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º—ñ..."
    print_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É!"
    echo -e "${GREEN}${BOLD}–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...${NC}"

    # –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–±–ª–æ–∫—É—é—á–∏–π)
    npm run start
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤
check_services() {
    echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    echo "–ó–∞–ø—É—â–µ–Ω—ñ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:"
    docker-compose ps

    print_success "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}${BOLD}"
    echo "–ü–û–í–ù–ò–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –î–ï–ü–õ–û–ô AutoRia Clone"
    echo "=================================================="
    echo "üöÄ –ï–ú–£–õ–Ø–¶–Ü–Ø –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ó –ù–£–õ–Ø (—è–∫ –ø—ñ—Å–ª—è git clone)"
    echo -e "${NC}"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    local docker_frontend=false
    local local_frontend=true

    for arg in "$@"; do
        if [ "$arg" = "--docker" ]; then
            docker_frontend=true
            local_frontend=false
            break
        fi
    done

    if [ "$local_frontend" = "true" ]; then
        echo "–†–µ–∂–∏–º: Backend –≤ Docker + –õ–æ–∫–∞–ª—å–Ω–∏–π –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (–ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú)"
        echo "üìã –ü–ª–∞–Ω —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:"
        echo "   1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥"
        echo "   2Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"
        echo "   3Ô∏è‚É£  –ü–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤"
        echo "   4Ô∏è‚É£  –ó–±—ñ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ production —Ä–µ–∂–∏–º—ñ"
    else
        echo "–†–µ–∂–∏–º: –ü–æ–≤–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤ Docker (--docker)"
        echo "üìã –ü–ª–∞–Ω —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:"
        echo "   1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥"
        echo "   2Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"
        echo "   3Ô∏è‚É£  –ü–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö Docker —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    fi

    echo ""

    # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if ! check_requirements; then
        exit 1
    fi

    # –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    if ! check_project_files; then
        exit 1
    fi

    # –≠–¢–ê–ü 3: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker (–ü–ï–†–í–´–ú –î–ï–õ–û–ú!)
    if ! deploy_docker_services "$local_frontend"; then
        exit 1
    fi

    # –≠–¢–ê–ü 4: –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ production —Ä–µ–∂–∏–º–µ (–ü–û–°–õ–ï Docker)
    if [ "$local_frontend" = "true" ]; then
        if ! build_frontend; then
            exit 1
        fi
    fi
    
    # –≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    if [ "$local_frontend" = "true" ]; then
        echo ""
        print_success "–í—Å—ñ Docker —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ!"
        echo "–§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–¢–ê–ü: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        start_local_frontend
    else
        check_services
        echo ""
        print_success "–ü–û–í–ù–ò–ô –î–ï–ü–õ–û–ô –í DOCKER –ó–ê–í–ï–†–®–ï–ù–û!"
        echo "–î–æ—Å—Ç—É–ø–Ω—ñ URL:"
        echo "   - http://localhost - –ì–æ–ª–æ–≤–Ω–∏–π UI (—á–µ—Ä–µ–∑ nginx)"
        echo "   - http://localhost:3000 - Frontend (Docker)"
        echo "   - http://localhost/api/ - Backend API"
        echo "   - http://localhost/admin/ - Django Admin"
        echo "   - http://localhost/rabbitmq/ - RabbitMQ Management"
        echo "   - http://localhost/flower/ - Celery Flower"
        echo "   - http://localhost/redis/ - Redis Insight"
    fi
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
main "$@"
