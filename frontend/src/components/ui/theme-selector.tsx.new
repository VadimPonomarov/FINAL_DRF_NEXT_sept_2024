"use client"

import * as React from "react"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Palette } from "lucide-react"

const themes = {
  orange: {
    name: "Orange",
    light: {
      primary: "25 100% 50%", // оранжевый
      secondary: "25 30% 95%", // светло-оранжевый
      accent: "25 100% 50%", // оранжевый
      destructive: "0 84.2% 60.2%",
      text: "25 100% 50%", // оранжевый
      dropdown: "0 0% 100%", // белый для светлой темы
      "dropdown-text": "25 100% 50%", // оранжевый текст для светлой темы
      "dropdown-hover": "25 30% 95%", // светло-оранжевый для hover
    },
    dark: {
      primary: "25 100% 50%", // оранжевый
      secondary: "25 30% 25%", // темно-оранжевый
      accent: "25 100% 50%", // оранжевый
      destructive: "0 62.8% 30.6%",
      text: "25 100% 50%", // оранжевый
      dropdown: "0 0% 100%", // белый для темной темы
      "dropdown-text": "25 100% 50%", // оранжевый текст для темной темы
      "dropdown-hover": "25 30% 95%", // светло-оранжевый для hover
    }
  },
  monochrome: {
    name: "Monochrome",
    light: {
      primary: "0 0% 0%", // черный для контраста на белом
      secondary: "0 0% 95%", // светло-серый
      accent: "0 0% 90%", // серый
      destructive: "0 84.2% 60.2%",
      text: "0 0% 0%", // черный
      dropdown: "0 0% 100%", // белый
      "dropdown-text": "0 0% 0%", // черный текст
      "dropdown-hover": "0 0% 95%", // светло-серый
    },
    dark: {
      primary: "0 0% 100%", // белый
      secondary: "0 0% 15%", // темно-серый
      accent: "0 0% 20%", // серый
      destructive: "0 62.8% 30.6%",
      text: "0 0% 100%", // белый
      dropdown: "0 0% 100%", // белый
      "dropdown-text": "0 0% 100%", // белый текст
      "dropdown-hover": "0 0% 95%", // светло-серый
    }
  },
  blue: {
    name: "Blue",
    light: {
      primary: "221 83% 53%",
      secondary: "210 40% 96.1%",
      accent: "217 91% 60%",
      destructive: "0 84.2% 60.2%",
      text: "221 83% 53%",
      dropdown: "0 0% 100%",
      "dropdown-text": "221 83% 53%", // синий текст для светлой темы
      "dropdown-hover": "210 40% 96.1%",
    },
    dark: {
      primary: "217 91% 60%",
      secondary: "215 25% 27%",
      accent: "217 91% 60%",
      destructive: "0 62.8% 30.6%",
      text: "217 91% 60%",
      dropdown: "0 0% 100%",
      "dropdown-text": "217 91% 60%", // синий текст для темной темы
      "dropdown-hover": "210 40% 96.1%",
    }
  },
  green: {
    name: "Green",
    light: {
      primary: "142 76% 36%",
      secondary: "138 69% 97%",
      accent: "142 71% 45%",
      destructive: "0 84.2% 60.2%",
      text: "142 76% 36%",
      dropdown: "0 0% 100%",
      "dropdown-text": "142 76% 36%", // зеленый текст для светлой темы
      "dropdown-hover": "138 69% 97%",
    },
    dark: {
      primary: "142 71% 45%",
      secondary: "143 64% 24%",
      accent: "142 71% 45%",
      destructive: "0 62.8% 30.6%",
      text: "142 71% 45%",
      dropdown: "0 0% 100%",
      "dropdown-text": "142 71% 45%", // зеленый текст для темной темы
      "dropdown-hover": "138 69% 97%",
    }
  },
  purple: {
    name: "Purple",
    light: {
      primary: "262 83% 58%",
      secondary: "260 40% 96%",
      accent: "262 83% 58%",
      destructive: "0 84.2% 60.2%",
      text: "262 83% 58%",
      dropdown: "0 0% 100%",
      "dropdown-text": "262 83% 58%", // фиолетовый текст для светлой темы
      "dropdown-hover": "260 40% 96%",
    },
    dark: {
      primary: "262 83% 58%",
      secondary: "261 25% 27%",
      accent: "262 83% 58%",
      destructive: "0 62.8% 30.6%",
      text: "262 83% 58%",
      dropdown: "0 0% 100%",
      "dropdown-text": "262 83% 58%", // фиолетовый текст для темной темы
      "dropdown-hover": "260 40% 96%",
    }
  },
  red: {
    name: "Red",
    light: {
      primary: "0 72% 51%",
      secondary: "0 20% 96%",
      accent: "0 72% 51%",
      destructive: "0 84.2% 60.2%",
      text: "0 72% 51%",
      dropdown: "0 0% 100%",
      "dropdown-text": "0 72% 51%", // красный текст для светлой темы
      "dropdown-hover": "0 20% 96%",
    },
    dark: {
      primary: "0 72% 51%",
      secondary: "0 30% 25%",
      accent: "0 72% 51%",
      destructive: "0 62.8% 30.6%",
      text: "0 72% 51%",
      dropdown: "0 0% 100%",
      "dropdown-text": "0 72% 51%", // красный текст для темной темы
      "dropdown-hover": "0 20% 96%",
    }
  },
  pink: {
    name: "Pink",
    light: {
      primary: "330 81% 60%",
      secondary: "330 40% 96%",
      accent: "330 81% 60%",
      destructive: "0 84.2% 60.2%",
      text: "330 81% 60%",
      dropdown: "0 0% 100%",
      "dropdown-text": "330 81% 60%", // розовый текст для светлой темы
      "dropdown-hover": "330 40% 96%",
    },
    dark: {
      primary: "330 81% 60%",
      secondary: "330 30% 25%",
      accent: "330 81% 60%",
      destructive: "0 62.8% 30.6%",
      text: "330 81% 60%",
      dropdown: "0 0% 100%",
      "dropdown-text": "330 81% 60%", // розовый текст для темной темы
      "dropdown-hover": "330 40% 96%",
    }
  },
  teal: {
    name: "Teal",
    light: {
      primary: "180 70% 40%",
      secondary: "180 40% 96%",
      accent: "180 70% 40%",
      destructive: "0 84.2% 60.2%",
      text: "180 70% 40%",
      dropdown: "0 0% 100%",
      "dropdown-text": "180 70% 40%", // бирюзовый текст для светлой темы
      "dropdown-hover": "180 40% 96%",
    },
    dark: {
      primary: "180 70% 40%",
      secondary: "180 30% 25%",
      accent: "180 70% 40%",
      destructive: "0 62.8% 30.6%",
      text: "180 70% 40%",
      dropdown: "0 0% 100%",
      "dropdown-text": "180 70% 40%", // бирюзовый текст для темной темы
      "dropdown-hover": "180 40% 96%",
    }
  },
  amber: {
    name: "Amber",
    light: {
      primary: "45 93% 47%",
      secondary: "45 40% 96%",
      accent: "45 93% 47%",
      destructive: "0 84.2% 60.2%",
      text: "45 93% 47%",
      dropdown: "0 0% 100%",
      "dropdown-text": "45 93% 47%", // янтарный текст для светлой темы
      "dropdown-hover": "45 40% 96%",
    },
    dark: {
      primary: "45 93% 47%",
      secondary: "45 30% 25%",
      accent: "45 93% 47%",
      destructive: "0 62.8% 30.6%",
      text: "45 93% 47%",
      dropdown: "0 0% 100%",
      "dropdown-text": "45 93% 47%", // янтарный текст для темной темы
      "dropdown-hover": "45 40% 96%",
    }
  }
}

export function ThemeSelector() {
  const [currentTheme, setCurrentTheme] = React.useState(() => {
    if (typeof window !== 'undefined') {
      const savedTheme = localStorage.getItem('color-theme');
      // Проверяем, существует ли тема в объекте themes
      if (savedTheme && Object.keys(themes).includes(savedTheme)) {
        return savedTheme;
      }
      // Если сохраненная тема 'default', заменяем ее на 'orange'
      if (savedTheme === 'default') {
        localStorage.setItem('color-theme', 'orange');
        return 'orange';
      }
      return 'orange';
    }
    return 'orange';
  })

  const applyTheme = (themeKey: string) => {
    // Проверяем, существует ли тема в объекте themes
    if (!Object.keys(themes).includes(themeKey)) {
      console.warn(`Theme "${themeKey}" not found, using orange theme`);
      themeKey = 'orange'; // Используем тему по умолчанию
    }
    
    const theme = themes[themeKey as keyof typeof themes];
    if (!theme) {
      console.error(`Theme "${themeKey}" is undefined`);
      return;
    }
    
    const isDark = document.documentElement.classList.contains("dark");
    const colors = isDark ? theme.dark : theme.light;
    
    if (!colors) {
      console.error(`Colors for theme "${themeKey}" in ${isDark ? 'dark' : 'light'} mode are undefined`);
      return;
    }

    for (const [key, value] of Object.entries(colors)) {
      // Для CSS-переменных, которые используют HSL
      if (key !== "dropdown-text" && key !== "dropdown-hover") {
        document.documentElement.style.setProperty(`--${key}`, value)
      } 
      // Для CSS-переменных, которые используют прямые значения цвета
      else {
        document.documentElement.style.setProperty(`--${key}`, value)
      }
    }
    
    setCurrentTheme(themeKey);
    localStorage.setItem('color-theme', themeKey);
    // Dispatch event for other components
    window.dispatchEvent(new CustomEvent('color-theme-changed', { detail: { theme: themeKey } }))
  }

  // Apply theme on mount and when dark mode changes
  React.useEffect(() => {
    applyTheme(currentTheme)
    
    const handleDarkModeChange = () => {
      applyTheme(currentTheme)
    }
    
    window.addEventListener('dark-mode-changed', handleDarkModeChange)
    return () => window.removeEventListener('dark-mode-changed', handleDarkModeChange)
  }, [currentTheme])

  // Функция для получения цвета текста для каждой палитры
  const getThemeColor = (key: string, theme: any) => {
    try {
      if (!theme || !theme.light || !theme.dark) {
        console.warn(`Theme data for "${key}" is incomplete`);
        return '0 0% 0%'; // Черный по умолчанию
      }
      
      const isDark = typeof document !== 'undefined' && document.documentElement.classList.contains("dark");
      const colors = isDark ? theme.dark : theme.light;
      
      if (!colors || !colors.text) {
        console.warn(`Text color for theme "${key}" in ${isDark ? 'dark' : 'light'} mode is undefined`);
        return isDark ? '0 0% 100%' : '0 0% 0%'; // Белый для темной темы, черный для светлой
      }
      
      return colors.text;
    } catch (error) {
      console.error(`Error getting theme color for "${key}": ${error}`);
      return '0 0% 0%'; // Черный по умолчанию
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="outline" 
          size="icon"
          className="bg-transparent border-0"
        >
          <Palette className="h-4 w-4 text-foreground" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent 
        align="end" 
        className="z-[200]"
        sideOffset={5}
      >
        {Object.entries(themes).map(([key, theme]) => (
          <DropdownMenuItem
            key={key}
            onClick={() => applyTheme(key)}
            className={currentTheme === key ? "bg-secondary" : ""}
            style={{
              color: `hsl(${getThemeColor(key, theme)})`,
              fontWeight: currentTheme === key ? 'bold' : 'normal'
            }}
          >
            <div className="flex items-center gap-2">
              <div 
                className="w-3 h-3 rounded-full" 
                style={{ backgroundColor: `hsl(${getThemeColor(key, theme)})` }}
              />
              {theme.name}
            </div>
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
