"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { RefreshCw } from 'lucide-react';
import { useI18n } from '@/contexts/I18nContext';
import { fetchWithAuth } from '@/utils/fetchWithAuth';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface PlatformStats {
  total_ads: number;
  active_ads: number;
  total_users: number;
  premium_accounts: number;
  generated_at?: string;
}

interface PlatformStatsWidgetProps {
  className?: string;
}

const PlatformStatsWidget: React.FC<PlatformStatsWidgetProps> = ({ className = "" }) => {
  const { t, formatNumber } = useI18n();
  const [stats, setStats] = useState<PlatformStats>({
    total_ads: 0,
    active_ads: 0,
    total_users: 0,
    premium_accounts: 0
  });
  const [isLoading, setIsLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [dataSource, setDataSource] = useState<string>('');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const fetchStats = useCallback(async (forceRefresh: boolean = false) => {
    setIsLoading(true);
    setError(null);

    try {
      console.log('[PlatformStatsWidget] üìä Fetching platform statistics...', forceRefresh ? '(force refresh)' : '');

      const url = forceRefresh
        ? '/api/autoria/ads/quick-stats?force_refresh=true'
        : '/api/autoria/ads/quick-stats';

      const response = await fetchWithAuth(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store'
      });

      const result = await response.json();
      console.log('[PlatformStatsWidget] üì¶ Response:', result);

      if (result.success && result.data) {
        setDataSource(result.source || 'unknown');
        setStats({
          total_ads: result.data.total_ads || 0,
          active_ads: result.data.active_ads || 0,
          total_users: result.data.total_users || 0,
          premium_accounts: result.data.premium_accounts || 0,
          generated_at: result.data.generated_at
        });
        setLastUpdated(new Date());
        console.log('[PlatformStatsWidget] ‚úÖ Statistics updated:', result.data);
        console.log('[PlatformStatsWidget] üì¶ Data source:', result.source);
      } else {
        throw new Error(result.error || 'Failed to fetch statistics');
      }
    } catch (error: any) {
      console.error('[PlatformStatsWidget] ‚ùå Error fetching statistics:', error);
      setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      setDataSource('error');

      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0
      setStats({
        total_ads: 0,
        active_ads: 0,
        total_users: 0,
        premium_accounts: 0
      });
      setLastUpdated(new Date());
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleManualRefresh = useCallback(() => {
    fetchStats(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
  }, [fetchStats]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    fetchStats();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    const interval = setInterval(() => {
      console.log('[PlatformStatsWidget] ‚è∞ Auto-refreshing statistics...');
      fetchStats();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearInterval(interval);
    };
  }, [fetchStats]);

  const getDataSourceInfo = () => {
    switch (dataSource) {
      case 'cache':
        return { icon: 'üíæ', text: t('autoria.dataSource.cache') };
      case 'generated_direct':
        return { icon: 'üîÑ', text: t('autoria.dataSource.fresh') };
      case 'mock_fallback':
        return { icon: '‚ö†Ô∏è', text: t('autoria.dataSource.mockFallback') };
      case 'error_fallback':
        return { icon: '‚ùå', text: t('autoria.dataSource.errorFallback') };
      case 'error':
        return { icon: '‚ùå', text: t('autoria.dataSource.error') };
      default:
        return null;
    }
  };

  const sourceInfo = getDataSourceInfo();

  return (
    <div className={`space-y-4 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
          üìä {t('autoria.platformStats') || '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏'}
        </h3>
        <div className="flex items-center gap-2">
          {lastUpdated && (
            <div className="flex items-center gap-1.5">
              <span className="text-xs text-gray-500">
                {t('common.updated') || '–û–Ω–æ–≤–ª–µ–Ω–æ'}: {lastUpdated.toLocaleTimeString()}
              </span>
              {sourceInfo && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-sm cursor-help">
                        {sourceInfo.icon}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{sourceInfo.text}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
            </div>
          )}
          <Button
            variant="outline"
            size="sm"
            onClick={handleManualRefresh}
            disabled={isLoading}
            className="h-8 w-8 p-0"
          >
            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
          </Button>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div className="text-sm text-red-600 bg-red-50 dark:bg-red-900/20 p-2 rounded">
          ‚ö†Ô∏è {error}
        </div>
      )}

      {/* –ë–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4">
        <div className="bg-white dark:bg-gray-800 rounded-lg p-3 md:p-4 shadow-sm border">
          <div className={`text-lg md:text-2xl font-bold text-blue-600 ${isLoading ? 'animate-pulse' : ''}`}>
            {formatNumber(stats.total_ads)}
          </div>
          <div className="text-xs md:text-sm text-slate-600 dark:text-gray-300">
            {t('autoria.totalAds') || '–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π'}
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg p-3 md:p-4 shadow-sm border">
          <div className={`text-lg md:text-2xl font-bold text-green-600 ${isLoading ? 'animate-pulse' : ''}`}>
            {formatNumber(stats.active_ads)}
          </div>
          <div className="text-xs md:text-sm text-slate-600 dark:text-gray-300">
            {t('autoria.activeAds') || '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'}
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg p-3 md:p-4 shadow-sm border">
          <div className={`text-lg md:text-2xl font-bold text-purple-600 ${isLoading ? 'animate-pulse' : ''}`}>
            {formatNumber(stats.total_users)}
          </div>
          <div className="text-xs md:text-sm text-slate-600 dark:text-gray-300">
            {t('autoria.totalUsers') || '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg p-3 md:p-4 shadow-sm border">
          <div className={`text-lg md:text-2xl font-bold text-orange-600 ${isLoading ? 'animate-pulse' : ''}`}>
            {formatNumber(stats.premium_accounts)}
          </div>
          <div className="text-xs md:text-sm text-slate-600 dark:text-gray-300">
            {t('autoria.premiumUsers') || '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PlatformStatsWidget;
