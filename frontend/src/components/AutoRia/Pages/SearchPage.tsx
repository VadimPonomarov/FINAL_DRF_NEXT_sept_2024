"use client";

import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useToast } from '@/hooks/use-toast';
import { alertHelpers } from '@/components/ui/alert-dialog-helper';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { formatCardPrice } from '@/utils/priceFormatter';
import {
  Search, Heart, Eye, MapPin, Calendar, Gauge, Fuel, Settings, Grid, List,
  Star, Car, User, Edit, Trash2, ExternalLink, Zap, Cog, Hash, AlertTriangle, FileText, Phone
} from 'lucide-react';
import CarAdsService from '@/services/autoria/carAds.service';
import { FavoritesService } from '@/services/autoria/favorites.service';
import AdCounters from '@/components/AutoRia/Components/AdCounters';
import { VirtualSelect } from '@/components/ui/virtual-select';
import { useTranslation } from '@/contexts/I18nContext';
import { cachedFetch } from '@/utils/cachedFetch';
import AnalyticsTabContent from '@/components/AutoRia/Analytics/AnalyticsTabContent';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAutoRiaAuth } from '@/hooks/autoria/useAutoRiaAuth';
import { smartFetch } from '@/utils/smartFetch';
import { CurrencySelector } from '@/components/AutoRia/CurrencySelector/CurrencySelector';
import { usePriceConverter } from '@/hooks/usePriceConverter';
import CarAdCard from '@/components/AutoRia/Components/CarAdCard';
import CarAdListItem from '@/components/AutoRia/Components/CarAdListItem';

// –ü—Ä–æ—Å—Ç–æ–π —Ç–∏–ø –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
interface CarAd {
  id: number;
  title: string;
  brand?: string;
  model?: string;
  year?: number;
  price?: number;
  currency?: string;
  price_usd?: number; // –¶–µ–Ω–∞ –≤ USD –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  price_eur?: number; // –¶–µ–Ω–∞ –≤ EUR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  mileage?: number;
  city?: string;
  city_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
  region_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
  mark_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏
  vehicle_type_name?: string; // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  fuel_type?: string;
  engine_volume?: number;
  transmission?: string;
  license_plate?: string;
  vin_code?: string;
  accident_history?: boolean;
  is_favorite?: boolean;
  view_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  favorites_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  phone_views_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  is_vip?: boolean; // VIP —Å—Ç–∞—Ç—É—Å
  is_premium?: boolean; // Premium —Å—Ç–∞—Ç—É—Å
  body_type?: string; // –¢–∏–ø –∫—É–∑–æ–≤–∞
  images?: Array<{
    image: string;
    image_display_url?: string;
    image_url?: string;
    url?: string;
    is_main?: boolean;
  }>;
  user?: {
    id: number;
    email: string;
    account_type?: string;
    phone?: string;
  };
  price_uah?: number; // –¶–µ–Ω–∞ –≤ UAH –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  dynamic_fields?: {
    year?: number;
    mileage?: number;
    mileage_km?: number;
    fuel_type?: string;
    transmission?: string;
    [key: string]: any;
  };
  seller?: {
    phone?: string;
  };
}

const SearchPage = () => {
  // –•—É–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  const t = useTranslation();
  const router = useRouter();
  const searchParams = useSearchParams();

  // –•—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { user, isAuthenticated } = useAutoRiaAuth();

  // –•—É–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω
  const { formatPrice: formatPriceInSelectedCurrency } = usePriceConverter();

  // –ü—Ä–æ—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [searchResults, setSearchResults] = useState<CarAd[]>([]);
  const [loading, setLoading] = useState(false);
  const [paginationLoading, setPaginationLoading] = useState(false);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [regionId, setRegionId] = useState(''); // –î–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π —Å–≤—è–∑–∏ —Ä–µ–≥–∏–æ–Ω ‚Üí –≥–æ—Ä–æ–¥
  const [sortBy, setSortBy] = useState('created_at');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [togglingIds, setTogglingIds] = useState<Set<number>>(new Set());
  const [deletingIds, setDeletingIds] = useState<Set<number>>(new Set());
  const [isInitialized, setIsInitialized] = useState(false);

  // –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const [quickFilters, setQuickFilters] = useState({
    with_images: false,
    my_ads: false,
    favorites: false,
    verified: false,
    vip: false,
    premium: false
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏–Ω–≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Å–æ–±—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [invertFilters, setInvertFilters] = useState(false);



  // –î–µ–±–∞—É–Ω—Å–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const filtersTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [activeTab, setActiveTab] = useState<'results' | 'analytics'>('results');

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const prevSearchParamsRef = useRef<string>('');


  // –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const [filters, setFilters] = useState({
    search: '',
    vehicle_type: '',
    brand: '',
    model: '',
    condition: '',
    year_from: '',
    year_to: '',
    price_from: '',
    price_to: '',
    region: '',
    city: '',
    page_size: 20
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ID (–¥–ª—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–≤—è–∑–µ–π)
  const [selectedIds, setSelectedIds] = useState({
    vehicle_type_id: '',
    brand_id: '',
    region_id: ''
  });

  // Update URL with current filters (–æ–±—ä—è–≤–ª—è–µ–º –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–∑–¥–µ)
  const updateURL = useCallback((newFilters: typeof filters, page: number, sort: string, order: 'asc' | 'desc') => {
    const params = new URLSearchParams();

    console.log('üîó updateURL called with filters:', newFilters);

    // Add filters to URL (—Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    Object.entries(newFilters).forEach(([key, value]) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º page_size –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (key === 'page_size') return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
      const stringValue = String(value).trim();
      if (stringValue !== '' && stringValue !== '0') {
        params.set(key, stringValue);
        console.log(`  ‚úÖ Added to URL: ${key}=${stringValue}`);
      } else {
        console.log(`  ‚ùå Skipped empty: ${key}=${value}`);
      }
    });

    // Add pagination and sorting
    if (page > 1) params.set('page', String(page));
    if (sort !== 'created_at') params.set('sort', sort);
    if (order !== 'desc') params.set('order', order);

    // Add quick filters
    if (quickFilters.with_images) params.set('with_images', 'true');
    if (quickFilters.my_ads) params.set('my_ads', 'true');
    if (quickFilters.favorites) params.set('favorites', 'true');
    if (quickFilters.verified) params.set('verified', 'true');
    if (invertFilters) params.set('invert', 'true');

    // Update URL without page reload
    const newURL = params.toString() ? `?${params.toString()}` : '/autoria/search';
    console.log('üîó New URL:', newURL);
    router.push(newURL, { scroll: false });
  }, [router, quickFilters, invertFilters]);

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
  const searchCars = useCallback(async () => {
    console.log('üîç Starting search with filters:', filters);
    console.log('üîç Filter details:', {
      vehicle_type: filters.vehicle_type,
      brand: filters.brand,
      model: filters.model,
      search: filters.search,
      currentPage
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏: –µ—Å–ª–∏ paginationLoading —É–∂–µ true, —Ç–æ —ç—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    const isPagination = paginationLoading;

    if (!isPagination) {
      setLoading(true);
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π –¥–ª—è backend
      const sortFieldMapping: Record<string, string> = {
        'year': 'year_sort',
        'mileage': 'mileage_sort',
        'price': 'price',
        'created_at': 'created_at',
        'title': 'title'
      };

      const backendSortField = sortFieldMapping[sortBy] || sortBy;
      const ordering = sortOrder === 'desc' ? `-${backendSortField}` : backendSortField;
      const searchParams: any = {
        page: currentPage,
        page_size: filters.page_size,
        ordering: ordering
      };

      console.log('üîç Search params before API call:', searchParams);
      console.log('üîç Current page_size from filters:', filters.page_size);
      console.log('üîç Current page:', currentPage);
      console.log('üîç Full filters object:', filters);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.search) searchParams.search = filters.search;
      if (filters.vehicle_type) searchParams.vehicle_type = filters.vehicle_type;
      if (filters.brand) searchParams.mark = filters.brand; // ID –º–∞—Ä–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–≤—è–∑–∏ mark__id
      if (filters.condition) searchParams.condition = filters.condition; // 'new' | 'used'
      if (filters.model) searchParams.model = filters.model; // —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ

      // –î–ª—è region –∏ city –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, –∞ –Ω–µ ID (CharField –≤ –º–æ–¥–µ–ª–∏)
      // –ù–æ VirtualSelect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ ID
      if (filters.region) {
        // –ü–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ø–æ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–∏–º
        searchParams.region = filters.region;
      }
      if (filters.city) {
        // –ü–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ø–æ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–∏–º
        searchParams.city = filters.city;
      }
      if (filters.year_from) searchParams.year_from = filters.year_from;
      if (filters.year_to) searchParams.year_to = filters.year_to;
      if (filters.price_from) {
        searchParams.price_min = filters.price_from;
        searchParams.price_currency = 'USD';
      }
      if (filters.price_to) {
        searchParams.price_max = filters.price_to;
        searchParams.price_currency = 'USD';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º –∏–Ω–≤–µ—Ä—Å–∏–∏
      if (quickFilters.with_images) {
        searchParams[invertFilters ? 'invert_photos' : 'with_photos_only'] = true;
      }
      if (quickFilters.my_ads) {
        searchParams[invertFilters ? 'invert_my_ads' : 'my_ads_only'] = true;
      }
      if (quickFilters.favorites) {
        // –û—Ç–ø—Ä–∞–≤–∏–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å backend)
        searchParams[invertFilters ? 'invert_favorites' : 'favorites_only'] = true;
        if (!invertFilters) {
          searchParams['favorites'] = 'true';
          searchParams['only_favorites'] = 'true';
        }
      }
      if (quickFilters.verified) {
        searchParams.is_validated = !invertFilters; // –î–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
      }

      console.log('üîç API params:', searchParams);
      console.log('üîç Quick filters:', quickFilters);

      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
      // –§–∏–ª—å—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä favorites_only
      const response = await CarAdsService.getCarAds(searchParams);

      console.log('‚úÖ Search successful:', {
        count: response.count,
        resultsLength: response.results?.length,
        requestedPageSize: filters.page_size,
        currentPage: currentPage
      });

      const results = (response.results || []).map((item: any) => {
        if (quickFilters.favorites && !invertFilters && typeof item.is_favorite === 'undefined') {
          return { ...item, is_favorite: true };
        }
        return item;
      });

      console.log('üîç Final results to set:', {
        resultsCount: results.length,
        totalCount: response.count || 0
      });

      setSearchResults(results);
      setTotalCount(response.count || 0);

    } catch (error: any) {
      console.error('‚ùå Search error:', error);
      // –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ñ–∏–ª—å—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –ø–æ–ª—É—á–∞–µ–º 401/Unauthorized ‚Äî –ø–æ–∫–∞–∂–µ–º —è–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const msg = String(error?.message || '')
      if (quickFilters.favorites && (msg.includes('401') || /unauthorized/i.test(msg))) {
        toast({
          title: t('search.toast.loginRequired'),
          description: t('search.toast.loginRequiredDescription'),
          variant: 'destructive'
        });
      }
      setSearchResults([]);
      setTotalCount(0);
    } finally {
      setLoading(false);
      setPaginationLoading(false);
    }
  }, [filters, currentPage, quickFilters, invertFilters, sortBy, sortOrder]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
  const handlePageChange = useCallback((newPage: number) => {
    if (newPage === currentPage) return;

    console.log('üìÑ Page change:', currentPage, '->', newPage);
    setPaginationLoading(true);
    setCurrentPage(newPage);
    updateURL(filters, newPage, sortBy, sortOrder);
    // searchCars –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç—Å—è —á–µ—Ä–µ–∑ useCallback –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  }, [currentPage, filters, sortBy, sortOrder, updateURL]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const updateFilter = useCallback((key: string, value: any) => {
    console.log('üîÑ updateFilter called:', { key, value });
    setFilters(prev => {
      console.log('üîÑ Previous filters:', prev);
      const newFilters = { ...prev, [key]: value };
      console.log('üîÑ New filters will be:', newFilters);
      
      // Update URL with new filters
      updateURL(newFilters, 1, sortBy, sortOrder);
      
      return newFilters;
    });
    setCurrentPage(1);

    // –£–ë–ò–†–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ - —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ!
    console.log('üîÑ Filter updated, but search will only run on button click');
  }, [updateURL, sortBy, sortOrder]);

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
  const updateSearchWithDebounce = (value: string) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É –¥–ª—è UI
    setFilters(prev => {
      const newFilters = { ...prev, search: value };

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }

      // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É –±–µ–∑ debounce
      if (value.trim() === '') {
        console.log('üîç Search cleared, triggering immediate search');

        // –û–±–Ω–æ–≤–ª—è–µ–º URL
        updateURL(newFilters, currentPage, sortBy, sortOrder);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É
        (async () => {
          try {
            setLoading(true);
            const searchParams = buildSearchParams(newFilters, currentPage, sortBy, sortOrder);
            const response = await CarAdsService.getCarAds(searchParams);

            setSearchResults(response.results || []);
            setTotalCount(response.count || 0);
          } catch (error) {
            console.error('üîç Auto-search error:', error);
          } finally {
            setLoading(false);
          }
        })();

        return newFilters;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 300ms –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞)
      searchTimeoutRef.current = setTimeout(async () => {
        console.log('üîç Auto-search triggered after debounce:', value);

        // –û–±–Ω–æ–≤–ª—è–µ–º URL
        updateURL(newFilters, currentPage, sortBy, sortOrder);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        try {
          setLoading(true);
          const searchParams = buildSearchParams(newFilters, currentPage, sortBy, sortOrder);
          const response = await CarAdsService.getCarAds(searchParams);

          setSearchResults(response.results || []);
          setTotalCount(response.count || 0);
        } catch (error) {
          console.error('üîç Auto-search error:', error);
        } finally {
          setLoading(false);
        }
      }, 300); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 800ms –¥–æ 300ms

      return newFilters;
    });
  };

  // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const clearSearchField = useCallback(async () => {
    console.log('üîç Search field cleared via X button, triggering immediate search');

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä debounce
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –ø—É—Å—Ç—ã–º –ø–æ–∏—Å–∫–æ–º
    const newFilters = { ...filters, search: '' };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setFilters(newFilters);

    // –û–±–Ω–æ–≤–ª—è–µ–º URL (–ø–∞—Ä–∞–º–µ—Ç—Ä search –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω)
    updateURL(newFilters, currentPage, sortBy, sortOrder);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É
    try {
      setLoading(true);
      const searchParams = buildSearchParams(newFilters, currentPage, sortBy, sortOrder);
      const response = await CarAdsService.getCarAds(searchParams);

      setSearchResults(response.results || []);
      setTotalCount(response.count || 0);
    } catch (error) {
      console.error('üîç Clear search error:', error);
    } finally {
      setLoading(false);
    }
  }, [filters, currentPage, sortBy, sortOrder, updateURL]);

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –û–¢–ö–õ–Æ–ß–ï–ù–û
  const triggerFilterSearch = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (filtersTimeoutRef.current) {
      clearTimeout(filtersTimeoutRef.current);
    }

    // –û–¢–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    // –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∏—Å–∫"
    console.log('üîÑ Filter search disabled - use Search button instead');
  }, []);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const applyFilters = useCallback(() => {
    console.log('üöÄ APPLY FILTERS CLICKED!');
    console.log('üöÄ Current filters:', filters);
    updateURL(filters, currentPage, sortBy, sortOrder);
    searchCars();
  }, [filters, currentPage, sortBy, sortOrder, updateURL, searchCars]);

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const clearFilters = useCallback(async () => {
    console.log('üîÑ clearFilters called - resetting all filters');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const clearedFilters = {
      search: '',
      vehicle_type: '',
      brand: '',
      model: '',
      year_from: '',
      year_to: '',
      price_from: '',
      price_to: '',
      region: '',
      city: '',
      page_size: 20
    };

    setFilters(clearedFilters);
    setCurrentPage(1);
    setRegionId(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º regionId –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π —Å–≤—è–∑–∏

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    setQuickFilters({
      with_images: false,
      my_ads: false,
      favorites: false,
      verified: false,
      vip: false,
      premium: false
    });
    setInvertFilters(false);

    // Clear URL params
    router.push('/autoria/search', { scroll: false });

    console.log('üîÑ clearFilters - loading all cars without filters');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    try {
      setLoading(true);
      const response = await CarAdsService.getCarAds({
        page: 1,
        page_size: 20,
        ordering: '-created_at'
      });

      console.log('üîÑ clearFilters - loaded cars:', response);
      setSearchResults(response.results || []);
      setTotalCount(response.count || 0);
      setCurrentPage(1);
    } catch (error) {
      console.error('üîÑ clearFilters - error loading cars:', error);
      setSearchResults([]);
      setTotalCount(0);
    } finally {
      setLoading(false);
    }
  }, [router]);

  // –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
  const handleViewAd = useCallback((carId: number) => {
    window.location.href = `/autoria/ads/view/${carId}`;
  }, []);

  const handleEditAd = useCallback((carId: number) => {
    window.location.href = `/autoria/ads/edit/${carId}`;
  }, []);

  const { toast } = useToast();

  const handleFavoriteToggle = useCallback(async (carId: number, event?: React.MouseEvent) => {
    if (event) {
      event.stopPropagation();
      event.preventDefault();
    }
    if (togglingIds.has(carId)) return;

    // –ù–∞–π–¥—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–¥–µ–ª–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏
    let previousIsFavorite: boolean | undefined;
    setSearchResults(prev => prev.map(c => {
      if (c.id === carId) {
        previousIsFavorite = Boolean(c.is_favorite);
        return { ...c, is_favorite: !Boolean(c.is_favorite) };
      }
      return c;
    }));

    setTogglingIds(prev => new Set(prev).add(carId));
    console.log('üîÑ Toggle favorite (optimistic) for car:', carId, 'prev:', previousIsFavorite);

    try {
      const result = await FavoritesService.toggleFavorite(carId);
      console.log('‚úÖ Favorite toggled (server):', result);

      // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ)
      setSearchResults(prevResults =>
        prevResults.map(car =>
          car.id === carId
            ? {
                ...car,
                is_favorite: Boolean(result.is_favorite),
                favorites_count: typeof (result as any).favorites_count === 'number'
                  ? (result as any).favorites_count
                  : (result.is_favorite ? (car.favorites_count || 0) + 1 : Math.max(0, (car.favorites_count || 0) - 1))
              }
            : car
        )
      );

      // –ï—Å–ª–∏ –º—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ "–û–±—Ä–∞–Ω—ñ":
      //  - –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      //  - –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–≤–µ—Ä—Å–∏–∏: —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const shouldRemoveNow = (
        quickFilters.favorites && !invertFilters && result.is_favorite === false
      ) || (
        quickFilters.favorites && invertFilters && result.is_favorite === true
      );
      if (shouldRemoveNow) {
        setSearchResults(prev => prev.filter(c => c.id !== carId));
        setTotalCount(prev => Math.max(0, (prev || 0) - 1));
      }

      // –ù–µ–±–æ–ª—å—à–∞—è —Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤
      setTimeout(async () => {
        try {
          const response = await smartFetch(`/api/autoria/cars/${carId}`);
          if (response.ok) {
            const carData = await response.json();
            setSearchResults(prevResults =>
              prevResults.map(car =>
                car.id === carId
                  ? {
                      ...car,
                      favorites_count: carData.favorites_count || 0,
                      phone_views_count: carData.phone_views_count || 0,
                      view_count: carData.view_count || 0,
                      // –µ—Å–ª–∏ backend –≤–µ—Ä–Ω—É–ª is_favorite ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                      ...(typeof carData.is_favorite !== 'undefined' ? { is_favorite: Boolean(carData.is_favorite) } : {})
                    }
                  : car
              )
            );
          }
        } catch (syncError) {
          console.warn('‚ö†Ô∏è Failed to sync counters:', syncError);
        }
      }, 400);

    } catch (error: any) {
      console.error('‚ùå Error toggling favorite:', error);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
      setSearchResults(prev => prev.map(c => c.id === carId ? { ...c, is_favorite: previousIsFavorite } : c));

      const msg = String(error?.message || '')
      if (msg.toLowerCase().includes('unauthorized') || msg.includes('401')) {
        toast({ title: t('search.toast.loginRequired'), description: t('search.toast.favoriteToggleErrorDescription'), variant: 'destructive' });
      } else {
        toast({ title: t('search.toast.favoriteToggleError'), description: t('search.toast.favoriteToggleErrorDescription'), variant: 'destructive' });
      }
    } finally {
      setTogglingIds(prev => {
        const next = new Set(prev);
        next.delete(carId);
        return next;
      });
    }
  }, [togglingIds, quickFilters, invertFilters, toast]);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const handleDeleteAd = useCallback(async (carId: number, event?: React.MouseEvent) => {
    if (event) {
      event.stopPropagation();
      event.preventDefault();
    }

    if (deletingIds.has(carId)) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    const car = searchResults.find(c => c.id === carId);
    if (!car || !isOwner(car)) {
      toast({
        title: t('search.toast.noAccess'),
        description: t('search.toast.noAccessDescription'),
        variant: 'destructive'
      });
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const confirmed = await alertHelpers.confirmDelete(t('autoria.thisAd') || '—Ü–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è');
    if (!confirmed) return;

    setDeletingIds(prev => new Set(prev).add(carId));

    try {
      const response = await smartFetch(`/api/autoria/cars/${carId}/delete`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setSearchResults(prev => prev.filter(c => c.id !== carId));
      setTotalCount(prev => Math.max(0, (prev || 0) - 1));

      toast({
        title: t('search.toast.adDeleted'),
        description: t('search.toast.adDeletedDescription'),
      });

    } catch (error: any) {
      console.error('‚ùå Error deleting ad:', error);

      const msg = String(error?.message || '');
      if (msg.toLowerCase().includes('unauthorized') || msg.includes('401')) {
        toast({
          title: t('search.toast.loginRequiredDelete'),
          description: t('search.toast.loginRequiredDeleteDescription'),
          variant: 'destructive'
        });
      } else if (msg.toLowerCase().includes('forbidden') || msg.includes('403')) {
        toast({
          title: t('search.toast.noAccess'),
          description: t('search.toast.noAccessDescription'),
          variant: 'destructive'
        });
      } else {
        toast({
          title: t('search.toast.deleteError'),
          description: t('search.toast.deleteErrorDescription'),
          variant: 'destructive'
        });
      }
    } finally {
      setDeletingIds(prev => {
        const next = new Set(prev);
        next.delete(carId);
        return next;
      });
    }
  }, [deletingIds, toast, isAuthenticated, user, searchResults]);

  const isOwner = useCallback((car: CarAd) => {
    if (!isAuthenticated || !user) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEmail = user.email;
    const carOwnerEmail = car.user?.email;

    // –ï—Å–ª–∏ –µ—Å—Ç—å email –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (carOwnerEmail && userEmail) {
      return userEmail === carOwnerEmail;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä—é–∑–µ—Ä–∞–º
    return user.is_superuser || false;
  }, [isAuthenticated, user]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ä–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫)
  const handleCountersUpdate = useCallback((adId: number, counters: { favorites_count: number; phone_views_count: number }) => {
    setSearchResults(prevResults => 
      prevResults.map(ad => 
        ad.id === adId 
          ? { ...ad, favorites_count: counters.favorites_count, phone_views_count: counters.phone_views_count }
          : ad
      )
    );
  }, []);

  // Restore filters from URL on mount
  useEffect(() => {
    if (isInitialized) return;

    console.log('üîÑ Component mounted, restoring filters from URL');

    // Get filters from URL
    const urlFilters: typeof filters = {
      search: searchParams.get('search') || '',
      vehicle_type: searchParams.get('vehicle_type') || '',
      brand: searchParams.get('brand') || '',
      model: searchParams.get('model') || '',
      condition: searchParams.get('condition') || '',
      year_from: searchParams.get('year_from') || '',
      year_to: searchParams.get('year_to') || '',
      price_from: searchParams.get('price_from') || '',
      price_to: searchParams.get('price_to') || '',
      region: searchParams.get('region') || '',
      city: searchParams.get('city') || '',
      page_size: 20
    };

    // Get pagination and sorting from URL
    const urlPage = parseInt(searchParams.get('page') || '1');
    const urlSort = searchParams.get('sort') || 'created_at';
    const urlOrder = (searchParams.get('order') || 'desc') as 'asc' | 'desc';

    // Get quick filters from URL
    const urlQuickFilters = {
      with_images: searchParams.get('with_images') === 'true',
      my_ads: searchParams.get('my_ads') === 'true',
      favorites: searchParams.get('favorites') === 'true',
      verified: searchParams.get('verified') === 'true',
      vip: false,
      premium: false
    };

    const urlInvert = searchParams.get('invert') === 'true';

    // Update state with URL params
    setFilters(urlFilters);
    setCurrentPage(urlPage);
    setSortBy(urlSort);
    setSortOrder(urlOrder);
    setQuickFilters(urlQuickFilters);
    setInvertFilters(urlInvert);
    setIsInitialized(true);

    console.log('‚úÖ Filters restored from URL:', { urlFilters, urlPage, urlSort, urlOrder, urlQuickFilters, urlInvert });
  }, [searchParams, isInitialized]);

  // Watch for URL changes and update filters (for direct URL navigation)
  useEffect(() => {
    if (!isInitialized) return; // Skip on initial mount

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const currentParamsString = searchParams.toString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (currentParamsString === prevSearchParamsRef.current) {
      return; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    console.log('üîÑ URL changed, updating filters from searchParams');
    console.log('Previous params:', prevSearchParamsRef.current);
    console.log('Current params:', currentParamsString);

    // –û–±–Ω–æ–≤–ª—è–µ–º ref
    prevSearchParamsRef.current = currentParamsString;

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const urlFilters: typeof filters = {
      search: searchParams.get('search') || '',
      vehicle_type: searchParams.get('vehicle_type') || '',
      brand: searchParams.get('brand') || '',
      model: searchParams.get('model') || '',
      condition: searchParams.get('condition') || '',
      year_from: searchParams.get('year_from') || '',
      year_to: searchParams.get('year_to') || '',
      price_from: searchParams.get('price_from') || '',
      price_to: searchParams.get('price_to') || '',
      region: searchParams.get('region') || '',
      city: searchParams.get('city') || '',
      page_size: parseInt(searchParams.get('page_size') || '20')
    };

    const urlPage = parseInt(searchParams.get('page') || '1');
    const urlSort = searchParams.get('sort') || 'created_at';
    const urlOrder = (searchParams.get('order') || 'desc') as 'asc' | 'desc';

    const urlQuickFilters = {
      with_images: searchParams.get('with_images') === 'true',
      my_ads: searchParams.get('my_ads') === 'true',
      favorites: searchParams.get('favorites') === 'true',
      verified: searchParams.get('verified') === 'true',
      vip: false,
      premium: false
    };

    const urlInvert = searchParams.get('invert') === 'true';

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setFilters(urlFilters);
    setCurrentPage(urlPage);
    setSortBy(urlSort);
    setSortOrder(urlOrder);
    setQuickFilters(urlQuickFilters);
    setInvertFilters(urlInvert);

    console.log('‚úÖ Filters updated from URL:', { urlFilters, urlPage, urlSort, urlOrder });
  }, [searchParams, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (!isInitialized) return;

    console.log('üîÑ Component initialized, loading data with filters');
    searchCars();
  }, [isInitialized]);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
      if (filtersTimeoutRef.current) {
        clearTimeout(filtersTimeoutRef.current);
      }
    };
  }, []);

  // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: searchCars –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏:
  // filters, currentPage, quickFilters, invertFilters, sortBy, sortOrder
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ useEffect –ù–ï –ù–£–ñ–ù–´ - –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã!

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è page_size (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  useEffect(() => {
    console.log('üìÑ Page size changed in useEffect:', filters.page_size);
    console.log('üìÑ Full filters in useEffect:', filters);
  }, [filters.page_size]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π filters
  useEffect(() => {
    console.log('üîÑ Filters changed, searchCars will be called:', filters);
  }, [filters]);
  // –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    console.log('üöÄ Auto-search trigger', {
      currentPage,
      sortBy,
      sortOrder,
      page_size: filters.page_size,
      quickFilters,
      invertFilters
    });
    searchCars();
  }, [currentPage, sortBy, sortOrder, filters.page_size, quickFilters, invertFilters]);




  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù)
  // useEffect(() => {
  //   console.log('üîÑ Filters changed, triggering auto search');
  //   searchCars();
  // }, [
  //   filters.vehicle_type,
  //   filters.brand,
  //   filters.model,
  //   filters.year_from,
  //   filters.year_to,
  //   filters.price_from,
  //   filters.price_to,
  //   filters.region,
  //   filters.city
  // ]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-2">{t('searchTitle')}</h1>
          <p className="text-slate-600">{t('searchDesc')}</p>
        </div>

        <div className="flex flex-col lg:flex-row gap-6">
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="lg:w-80">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Search className="h-5 w-5" />
                  {t('searchFilters')}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('search')}</label>
                  <div className="flex gap-2">
                    <Input
                      placeholder={t('enterBrandModel')}
                      value={filters.search}
                      onChange={(e) => updateSearchWithDebounce(e.target.value)}
                      className="flex-1"
                    />
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={clearSearchField}
                      disabled={!filters.search}
                      className="px-3"
                      title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
                    >
                      √ó
                    </Button>
                  </div>
                  {filters.search && (
                    <p className="text-xs text-slate-500 mt-1">
                      {t('autoria.searchAutoApplyNotice') || t('searchAutoApplyNotice') || '–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 0.8 —Å–µ–∫'}
                    </p>
                  )}
                </div>

                {/* –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('vehicleType')}</label>
                  <VirtualSelect
                    placeholder={t('selectVehicleType')}
                    value={filters.vehicle_type}
                    onValueChange={(value) => updateFilter('vehicle_type', value || '')}
                    fetchOptions={async (search) => {
                      console.log('üîç Fetching vehicle types with search:', search);
                      const params = new URLSearchParams();
                      if (search) params.append('search', search);
                      const response = await fetch(`/api/public/reference/vehicle-types?${params}`);
                      const data = await response.json();
                      console.log('üîç Vehicle types response:', data);

                      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º options
                      return data.options || [];
                    }}
                    allowClear={true}
                    searchable={true}
                  />
                </div>

                {/* –ú–∞—Ä–∫–∞ */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('brand')}</label>
                  <VirtualSelect
                    placeholder={t('selectBrand')}
                    value={filters.brand}
                    onValueChange={(value) => {
                      console.log('üîç Brand selected:', value);
                      updateFilter('brand', value || '');
                      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Ä–∫–∏
                      if (filters.model) {
                        updateFilter('model', '');
                      }
                    }}
                    fetchOptions={async (search) => {
                      console.log('üîç Fetching brands with search:', search);
                      console.log('üîç Current vehicle_type:', filters.vehicle_type);

                      // ‚úÖ –ö–ê–°–ö–ê–î–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                      if (!filters.vehicle_type) {
                        console.log('üîç ‚ùå No vehicle_type selected, returning empty array');
                        return [];
                      }

                      const params = new URLSearchParams();
                      if (search) params.append('search', search);
                      params.append('vehicle_type_id', filters.vehicle_type);
                      params.append('page_size', '1000'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                      console.log('üîç ‚úÖ Fetching brands for vehicle_type:', filters.vehicle_type);

                      const response = await fetch(`/api/public/reference/brands?${params}`);
                      const data = await response.json();
                      console.log('üîç Brands response count:', data.options?.length || 0);
                      return data.options || [];
                    }}
                    allowClear={true}
                    searchable={true}
                    disabled={!filters.vehicle_type}
                    dependencies={[filters.vehicle_type]} // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                  />
                  {!filters.vehicle_type && (
                    <p className="text-xs text-slate-500 mt-1">
                      {t('selectVehicleTypeFirst')}
                    </p>
                  )}
                </div>

                {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤—ã–π/–±/—É) */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('autoria.condition') || '–°–æ—Å—Ç–æ—è–Ω–∏–µ'}</label>
                  <VirtualSelect
                    placeholder={t('autoria.selectCondition') || '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'}
                    value={filters.condition}
                    onValueChange={(value) => updateFilter('condition', value || '')}
                    fetchOptions={async () => {
                      // –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–∞–∫ —É –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
                      return [
                        { value: 'new', label: t('autoria.new') || '–ù–æ–≤—ã–π' },
                        { value: 'used', label: t('autoria.used') || '–ë/—É' },
                      ];
                    }}
                    allowClear={true}
                    searchable={false}
                  />
                </div>

                {/* –ú–æ–¥–µ–ª—å */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('model')}</label>
                  <VirtualSelect
                    placeholder={t('selectModel')}
                    value={filters.model}
                    onValueChange={(value) => updateFilter('model', value || '')}
                    fetchOptions={async (search) => {
                      console.log('üîç Fetching models with search:', search);
                      console.log('üîç Current brand:', filters.brand);

                      // –ï—Å–ª–∏ –º–∞—Ä–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                      if (!filters.brand) {
                        console.log('üîç No brand selected, returning empty array');
                        return [];
                      }

                      const params = new URLSearchParams();
                      if (search) params.append('search', search);
                      params.append('mark_id', filters.brand); // –ò–°–ü–†–ê–í–õ–ï–ù–û: brand_id ‚Üí mark_id
                      params.append('page_size', '1000'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

                      const response = await fetch(`/api/public/reference/models?${params}`);
                      const data = await response.json();
                      console.log('üîç Models response:', data);
                      return data.options || [];
                    }}
                    allowClear={true}
                    searchable={true}
                    disabled={!filters.brand}
                    dependencies={[filters.brand]} // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Ä–∫–∏
                  />
                  {!filters.brand && (
                    <p className="text-xs text-slate-500 mt-1">
                      {t('selectBrandFirst')}
                    </p>
                  )}
                </div>

                {/* –ì–æ–¥ */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('year')}</label>
                  <div className="grid grid-cols-2 gap-2">
                    <Input
                      type="number"
                      placeholder="–û—Ç"
                      value={filters.year_from}
                      onChange={(e) => updateFilter('year_from', e.target.value)}
                    />
                    <Input
                      type="number"
                      placeholder="–î–æ"
                      value={filters.year_to}
                      onChange={(e) => updateFilter('year_to', e.target.value)}
                    />
                  </div>
                </div>

                {/* –¶–µ–Ω–∞ */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('price')} (USD)</label>
                  <div className="grid grid-cols-2 gap-2">
                    <Input
                      type="number"
                      placeholder="–û—Ç"
                      value={filters.price_from}
                      onChange={(e) => updateFilter('price_from', e.target.value)}
                    />
                    <Input
                      type="number"
                      placeholder="–î–æ"
                      value={filters.price_to}
                      onChange={(e) => updateFilter('price_to', e.target.value)}
                    />
                  </div>
                </div>

                {/* –†–µ–≥–∏–æ–Ω */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('region')}</label>
                  <VirtualSelect
                    placeholder={t('selectRegion')}
                    value={filters.region}
                    onValueChange={(value, label) => {
                      console.log('üîç Region selected:', { value, label });
                      setRegionId(value || ''); // ID –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π —Å–≤—è–∑–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
                      updateFilter('region', value || ''); // ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–≥–∏–æ–Ω–∞
                      if (filters.city) {
                        updateFilter('city', '');
                      }
                    }}
                    fetchOptions={async (search) => {
                      console.log('üîç Fetching regions with search:', search);

                      const params = new URLSearchParams();
                      if (search) params.append('search', search);
                      params.append('page_size', '1000'); // Load all data

                      const response = await fetch(`/api/public/reference/regions?${params}`);
                      const data = await response.json();
                      console.log('üîç Regions response:', data);
                      return data.options || [];
                    }}
                    allowClear={true}
                    searchable={true}
                  />
                </div>

                {/* –ì–æ—Ä–æ–¥ */}
                <div>
                  <label className="text-sm font-medium mb-2 block">{t('city')}</label>
                  <VirtualSelect
                    placeholder={t('selectCity')}
                    value={filters.city}
                    onValueChange={(value, label) => {
                      console.log('üîç City selected:', { value, label });
                      updateFilter('city', value || ''); // ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                    }}
                    fetchOptions={async (search) => {
                      console.log('üîç Fetching cities with search:', search);
                      console.log('üîç Current regionId:', regionId);

                      // –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                      if (!regionId) {
                        console.log('üîç No region selected, returning empty array');
                        return [];
                      }

                      const params = new URLSearchParams();
                      if (search) params.append('search', search);
                      params.append('region_id', regionId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º regionId –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π —Å–≤—è–∑–∏
                      params.append('page_size', '1000'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

                      // üöÄ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fetch –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
                      const data = await cachedFetch(`/api/public/reference/cities?${params}`, {
                        cacheTime: 900,  // 15 –º–∏–Ω—É—Ç
                        staleTime: 1800  // 30 –º–∏–Ω—É—Ç stale
                      });
                      console.log('üîç Cities response:', data);
                      return data.options || [];
                    }}
                    allowClear={true}
                    searchable={true}
                    disabled={!filters.region}
                    dependencies={[regionId]} // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–≥–∏–æ–Ω–∞
                  />
                  {!regionId && (
                    <p className="text-xs text-slate-500 mt-1">{t('selectRegionFirst')}</p>
                  )}
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ */}
                <div className="flex gap-2">
                  <Button onClick={applyFilters} className="flex-1" disabled={loading}>
                    <Search className="h-4 w-4 mr-2" />
                    {t('common.search')}
                  </Button>
                  <Button variant="outline" onClick={clearFilters}>
                    {t('common.clear')}
                  </Button>
                </div>

                {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-sm font-medium text-slate-700">{t('autoria.quickSearch')}</h4>
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={invertFilters}
                        onChange={(e) => setInvertFilters(e.target.checked)}
                        className="rounded border-gray-300"
                      />
                      <span className="text-xs text-slate-600">üîÑ {t('common.invert') || 'Invert'}</span>
                    </label>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={quickFilters.with_images}
                        onChange={(e) => setQuickFilters(prev => ({ ...prev, with_images: e.target.checked }))}
                        className="rounded border-gray-300"
                      />
                      <span className="text-sm text-slate-600">üì∑ {t('autoria.withPhotos') || 'With photos'}</span>
                    </label>

                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={quickFilters.my_ads}
                        onChange={(e) => setQuickFilters(prev => ({ ...prev, my_ads: e.target.checked }))}
                        className="rounded border-gray-300"
                      />
                      <span className="text-sm text-slate-600">üë§ {t('autoria.myAds') || t('myAdsTitle')}</span>
                    </label>

                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={quickFilters.favorites}
                        onChange={(e) => setQuickFilters(prev => ({ ...prev, favorites: e.target.checked }))}
                        className="rounded border-gray-300"
                      />
                      <span className="text-sm text-slate-600">‚ù§Ô∏è {t('autoria.favorites')}</span>
                    </label>

                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={quickFilters.verified}
                        onChange={(e) => setQuickFilters(prev => ({ ...prev, verified: e.target.checked }))}
                        className="rounded border-gray-300"
                      />
                      <span className="text-sm text-slate-600">‚úÖ {t('autoria.verified') || 'Verified'}</span>
                    </label>

                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={quickFilters.vip}
                        onChange={(e) => setQuickFilters(prev => ({ ...prev, vip: e.target.checked }))}
                        className="rounded border-gray-300"
                      />
                      <span className="text-sm text-slate-600">‚≠ê VIP</span>
                    </label>

                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={quickFilters.premium}
                        onChange={(e) => setQuickFilters(prev => ({ ...prev, premium: e.target.checked }))}
                        className="rounded border-gray-300"
                      />
                      <span className="text-sm text-slate-600">üíé Premium</span>
                    </label>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <div className="flex-1">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            <div className="mb-6">
              {/* Responsive toolbar */}
              <div className="mb-4">
                <div className="flex items-start justify-between gap-4 flex-wrap">
                  <div className="min-w-[200px]">
                    <h2 className="text-xl font-semibold">
                      {loading ? t('common.loading') : `${t('common.found')}: ${totalCount}`}
                    </h2>
                    {!loading && totalCount > 0 && (
                      <p className="text-sm text-slate-600">
                        {filters.page_size === 0 ?
                          `${totalCount} ${t('autoria.total', 'total')}` :
                          `${searchResults.length} / ${totalCount} ‚Ä¢ ${t('page', 'Page')} ${currentPage} ${t('autoria.of', 'of')} ${Math.ceil(totalCount / filters.page_size)}`
                        }
                      </p>
                    )}
                  </div>

	            {/* Tabs: Results / Analytics */}
	            {!loading && totalCount > 0 && (
	              <div className="mt-2">
                <div className="flex items-center justify-between gap-4 mb-2">
                  <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)} className="flex-1">
                    <TabsList>
                      <TabsTrigger value="results">{t('searchResults')}</TabsTrigger>
                      <TabsTrigger value="analytics">{t('analytics')}</TabsTrigger>
                    </TabsList>
                    <TabsContent value="results">
                      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∏–∂–µ */}
                    </TabsContent>
                    <TabsContent value="analytics">
                      <AnalyticsTabContent filters={filters as any} results={searchResults as any} loading={loading} />
                    </TabsContent>
                  </Tabs>

                  {/* Currency Selector - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π */}
                  <CurrencySelector showLabel={true} />
                </div>
	              </div>
	            )}


                  {activeTab === 'results' && !loading && searchResults.length > 0 && (
                    <div className="flex-1 flex flex-wrap gap-3 items-center">
                      {/* Sort (combined) */}
                      <div className="flex items-center gap-2 min-w-[200px] flex-1">
                        <span className="text-sm text-slate-600 whitespace-nowrap">{t('common.sort') || 'Sort'}:</span>
                        <select
                          value={`${sortBy}_${sortOrder}`}
                          onChange={(e) => {
                            const val = e.target.value as string;
                            const [field, dir] = val.split('_');
                            setSortBy(field as any);
                            setSortOrder((dir as 'asc' | 'desc') || 'desc');
                            setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                          }}
                          className="text-sm border border-gray-300 rounded px-2 py-1 flex-1 min-w-0"
                        >
                          <option value="created_at_desc">{t('autoria.byDate') || 'By date'} ‚Üì</option>
                          <option value="created_at_asc">{t('autoria.byDate') || 'By date'} ‚Üë</option>
                          <option value="price_desc">{t('autoria.byPrice') || 'By price'} ‚Üì</option>
                          <option value="price_asc">{t('autoria.byPrice') || 'By price'} ‚Üë</option>
                          <option value="year_desc">{t('autoria.byYear') || 'By year'} ‚Üì</option>
                          <option value="year_asc">{t('autoria.byYear') || 'By year'} ‚Üë</option>
                          <option value="mileage_desc">{t('autoria.byMileage') || 'By mileage'} ‚Üì</option>
                          <option value="mileage_asc">{t('autoria.byMileage') || 'By mileage'} ‚Üë</option>
                          <option value="title_asc">{t('autoria.byTitle') || 'By title'} A‚ÜíZ</option>
                        </select>
                      </div>

                      {/* Per page */}
                      <div className="flex items-center gap-2 min-w-[140px]">
                        <span className="text-sm text-slate-600 whitespace-nowrap">{t('autoria.perPage') || 'Per page'}:</span>
                        <select
                          value={filters.page_size === 0 ? 'all' : String(filters.page_size)}
                          onChange={(e) => {
                            const val = e.target.value === 'all' ? 0 : parseInt(e.target.value);
                            console.log('üìÑ Page size changed to:', val);
                            const newPageSize = isNaN(val) ? 20 : val;

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            const newFilters = { ...filters, page_size: newPageSize };
                            setFilters(newFilters);
                            setCurrentPage(1);

                            console.log('üìÑ New filters after page_size change:', newFilters);
                          }}
                          className="text-sm border border-gray-300 rounded px-2 py-1 w-[80px]"
                        >
                          <option value="all">{t('autoria.all') || '–í—Å–µ'}</option>
                          <option value={1}>1</option>
                          <option value={5}>5</option>
                          <option value={10}>10</option>
                          <option value={20}>20</option>
                          <option value={50}>50</option>
                          <option value={100}>100</option>
                          <option value={200}>200</option>
                        </select>
                      </div>

                      {/* View mode */}
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-slate-600 hidden sm:inline">{t('autoria.view') || 'View'}:</span>
                        <div className="flex border rounded-lg overflow-hidden">
                          <button
                            onClick={() => setViewMode('grid')}
                            className={`p-2 ${viewMode === 'grid' ? 'bg-blue-500 text-white' : 'bg-white text-slate-600 hover:bg-slate-50'}`}
                          >
                            <Grid className="h-4 w-4" />
                          </button>
                          <button
                            onClick={() => setViewMode('list')}
                            className={`p-2 ${viewMode === 'list' ? 'bg-blue-500 text-white' : 'bg-white text-slate-600 hover:bg-slate-50'}`}
                          >
                            <List className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            {activeTab === 'results' && (
              loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                  <span className="ml-4">{t('common.loading')}</span>
                </div>
              ) : searchResults.length === 0 ? (
                <Card>
                  <CardContent className="pt-6">
                    <div className="text-center py-12">
                      <Search className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                      <h3 className="text-lg font-semibold text-slate-900 mb-2">
                        {t('autoria.noAdsFound') || t('common.none')}
                      </h3>
                      <p className="text-slate-600 mb-6">
                        {t('autoria.tryAdjustFilters') || t('common.search')}
                      </p>
                      <Button onClick={clearFilters}>
                        {t('common.clear')}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <div
                  className={`${viewMode === 'grid' ? 'grid grid-cols-1 lg:grid-cols-2 gap-6' : 'space-y-3'} transition-opacity duration-300 ${paginationLoading ? 'opacity-50' : 'opacity-100'}`}
                >
                  {searchResults.map((car) => (
                    viewMode === 'grid' ? (
                      <CarAdCard 
                        key={car.id} 
                        ad={car}
                        onCountersUpdate={handleCountersUpdate}
                      />
                    ) : (
                      <CarAdListItem 
                        key={car.id} 
                        ad={car}
                        onCountersUpdate={handleCountersUpdate}
                        onDelete={handleDeleteAd}
                        isOwner={isOwner}
                        togglingIds={togglingIds}
                        deletingIds={deletingIds}
                      />
                    )
                ))}
              </div>
            )
            )}

            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {activeTab === 'results' && !loading && searchResults.length > 0 && filters.page_size !== 0 && totalCount > filters.page_size && (
              <div className="flex justify-center items-center gap-4 mt-8 mb-4">
                <Button
                  variant="outline"
                  onClick={() => {
                    if (currentPage > 1) {
                      handlePageChange(currentPage - 1);
                    }
                  }}
                  disabled={currentPage <= 1 || paginationLoading}
                  className="flex items-center gap-2"
                >
                  {paginationLoading ? '‚è≥' : '‚Üê'} {t('autoria.prev') || 'Prev'}
                </Button>

                <div className="flex items-center gap-2">
                  <span className="text-sm text-slate-600">
                    {t('page', 'Page')} {currentPage} / {filters.page_size === 0 ? 1 : Math.ceil(totalCount / filters.page_size)}
                  </span>
                  {paginationLoading && (
                    <span className="text-xs text-blue-500 animate-pulse">
                      {t('loading.pleaseWait')}
                    </span>
                  )}
                </div>

                <Button
                  variant="outline"
                  onClick={() => {
                    if (filters.page_size !== 0 && currentPage < Math.ceil(totalCount / filters.page_size)) {
                      handlePageChange(currentPage + 1);
                    }
                  }}
                  disabled={filters.page_size === 0 || currentPage >= Math.ceil(totalCount / filters.page_size) || paginationLoading}
                  className="flex items-center gap-2"
                >
                  {t('autoria.next') || 'Next'} {paginationLoading ? '‚è≥' : '‚Üí'}
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SearchPage;
