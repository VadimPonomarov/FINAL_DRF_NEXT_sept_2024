"use client";

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Popover, 
  PopoverContent, 
  PopoverTrigger 
} from '@/components/ui/popover';
import { 
  User, 
  Phone, 
  Mail, 
  MapPin, 
  Zap,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react';
import { useAutoRiaFormPrefill } from '@/hooks/useAutoRiaFormPrefill';
import { CarAdFormData } from '@/types/autoria';
import { useI18n } from '@/contexts/I18nContext';

interface AutoFillButtonProps {
  onAutoFill: (data: Partial<CarAdFormData>) => void;
  currentFormData: Partial<CarAdFormData>;
  className?: string;
  variant?: 'default' | 'outline' | 'secondary';
  size?: 'sm' | 'default' | 'lg';
}

const AutoFillButton: React.FC<AutoFillButtonProps> = ({
  onAutoFill,
  currentFormData,
  className = '',
  variant = 'outline',
  size = 'default'
}) => {
  const { t } = useI18n();
  const [isOpen, setIsOpen] = useState(false);
  const [isApplying, setIsApplying] = useState(false);
  
  const {
    isAutoFillAvailable,
    getAutoFillSummary,
    applyAutoFill,
    loading,
    isAuthenticated
  } = useAutoRiaFormPrefill();

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
  if (!isAuthenticated || !isAutoFillAvailable()) {
    return null;
  }

  const summary = getAutoFillSummary();

  const handleAutoFill = async (options: { overwriteExisting?: boolean } = {}) => {
    setIsApplying(true);
    
    try {
      console.log('[AutoFillButton] üîÑ Applying auto-fill...');
      
      const updatedData = applyAutoFill(currentFormData, {
        overwriteExisting: options.overwriteExisting || false
      });
      
      onAutoFill(updatedData);
      setIsOpen(false);
      
      console.log('[AutoFillButton] ‚úÖ Auto-fill applied successfully');
    } catch (error) {
      console.error('[AutoFillButton] ‚ùå Auto-fill failed:', error);
    } finally {
      setIsApplying(false);
    }
  };

  const getFieldIcon = (field: string) => {
    if (field.includes('name')) return <User className="h-3 w-3" />;
    if (field.includes('phone') || field.includes('telegram') || field.includes('viber') || field.includes('whatsapp')) return <Phone className="h-3 w-3" />;
    if (field.includes('email')) return <Mail className="h-3 w-3" />;
    if (field.includes('region') || field.includes('city')) return <MapPin className="h-3 w-3" />;
    return <Info className="h-3 w-3" />;
  };

  const getFieldLabel = (field: string) => {
    const labels: Record<string, string> = {
      seller_name: t('autoFill.sellerName'),
      seller_phone: t('autoFill.mainPhone'),
      seller_phone_secondary: t('autoFill.additionalPhone'),
      seller_email: t('autoFill.email'),
      seller_telegram: t('autoFill.telegram'),
      seller_viber: t('autoFill.viber'),
      seller_whatsapp: t('autoFill.whatsapp'),
      region: t('autoFill.region'),
      city: t('autoFill.city'),
    };
    return labels[field] || field;
  };

  if (loading) {
    return (
      <Button
        variant={variant}
        size={size}
        className={className}
        disabled
      >
        <Zap className="h-4 w-4 mr-2 animate-spin" />
        {t('common.loading')}
      </Button>
    );
  }

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Button 
          variant={variant} 
          size={size} 
          className={className}
          disabled={isApplying}
        >
          <Zap className="h-4 w-4 mr-2" />
          –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –º–æ—ó –¥–∞–Ω—ñ
          <Badge variant="secondary" className="ml-2">
            {summary.totalFields}
          </Badge>
        </Button>
      </PopoverTrigger>
      
      <PopoverContent className="w-80" align="start">
        <div className="space-y-4">
          <div className="space-y-2">
            <h4 className="font-medium leading-none">–ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏</h4>
            <p className="text-sm text-muted-foreground">
              –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ–ª—è –≤–∞—à–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            </p>
          </div>

          {/* –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è */}
          <div className="space-y-2">
            <div className="text-sm font-medium">–î–æ—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ ({summary.totalFields}):</div>
            <div className="grid grid-cols-1 gap-1">
              {summary.fields.map((field) => (
                <div key={field} className="flex items-center gap-2 text-sm">
                  {getFieldIcon(field)}
                  <span className="text-muted-foreground">{getFieldLabel(field)}</span>
                </div>
              ))}
            </div>
          </div>

          {/* –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö */}
          <div className="flex items-center gap-2 text-sm">
            <div className="flex items-center gap-1">
              {summary.hasProfile ? (
                <CheckCircle className="h-3 w-3 text-green-500" />
              ) : (
                <AlertCircle className="h-3 w-3 text-yellow-500" />
              )}
              <span className="text-xs">–ü—Ä–æ—Ñ—ñ–ª—å</span>
            </div>
            <div className="flex items-center gap-1">
              {summary.hasContact ? (
                <CheckCircle className="h-3 w-3 text-green-500" />
              ) : (
                <AlertCircle className="h-3 w-3 text-yellow-500" />
              )}
              <span className="text-xs">–ö–æ–Ω—Ç–∞–∫—Ç–∏</span>
            </div>
            <div className="flex items-center gap-1">
              {summary.hasAddress ? (
                <CheckCircle className="h-3 w-3 text-green-500" />
              ) : (
                <AlertCircle className="h-3 w-3 text-yellow-500" />
              )}
              <span className="text-xs">–ê–¥—Ä–µ—Å–∞</span>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-col gap-2">
            <Button 
              size="sm" 
              onClick={() => handleAutoFill({ overwriteExisting: false })}
              disabled={isApplying}
              className="w-full"
            >
              {isApplying ? (
                <>
                  <Zap className="h-3 w-3 mr-2 animate-spin" />
                  –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è...
                </>
              ) : (
                <>
                  <Zap className="h-3 w-3 mr-2" />
                  –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—É—Å—Ç—ñ –ø–æ–ª—è
                </>
              )}
            </Button>
            
            <Button 
              size="sm" 
              variant="outline"
              onClick={() => handleAutoFill({ overwriteExisting: true })}
              disabled={isApplying}
              className="w-full"
            >
              <Zap className="h-3 w-3 mr-2" />
              –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –≤—Å—ñ –ø–æ–ª—è
            </Button>
          </div>

          <div className="text-xs text-muted-foreground">
            üí° –î–∞–Ω—ñ –±–µ—Ä—É—Ç—å—Å—è –∑ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default AutoFillButton;
