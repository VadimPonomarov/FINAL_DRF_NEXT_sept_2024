"use client";

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { useI18n } from '@/contexts/I18nContext';
import { useToast } from '@/hooks/use-toast';
import {
  Plus,
  Trash2,
  Phone,
  Mail,
  MessageCircle,
  Globe,
  Camera,
  Eye,
  EyeOff,
  Save,
  CheckCircle
} from 'lucide-react';
import { CarAdFormData } from '@/types/autoria';

// üé® –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
const getContactTypes = (t: any) => [
  { value: 'phone', label: `üìû ${t('phone')}`, icon: Phone, placeholder: '+380XXXXXXXXX', required: true },
  { value: 'email', label: `üìß ${t('email')}`, icon: Mail, placeholder: 'example@email.com', required: false },
  { value: 'telegram', label: `üì≤ ${t('telegram')}`, icon: MessageCircle, placeholder: '@username', required: false },
  { value: 'whatsapp', label: `üí¨ ${t('whatsapp')}`, icon: MessageCircle, placeholder: '+380XXXXXXXXX', required: false },
  { value: 'viber', label: `üì° ${t('viber')}`, icon: MessageCircle, placeholder: '+380XXXXXXXXX', required: false },
  { value: 'instagram', label: `üì∏ ${t('instagram')}`, icon: Camera, placeholder: '@username', required: false },
  { value: 'website', label: `üåê ${t('website')}`, icon: Globe, placeholder: 'https://example.com', required: false }
];

// üìû –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ AddsAccountContact –º–æ–¥–µ–ª–∏
interface Contact {
  type: string;
  value: string;
  is_visible: boolean;
  note: string;
}

interface ContactFormProps {
  data: Partial<CarAdFormData>;
  onChange: (data: Partial<CarAdFormData>) => void;
  errors?: string[];
}

const ContactForm: React.FC<ContactFormProps> = ({ data, onChange, errors }) => {
  const { t } = useI18n();
  const { toast } = useToast();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  const CONTACT_TYPES = getContactTypes(t);

  // üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  const [contacts, setContacts] = useState<Contact[]>(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    return data.contacts || [
      { type: 'phone', value: '', is_visible: true, note: '' }
    ];
  });

  // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  useEffect(() => {
    if (data.contacts && Array.isArray(data.contacts) && data.contacts.length > 0) {
      console.log('[ContactForm] üîÑ Syncing with external data:', data.contacts);
      setContacts(data.contacts);
    }
  }, [data.contacts]);

  // –£–±–∏—Ä–∞–µ–º additionalInfo –∏–∑ ContactForm

  // ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  const addContact = () => {
    const newContact: Contact = {
      type: 'email',
      value: '',
      is_visible: true,
      note: ''
    };
    const updatedContacts = [...contacts, newContact];
    setContacts(updatedContacts);
    updateFormData(updatedContacts);
  };

  // üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
  const removeContact = (index: number) => {
    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    if (contacts.length === 1 && contacts[0].type === 'phone') {
      return;
    }
    
    const updatedContacts = contacts.filter((_, i) => i !== index);
    setContacts(updatedContacts);
    updateFormData(updatedContacts);
  };

  // üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
  const updateContact = (index: number, field: keyof Contact, value: string | boolean) => {
    console.log('[ContactForm] üìù Updating contact:', { index, field, value });
    const updatedContacts = contacts.map((contact, i) =>
      i === index ? { ...contact, [field]: value } : contact
    );
    setContacts(updatedContacts);
    updateFormData(updatedContacts);
  };

  // üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const updateFormData = (updatedContacts: Contact[]) => {
    console.log('[ContactForm] üîÑ Updating form data:', { contacts: updatedContacts });
    onChange({
      contacts: updatedContacts
    });
  };

  // üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const getContactTypeInfo = (type: string) => {
    return CONTACT_TYPES.find(t => t.value === type) || CONTACT_TYPES[0];
  };

  // üíæ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  const handleSave = () => {
    console.log('[ContactForm] üíæ Saving contacts:', contacts);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    const validContacts = contacts.filter(contact => contact.value.trim() !== '');

    if (validContacts.length === 0) {
      console.error('[ContactForm] ‚ùå No valid contacts found');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    updateFormData(validContacts);

    console.log('[ContactForm] ‚úÖ Contacts saved successfully');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    toast({
      title: "‚úÖ " + t('contactsSaved'),
      description: `${validContacts.length} ${t('contactsSavedDescription')}`,
      duration: 3000,
    });
  };

  // üì§ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const handleNext = () => {
    console.log('[ContactForm] üì§ Moving to next step with contacts:', contacts);
    handleSave(); // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  };

  return (
    <div className="space-y-8 p-4">
      {/* üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      <div className="space-y-2 mb-8">
        <h2 className="text-xl font-semibold text-slate-900 flex items-center gap-2">
          üìû {t('autoria.contactTitle')}
        </h2>
        <p className="text-sm text-slate-600">
          {t('autoria.contactDesc')}
        </p>
      </div>

      {/* ‚ùå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
      {errors && errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <h4 className="text-sm font-medium text-red-800 mb-2 flex items-center gap-2">
            ‚ö†Ô∏è {t('autoria.fixErrors', 'Fix the following errors:')}
          </h4>
          <ul className="text-sm text-red-700 space-y-1">
            {errors.map((error, index) => (
              <li key={index}>‚Ä¢ {error}</li>
            ))}
          </ul>
        </div>
      )}

      {/* üìû –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ */}
      <div className="space-y-4">
        {contacts.map((contact, index) => {
          const typeInfo = getContactTypeInfo(contact.type);
          const isRequired = typeInfo.required && index === 0; // –ü–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
          
          return (
            <Card key={index} className="relative">
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-sm font-medium flex items-center gap-2">
                    {typeInfo.label}
                    {isRequired && <Badge variant="destructive" className="text-xs">{t('required')}</Badge>}
                  </CardTitle>
                  
                  <div className="flex items-center gap-2">
                    {/* üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ */}
                    <div className="flex items-center gap-2">
                      {contact.is_visible ? (
                        <Eye className="h-4 w-4 text-green-600" />
                      ) : (
                        <EyeOff className="h-4 w-4 text-gray-400" />
                      )}
                      <Switch
                        checked={contact.is_visible}
                        onCheckedChange={(checked) => updateContact(index, 'is_visible', checked)}
                      />
                    </div>
                    
                    {/* üóëÔ∏è –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                    {!isRequired && (
                      <Button
                        onClick={() => removeContact(index)}
                        variant="ghost"
                        size="sm"
                        className="text-red-600 hover:text-red-700 hover:bg-red-50"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-4">
                {/* üéØ –¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞ */}
                <div className="space-y-2">
                  <Label htmlFor={`contact-type-${index}`}>{t('contactType')}</Label>
                  <Select
                    value={contact.type}
                    onValueChange={(value) => updateContact(index, 'type', value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {CONTACT_TYPES.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* üìù –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ */}
                <div className="space-y-2">
                  <Label htmlFor={`contact-value-${index}`}>
                    {t('contactValue')} {isRequired && <span className="text-red-500">*</span>}
                  </Label>
                  <Input
                    id={`contact-value-${index}`}
                    type={contact.type === 'email' ? 'email' : contact.type === 'phone' ? 'tel' : 'text'}
                    placeholder={typeInfo.placeholder}
                    value={contact.value}
                    onChange={(e) => updateContact(index, 'value', e.target.value)}
                    required={isRequired}
                  />
                </div>

                {/* üìù –ó–∞–º–µ—Ç–∫–∞ */}
                <div className="space-y-2">
                  <Label htmlFor={`contact-note-${index}`}>{t('optionalNote')}</Label>
                  <Input
                    id={`contact-note-${index}`}
                    placeholder={t('contactNotePlaceholder')}
                    value={contact.note}
                    onChange={(e) => updateContact(index, 'note', e.target.value)}
                  />
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* ‚ûï –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ */}
      <Button
        onClick={addContact}
        variant="outline"
        className="w-full border-dashed border-2 hover:border-solid"
      >
        <Plus className="h-4 w-4 mr-2" />
        ‚ûï {t('addContact')}
      </Button>

      {/* –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ */}

      {/* üíæ –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex gap-3">
        <Button onClick={handleSave} className="flex-1" variant="default">
          <Save className="h-4 w-4 mr-2" />
          {t('saveContacts')}
        </Button>
        <Button onClick={handleNext} className="flex-1" variant="outline">
          <CheckCircle className="h-4 w-4 mr-2" />
          {t('next')}
        </Button>
      </div>

      {/* üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-blue-800">
              üí° {t('tip')}
            </h3>
            <div className="mt-2 text-sm text-blue-700">
              <p>
                {t('contactTip')}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactForm;
