"use client";

import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useAutoRiaAuth } from '@/hooks/autoria/useAutoRiaAuth';
import { useUserProfileData } from '@/hooks/useUserProfileData';
import { useI18n } from '@/contexts/I18nContext';
import { User, Crown, X } from 'lucide-react';
import { cleanupBackendTokens } from '@/lib/auth/cleanupAuth';
import { useToast } from '@/hooks/use-toast';

/**
 * –ë–µ–π–¥–∂ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ AutoRia
 * –ü–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ AutoRia
 * –í–ê–ñ–õ–ò–í–û: –ü–æ—Ç—Ä—ñ–±–Ω–∞ NextAuth —Å–µ—Å—Å—ñ—è + backend —Ç–æ–∫–µ–Ω–∏
 */
const AutoRiaUserBadge: React.FC = () => {
  const router = useRouter();
  const { t } = useI18n();
  const { data: session, status } = useSession();
  const { user, isAuthenticated, hasBackendTokens } = useAutoRiaAuth();
  const { data: userProfileData } = useUserProfileData();
  const { toast } = useToast();

  // –í—ñ–¥–ª–∞–¥–∫–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  React.useEffect(() => {
    if (isAuthenticated) {
      console.log('[AutoRiaUserBadge] User authenticated:', {
        hasUser: !!user,
        hasProfileData: !!userProfileData,
        sessionStatus: status,
        hasBackendTokens,
      });
    }
  }, [isAuthenticated, status, hasBackendTokens]); // –¢—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ isAuthenticated!

  // –ö–†–ò–¢–ò–ß–ù–û: –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –±–µ–π–¥–∂ —è–∫—â–æ –Ω–µ–º–∞—î NextAuth —Å–µ—Å—Å—ñ—ó
  // –ù–µ–º–æ–∂–ª–∏–≤–æ –º–∞—Ç–∏ backend —Ç–æ–∫–µ–Ω–∏ –±–µ–∑ NextAuth —Å–µ—Å—Å—ñ—ó
  if (status === 'loading') {
    return null; // –©–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
  }
  
  // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∏–ª–∏ —Å—Ç–∞—Ç—É—Å unauthenticated - —Å–∫—Ä—ã–≤–∞–µ–º –±–µ–π–¥–∂
  if (status === 'unauthenticated' || !session) {
    return null; // –ù–µ–º–∞—î NextAuth —Å–µ—Å—Å—ñ—ó - –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ backend —Ç–æ–∫–µ–Ω—ñ–≤
  }

  // –ü–æ–∫–∞–∑—É—î–º–æ –±–µ–π–¥–∂ –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —î backend —Ç–æ–∫–µ–Ω–∏
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ hasBackendTokens —Ç–æ—á–Ω–æ true
  if (hasBackendTokens !== true) {
    return null;
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
  const actualUser = user || userProfileData?.user;
  if (!actualUser) {
    return null;
  }

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∞–∫–∞—É–Ω—Ç—É
  const accountType = userProfileData?.account?.account_type?.toUpperCase() || 'BASIC';
  const isPremium = ['PREMIUM', 'VIP'].includes(accountType);
  
  // –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ email (–≤—ñ–Ω –≤–∂–µ –≤ AuthBadge)
  const displayName = actualUser.username || 
                      (actualUser.first_name && actualUser.last_name 
                        ? `${actualUser.first_name} ${actualUser.last_name}` 
                        : actualUser.first_name || 'AutoRia');
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const isSuperuser = actualUser?.is_superuser || false;
  const isStaff = actualUser?.is_staff || false;
  const isModerator = actualUser?.groups?.some((g: any) => g.name === 'Moderators') || false;
  
  // –ó–±–∏—Ä–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
  const roles = [];
  if (isSuperuser) roles.push('–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä');
  if (isStaff && !isSuperuser) roles.push('–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫');
  if (isModerator && !isSuperuser) roles.push('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä');
  if (isPremium) roles.push(`${accountType} –∞–∫–∞—É–Ω—Ç`);
  if (roles.length === 0) roles.push('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á');

  // –û–±—Ä–æ–±–Ω–∏–∫ LOGOUT (–æ—á–∏—Å—Ç–∫–∞ Redis + localStorage, –ë–ï–ó NextAuth —Å–µ—Å—Å—ñ—ó)
  const handleClearTokens = async (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    try {
      // LOGOUT: –û—á–∏—â—É—î–º–æ Redis —ñ backend —Ç–æ–∫–µ–Ω–∏ (NextAuth —Å–µ—Å—Å—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è)
      await cleanupBackendTokens();
      
      toast({
        title: `‚úÖ ${t('common.success')}`,
        description: t('auth.tokensCleared'),
        duration: 2000,
      });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ /login –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è backend —Ç–æ–∫–µ–Ω—ñ–≤
      // NextAuth —Å–µ—Å—Å—ñ—è —â–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ–º—É –Ω–µ —Ç—Ä–µ–±–∞ –∑–Ω–æ–≤—É –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å —á–µ—Ä–µ–∑ OAuth
      setTimeout(() => {
        router.push('/login?message=' + encodeURIComponent(t('auth.tokensClearedPleaseLogin')));
        router.refresh(); // –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Ä–æ—É—Ç
      }, 500);
    } catch (error) {
      console.error('[AutoRiaUserBadge] Error during logout:', error);
      toast({
        title: `‚ùå ${t('common.error')}`,
        description: t('auth.failedToClearTokens'),
        variant: 'destructive',
      });
    }
  };

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Badge
            variant="outline"
            className={`cursor-pointer transition-all shadow-sm text-xs py-0.5 px-2 ${
              isPremium 
                ? 'bg-gradient-to-r from-amber-400 to-yellow-500 text-white border-yellow-600 hover:from-amber-500 hover:to-yellow-600 font-semibold'
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
            }`}
          >
            <Link href="/autoria/profile" className="flex items-center gap-1.5">
              {isPremium ? (
                <Crown className="h-3 w-3" />
              ) : (
                <User className="h-3 w-3" />
              )}
              <span className="text-xs">{displayName}</span>
            </Link>
          </Badge>
        </TooltipTrigger>
        <TooltipContent 
          side="bottom" 
          align="start"
          className="max-w-[280px] p-3 z-[10000000]"
          sideOffset={8}
          alignOffset={-120}
          avoidCollisions={true}
          collisionPadding={20}
        >
          <div className="space-y-2">
            <div>
              <p className="font-semibold text-sm truncate">{displayName}</p>
              <p className="text-xs text-muted-foreground truncate">{actualUser.email}</p>
            </div>
            
            <div className="border-t pt-2">
              <p className="text-xs font-medium mb-1">–ü–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–Ω—è:</p>
              <div className="flex flex-wrap gap-1">
                {roles.map((role, index) => (
                  <span
                    key={index}
                    className={`text-xs px-2 py-0.5 rounded-full whitespace-nowrap ${
                      role.includes('–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä')
                        ? 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200 font-bold'
                        : role.includes('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä')
                        ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200'
                        : role.includes('–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫')
                        ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200'
                        : role.includes('PREMIUM') || role.includes('VIP')
                        ? 'bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-200 font-bold'
                        : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-200'
                    }`}
                  >
                    {role}
                  </span>
                ))}
              </div>
            </div>
            
            {/* LOGOUT - –æ—á–∏—Å—Ç–∫–∞ Redis —Ç–æ–∫–µ–Ω—ñ–≤ (NextAuth —Å–µ—Å—Å—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è) */}
            <div className="border-t pt-2 flex items-center justify-between">
              <p className="text-xs text-muted-foreground">Logout (Redis)</p>
              <button
                onClick={handleClearTokens}
                className="group p-1 hover:bg-red-500 dark:hover:bg-red-600 rounded transition-colors"
                title="Logout: –æ—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏ Redis (NextAuth —Å–µ—Å—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è)"
              >
                <X className="h-4 w-4 text-red-600 dark:text-red-400 group-hover:text-white transition-colors" />
              </button>
            </div>
            
            <p className="text-xs text-muted-foreground italic border-t pt-1">
              üëâ –ö–ª—ñ–∫ –Ω–∞ –±–µ–π–¥–∂ ‚Üí –ü—Ä–æ—Ñ—ñ–ª—å
            </p>
          </div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

export default AutoRiaUserBadge;
