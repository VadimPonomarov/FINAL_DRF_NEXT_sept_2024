/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö fetch –∑–∞–ø—Ä–æ—Å–æ–≤
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
 */

export interface CachedFetchOptions {
  // –í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
  cacheTime?: number;
  // –í—Ä–µ–º—è stale-while-revalidate –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 48 —á–∞—Å–æ–≤)
  staleTime?: number;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  headers?: Record<string, string>;
  // –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  body?: any;
  // –¢–∏–ø –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
  cacheType?: 'default' | 'no-store' | 'reload' | 'no-cache' | 'force-cache' | 'only-if-cached';
}

/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fetch –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export async function cachedFetch(url: string, options: CachedFetchOptions = {}) {
  const {
    cacheTime = 86400, // 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    staleTime = 172800, // 48 —á–∞—Å–æ–≤ stale –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    headers = {},
    method = 'GET',
    body,
    cacheType = 'force-cache'
  } = options;

  console.log(`[CachedFetch] üöÄ Fetching ${url} with cache time: ${cacheTime}s`);

  const fetchOptions: RequestInit = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'Cache-Control': `public, max-age=${cacheTime}, stale-while-revalidate=${staleTime}`,
      ...headers
    },
    cache: cacheType,
    ...(body && { body: JSON.stringify(body) })
  };

  // –î–ª—è Next.js –¥–æ–±–∞–≤–ª—è–µ–º revalidate
  if (typeof window === 'undefined') {
    (fetchOptions as any).next = { 
      revalidate: cacheTime 
    };
  }

  const response = await fetch(url, fetchOptions);

  if (!response.ok) {
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è –æ—à–∏–±–æ–∫ 404 –∏ 500
    if (response.status === 404 || response.status === 500) {
      console.warn(`[CachedFetch] ${response.status} error detected for ${url}, returning empty data`);
      return { options: [] };
    }
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

// üöÄ –ë–†–ï–ù–î–´: –î–æ–ª–≥–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const fetchBrandsWithCache = async (search?: string, vehicleTypeId?: string) => {
  const params = new URLSearchParams();
  if (search) params.append('search', search);
  if (vehicleTypeId) params.append('vehicle_type_id', vehicleTypeId);
  params.append('page_size', '50');

  return cachedFetch(`/api/public/reference/brands?${params}`, {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800  // 48 —á–∞—Å–æ–≤ stale
  });
};

// üöÄ –ú–û–î–ï–õ–ò: –î–æ–ª–≥–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const fetchModelsWithCache = async (brandId: string) => {
  const params = new URLSearchParams();
  params.append('brand_id', brandId);
  params.append('page_size', '100');

  return cachedFetch(`/api/public/reference/models?${params}`, {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800  // 48 —á–∞—Å–æ–≤ stale
  });
};

// üöÄ –í–°–ï –°–ü–†–ê–í–û–ß–ù–´–ï –î–ê–ù–ù–´–ï: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)
export const fetchVehicleTypesWithCache = async () => {
  return cachedFetch('/api/public/reference/vehicle-types?page_size=30', {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800  // 48 —á–∞—Å–æ–≤ stale
  });
};

export const fetchColorsWithCache = async () => {
  return cachedFetch('/api/public/reference/colors?page_size=100', {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800  // 48 —á–∞—Å–æ–≤ stale
  });
};

export const fetchRegionsWithCache = async () => {
  return cachedFetch('/api/public/reference/regions?page_size=30', {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800  // 48 —á–∞—Å–æ–≤ stale
  });
};

export const fetchCitiesWithCache = async (regionId: string) => {
  const params = new URLSearchParams();
  params.append('region_id', regionId);
  params.append('page_size', '50');

  return cachedFetch(`/api/public/reference/cities?${params}`, {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800  // 48 —á–∞—Å–æ–≤ stale
  });
};

// üöÄ –û–°–¢–ê–õ–¨–ù–´–ï –°–ü–†–ê–í–û–ß–ù–´–ï –î–ê–ù–ù–´–ï: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
export const fetchFuelTypesWithCache = async () => {
  return cachedFetch('/api/public/reference/fuel-types?page_size=20', {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800,  // 48 —á–∞—Å–æ–≤ stale
    cacheType: 'no-cache'  // –û—Ç–∫–ª—é—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö 404
  });
};

export const fetchTransmissionsWithCache = async () => {
  return cachedFetch('/api/public/reference/transmissions?page_size=10', {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800,  // 48 —á–∞—Å–æ–≤ stale
    cacheType: 'no-cache'  // –û—Ç–∫–ª—é—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö 404
  });
};

export const fetchBodyTypesWithCache = async () => {
  return cachedFetch('/api/public/reference/body-types?page_size=30', {
    cacheTime: 86400,  // 24 —á–∞—Å–∞
    staleTime: 172800,  // 48 —á–∞—Å–æ–≤ stale
    cacheType: 'no-cache'  // –û—Ç–∫–ª—é—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö 404
  });
};

/**
 * –•—É–∫ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export const useCachedReferenceAPI = () => {
  return {
    fetchBrands: fetchBrandsWithCache,
    fetchModels: fetchModelsWithCache,
    fetchVehicleTypes: fetchVehicleTypesWithCache,
    fetchColors: fetchColorsWithCache,
    fetchRegions: fetchRegionsWithCache,
    fetchCities: fetchCitiesWithCache,
    fetchFuelTypes: fetchFuelTypesWithCache,
    fetchTransmissions: fetchTransmissionsWithCache,
    fetchBodyTypes: fetchBodyTypesWithCache,
  };
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const preloadCriticalReferenceData = async () => {
  console.log('[CachedFetch] üöÄ Preloading critical reference data...');
  
  try {
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    await Promise.all([
      fetchVehicleTypesWithCache(),
      fetchRegionsWithCache(),
      fetchColorsWithCache(),
      fetchFuelTypesWithCache(),
      fetchTransmissionsWithCache(),
      fetchBodyTypesWithCache()
    ]);
    
    console.log('[CachedFetch] ‚úÖ Critical reference data preloaded');
  } catch (error) {
    console.error('[CachedFetch] ‚ùå Failed to preload reference data:', error);
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const clearReferenceDataCache = async () => {
  if ('caches' in window) {
    const cacheNames = await caches.keys();
    const referenceDataCaches = cacheNames.filter(name => 
      name.includes('reference') || name.includes('api/public')
    );
    
    await Promise.all(
      referenceDataCaches.map(cacheName => caches.delete(cacheName))
    );
    
    console.log('[CachedFetch] üóëÔ∏è Reference data cache cleared');
  }
};

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const getCacheStats = async () => {
  if ('caches' in window) {
    const cacheNames = await caches.keys();
    const stats = await Promise.all(
      cacheNames.map(async (name) => {
        const cache = await caches.open(name);
        const keys = await cache.keys();
        return {
          name,
          entries: keys.length,
          urls: keys.map(req => req.url)
        };
      })
    );
    
    return stats;
  }
  
  return [];
};
