"use client";

/**
 * –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL-—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç http, https, ftp –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏ –ø—É—Ç–∏
 */
const URL_REGEX = /(https?:\/\/|www\.)[^\s\n]+/gi;

/**
 * –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Markdown —Å—Å—ã–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ [—Ç–µ–∫—Å—Ç](URL)
 */
const MARKDOWN_LINK_REGEX = /\[([^\]]+)\]\(([^)]+)\)/gi;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ URL-—Å—Å—ã–ª–∫–æ–π
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns true, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è URL-—Å—Å—ã–ª–∫–æ–π
 */
export function isUrl(text: string): boolean {
  if (!text) return false;
  return URL_REGEX.test(text);
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ URL-—Å—Å—ã–ª–∫–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä—è–º—ã–µ URL, —Ç–∞–∫ –∏ Markdown —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](URL)
 * @param text –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–æ–º (text –∏–ª–∏ url) –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
 */
export function parseTextWithLinks(text: string): Array<{ type: 'text' | 'url', content: string, label?: string }> {
  if (!text) return [];

  const parts: Array<{ type: 'text' | 'url', content: string, label?: string }> = [];
  const allMatches: Array<{ index: number, length: number, url: string, label?: string }> = [];

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  URL_REGEX.lastIndex = 0;
  MARKDOWN_LINK_REGEX.lastIndex = 0;

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Markdown —Å—Å—ã–ª–∫–∏
  let markdownMatch;
  while ((markdownMatch = MARKDOWN_LINK_REGEX.exec(text)) !== null) {
    const label = markdownMatch[1];
    let url = markdownMatch[2];

    // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å www., –¥–æ–±–∞–≤–ª—è–µ–º https://
    if (url.startsWith('www.')) {
      url = 'https://' + url;
    }

    allMatches.push({
      index: markdownMatch.index,
      length: markdownMatch[0].length,
      url: url,
      label: label
    });
  }

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä—è–º—ã–µ URL (–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ, —á—Ç–æ —É–∂–µ –≤ Markdown —Å—Å—ã–ª–∫–∞—Ö)
  let urlMatch;
  while ((urlMatch = URL_REGEX.exec(text)) !== null) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç URL –≤–Ω—É—Ç—Ä–∏ Markdown —Å—Å—ã–ª–∫–∏
    const isInsideMarkdown = allMatches.some(mdMatch =>
      urlMatch.index >= mdMatch.index &&
      urlMatch.index < mdMatch.index + mdMatch.length
    );

    if (!isInsideMarkdown) {
      let url = urlMatch[0];

      // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å www., –¥–æ–±–∞–≤–ª—è–µ–º https://
      if (url.startsWith('www.')) {
        url = 'https://' + url;
      }

      allMatches.push({
        index: urlMatch.index,
        length: urlMatch[0].length,
        url: url
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
  allMatches.sort((a, b) => a.index - b.index);

  let lastIndex = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  for (const match of allMatches) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Å—Å—ã–ª–∫–∏
    if (match.index > lastIndex) {
      parts.push({
        type: 'text',
        content: text.substring(lastIndex, match.index)
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    parts.push({
      type: 'url',
      content: match.url,
      label: match.label
    });

    lastIndex = match.index + match.length;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Å—ã–ª–∫–∏
  if (lastIndex < text.length) {
    parts.push({
      type: 'text',
      content: text.substring(lastIndex)
    });
  }

  return parts;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç URL-—Å—Å—ã–ª–∫–∏ (–ø—Ä—è–º—ã–µ –∏–ª–∏ Markdown)
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns true, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç URL-—Å—Å—ã–ª–∫–∏
 */
export function hasLinks(text: string): boolean {
  if (!text) return false;

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  URL_REGEX.lastIndex = 0;
  MARKDOWN_LINK_REGEX.lastIndex = 0;

  return URL_REGEX.test(text) || MARKDOWN_LINK_REGEX.test(text);
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown —Å—Å—ã–ª–∫–∏ –≤ HTML —Å—Å—ã–ª–∫–∏
 * @param text –¢–µ–∫—Å—Ç —Å Markdown —Å—Å—ã–ª–∫–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞ [—Ç–µ–∫—Å—Ç](URL)
 * @returns –¢–µ–∫—Å—Ç —Å HTML —Å—Å—ã–ª–∫–∞–º–∏
 */
export function convertMarkdownLinksToHtml(text: string): string {
  if (!text) return text;

  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Markdown —Å—Å—ã–ª–æ–∫ [—Ç–µ–∫—Å—Ç](URL)
  const markdownLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;

  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ Markdown —Å—Å—ã–ª–∫–∏ –Ω–∞ HTML —Å—Å—ã–ª–∫–∏
  const convertedText = text.replace(markdownLinkRegex, (match, linkText, url) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const isFile = /\.(xlsx|xls|csv|pdf|doc|docx|txt|json|xml)(\?.*)?$/i.test(url);
    const isMinioFile = url.includes('localhost:9000');

    if (isFile || isMinioFile) {
      // –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å download –∞—Ç—Ä–∏–±—É—Ç–æ–º
      const fileName = url.split('/').pop() || 'file';
      return `<a href="${url}" download="${fileName}" target="_blank" style="color: #3b82f6; text-decoration: underline; font-weight: 500;">üìÅ ${linkText}</a>`;
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Å—ã–ª–∫—É
      return `<a href="${url}" target="_blank" rel="noopener noreferrer" style="color: #3b82f6; text-decoration: underline;">üîó ${linkText}</a>`;
    }
  });

  return convertedText;
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
 */
export function testMarkdownParser() {
  const testText = "- [Excel —Ç–∞–±–ª–∏—Ü–∞](http://localhost:9000/analytics-tables/table_20250525_214504_aa7dd062.xlsx)";
  console.log("Testing markdown parser:");
  console.log("Input:", testText);

  const converted = convertMarkdownLinksToHtml(testText);
  console.log("Converted:", converted);

  return converted;
}
