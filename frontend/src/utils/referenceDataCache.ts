/**
 * –ö–µ—à –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –¥–∞–Ω–Ω—ã–º
 */

interface CacheItem<T> {
  data: T;
  timestamp: number;
  expiry: number;
}

class ReferenceDataCache {
  private cache = new Map<string, CacheItem<any>>();
  private readonly DEFAULT_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ - –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
   */
  async get<T>(
    key: string, 
    fetcher: () => Promise<T>, 
    ttl: number = this.DEFAULT_TTL
  ): Promise<T> {
    const cached = this.cache.get(key);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞
    if (cached && Date.now() < cached.expiry) {
      console.log(`[Cache] HIT for key: ${key}`);
      return cached.data;
    }

    console.log(`[Cache] MISS for key: ${key}, fetching...`);
    
    try {
      const data = await fetcher();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      this.cache.set(key, {
        data,
        timestamp: Date.now(),
        expiry: Date.now() + ttl
      });
      
      return data;
    } catch (error) {
      console.error(`[Cache] Error fetching data for key ${key}:`, error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (cached) {
        console.log(`[Cache] Returning stale data for key: ${key}`);
        return cached.data;
      }
      
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
   */
  clear(key?: string) {
    if (key) {
      this.cache.delete(key);
      console.log(`[Cache] Cleared key: ${key}`);
    } else {
      this.cache.clear();
      console.log(`[Cache] Cleared all cache`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
   */
  getStats() {
    const now = Date.now();
    const entries = Array.from(this.cache.entries());
    
    return {
      totalEntries: entries.length,
      validEntries: entries.filter(([_, item]) => now < item.expiry).length,
      expiredEntries: entries.filter(([_, item]) => now >= item.expiry).length,
      cacheKeys: entries.map(([key]) => key)
    };
  }
}

// Singleton instance
export const referenceCache = new ReferenceDataCache();

/**
 * –•—É–∫ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
 */
import { useMemo, useCallback } from 'react';

export function useCachedReferenceData() {
  // üß† –ú–ï–ú–û–ò–ó–ê–¶–ò–Ø: –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const fetchBrands = useCallback(async (search?: string) => {
    const cacheKey = `brands_${search || 'all'}`;

    return referenceCache.get(cacheKey, async () => {
      const params = new URLSearchParams();
      if (search) params.append('search', search);
      params.append('page_size', '50'); // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä

      // üöÄ –î–û–õ–ì–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞
      const response = await fetch(`/api/public/reference/brands?${params}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'public, max-age=86400, stale-while-revalidate=172800', // 24 —á–∞—Å–∞ –∫–µ—à, 48 —á–∞—Å–æ–≤ stale
        },
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cache: 'force-cache',
        next: {
          revalidate: 86400 // 24 —á–∞—Å–∞
        }
      });

      if (!response.ok) throw new Error('Failed to fetch brands');

      const data = await response.json();
      return data.options || [];
    });
  }, []);

  const fetchVehicleTypes = useCallback(async () => {
    return referenceCache.get('vehicle_types', async () => {
      // üöÄ –î–û–õ–ì–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞
      const response = await fetch('/api/public/reference/vehicle-types?page_size=30', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'public, max-age=86400, stale-while-revalidate=172800', // 24 —á–∞—Å–∞ –∫–µ—à
        },
        cache: 'force-cache',
        next: {
          revalidate: 86400 // 24 —á–∞—Å–∞
        }
      });

      if (!response.ok) throw new Error('Failed to fetch vehicle types');

      const data = await response.json();
      return data.options || [];
    });
  }, []);

  const fetchColors = useCallback(async () => {
    return referenceCache.get('colors', async () => {
      // üöÄ –î–û–õ–ì–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞
      const response = await fetch('/api/public/reference/colors?page_size=100', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'public, max-age=86400, stale-while-revalidate=172800', // 24 —á–∞—Å–∞ –∫–µ—à
        },
        cache: 'force-cache',
        next: {
          revalidate: 86400 // 24 —á–∞—Å–∞
        }
      });

      if (!response.ok) throw new Error('Failed to fetch colors');

      const data = await response.json();
      return data.options || [];
    });
  }, []);

  const fetchRegions = useCallback(async () => {
    return referenceCache.get('regions', async () => {
      // üöÄ –î–û–õ–ì–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞
      const response = await fetch('/api/public/reference/regions?page_size=30', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'public, max-age=86400, stale-while-revalidate=172800', // 24 —á–∞—Å–∞ –∫–µ—à
        },
        cache: 'force-cache',
        next: {
          revalidate: 86400 // 24 —á–∞—Å–∞
        }
      });

      if (!response.ok) throw new Error('Failed to fetch regions');

      const data = await response.json();
      return data.options || [];
    });
  }, []);

  const fetchCities = useCallback(async (regionId: string) => {
    const cacheKey = `cities_${regionId}`;

    return referenceCache.get(cacheKey, async () => {
      // üöÄ –î–û–õ–ì–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞
      const response = await fetch(`/api/public/reference/cities?region_id=${regionId}&page_size=50`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'public, max-age=86400, stale-while-revalidate=172800', // 24 —á–∞—Å–∞ –∫–µ—à
        },
        cache: 'force-cache',
        next: {
          revalidate: 86400 // 24 —á–∞—Å–∞
        }
      });

      if (!response.ok) throw new Error('Failed to fetch cities');

      const data = await response.json();
      return data.options || [];
    });
  }, []);

  // üß† –ú–ï–ú–û–ò–ó–ê–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω
  return useMemo(() => ({
    fetchBrands,
    fetchVehicleTypes,
    fetchColors,
    fetchRegions,
    fetchCities,
    clearCache: referenceCache.clear.bind(referenceCache),
    getCacheStats: referenceCache.getStats.bind(referenceCache)
  }), [fetchBrands, fetchVehicleTypes, fetchColors, fetchRegions, fetchCities]);
}
