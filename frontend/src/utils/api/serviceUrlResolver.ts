/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è URL —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
 * –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —Ç–∞–∫ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Next.js.
 * –ü—Ä–∏–Ω—Ü–∏–ø DRY - –æ–¥–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Å—Ä–µ–¥.
 */

interface ServiceConfig {
  host: string;
  port?: number;
  protocol: string;
}

interface ServiceInfo {
  serviceName: string;
  environment: string;
  isClient: boolean;
  sourcesChecked: string[];
  finalUrl: string;
  sourceUsed: string;
}

type Environment = 'local' | 'docker' | 'production';
type RedisGetter = (key: string) => Promise<any>;

class ServiceUrlResolver {
  private environment: Environment;
  private isClient: boolean;
  private redisGetter?: RedisGetter;

  constructor(redisGetter?: RedisGetter) {
    this.redisGetter = redisGetter;
    this.isClient = typeof window !== 'undefined';
    this.environment = this.detectEnvironment();
  }

  /**
   * –†–∞–∑—Ä–µ—à–∞–µ—Ç URL —Å–µ—Ä–≤–∏—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async resolveUrl(serviceName: string, path: string = ''): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤ Redis Service Registry
    const isServiceInRedis = await this.isServiceRegisteredInRedis(serviceName);

    if (isServiceInRedis) {
      // Docker —Å—Ä–µ–¥–∞: —Å–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω –≤ Redis
      console.debug(`üê≥ Service '${serviceName}' found in Redis - using Docker environment`);

      // –ë—Ä–∞—É–∑–µ—Ä –í–°–ï–ì–î–ê —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ö–æ—Å—Ç–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ Docker
      // –ü–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø–æ—Ä—Ç—ã –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const externalUrl = this.getDockerExternalUrl(serviceName, path);
      this.logSource(serviceName, 'Docker External (Browser always on host)', externalUrl);
      return externalUrl;
    } else {
      // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞: —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ—Ç –≤ Redis
      console.debug(`üè† Service '${serviceName}' not found in Redis - using local environment`);

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ frontend/.env.local
      const localEnvUrl = this.getFromEnvironment(serviceName, path);
      if (localEnvUrl) {
        this.logSource(serviceName, 'Environment Variables (frontend/.env.local)', localEnvUrl);
        return localEnvUrl;
      }
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Fallback –∑–Ω–∞—á–µ–Ω–∏—è (localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const defaultUrl = this.getFromDefaults(serviceName, path);
    this.logSource(serviceName, 'Fallback Values (localhost)', defaultUrl);
    return defaultUrl;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  async getServiceInfo(serviceName: string): Promise<ServiceInfo> {
    const info: ServiceInfo = {
      serviceName,
      environment: this.environment,
      isClient: this.isClient,
      sourcesChecked: [],
      finalUrl: '',
      sourceUsed: ''
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    const redisUrl = await this.getFromRedis(serviceName);
    if (redisUrl) {
      info.sourcesChecked.push('redis');
      info.finalUrl = redisUrl;
      info.sourceUsed = 'redis';
      return info;
    } else {
      info.sourcesChecked.push('redis (not available)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Environment
    const envUrl = this.getFromEnvironment(serviceName);
    if (envUrl) {
      info.sourcesChecked.push('environment');
      info.finalUrl = envUrl;
      info.sourceUsed = 'environment';
      return info;
    } else {
      info.sourcesChecked.push('environment (not set)');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º defaults
    const defaultUrl = this.getFromDefaults(serviceName);
    info.sourcesChecked.push('defaults');
    info.finalUrl = defaultUrl;
    info.sourceUsed = 'defaults';

    return info;
  }

  private async getFromRedis(serviceName: string, path: string = ''): Promise<string | null> {
    if (!this.redisGetter) {
      return null;
    }

    try {
      const serviceData = await this.redisGetter(`service_registry:${serviceName}`);
      if (!serviceData) {
        // Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        console.debug(`Service '${serviceName}' not found in Redis (may be after restart)`);
        return null;
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const parsedData = typeof serviceData === 'string'
        ? JSON.parse(serviceData)
        : serviceData;

      let config: ServiceConfig = {
        host: parsedData.host || 'localhost',
        port: parsedData.port,
        protocol: parsedData.protocol || 'http'
      };

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ Docker URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ù–ï –≤ Docker
      const isDockerEnvironment = process.env.NEXT_PUBLIC_IS_DOCKER === 'true';
      if (this.isClient && !isDockerEnvironment) {
        config = this.transformDockerUrlForClient(config, serviceName);
      }

      console.debug(`Service '${serviceName}' found in Redis:`, config);
      return this.buildUrl(config, path);

    } catch (error) {
      // Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.debug(`Redis unavailable for service '${serviceName}':`, error);
      return null;
    }
  }

  private getDockerInternalUrl(serviceName: string, path: string = ''): string {
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Docker URL –¥–ª—è –º–µ–∂–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
     */
    const dockerInternalMapping: Record<string, ServiceConfig> = {
      'app': { host: 'app', port: 8000, protocol: 'http' },
      'backend': { host: 'app', port: 8000, protocol: 'http' },
      'frontend': { host: 'frontend', port: 3000, protocol: 'http' },
      'redis': { host: 'redis', port: 6379, protocol: 'redis' },
      'pg': { host: 'pg', port: 5432, protocol: 'postgresql' },
      'postgres': { host: 'pg', port: 5432, protocol: 'postgresql' },
      'rabbitmq': { host: 'rabbitmq', port: 5672, protocol: 'amqp' },
      'flower': { host: 'flower', port: 5555, protocol: 'http' },
      'redis-insight': { host: 'redis-insight', port: 5540, protocol: 'http' },
      'minio': { host: 'minio', port: 9000, protocol: 'http' },
      'mailing': { host: 'mailing', port: 8000, protocol: 'http' },
    };

    const config = dockerInternalMapping[serviceName] || {
      host: serviceName,
      port: 8000,
      protocol: 'http'
    };

    console.debug(`üê≥ Docker internal URL for '${serviceName}':`, config);
    return this.buildUrl(config, path);
  }

  private getDockerExternalUrl(serviceName: string, path: string = ''): string {
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π Docker URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å —Ö–æ—Å—Ç–∞
     */
    const dockerExternalMapping: Record<string, ServiceConfig> = {
      'app': { host: 'localhost', port: 8000, protocol: 'http' }, // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç
      'backend': { host: 'localhost', port: 8000, protocol: 'http' },
      'frontend': { host: 'localhost', port: 3000, protocol: 'http' },
      'redis': { host: 'localhost', port: 6379, protocol: 'redis' },
      'pg': { host: 'localhost', port: 5432, protocol: 'postgresql' },
      'postgres': { host: 'localhost', port: 5432, protocol: 'postgresql' },
      'rabbitmq': { host: 'localhost', port: 5672, protocol: 'amqp' },
      'flower': { host: 'localhost', port: 5555, protocol: 'http' },
      'redis-insight': { host: 'localhost', port: 5540, protocol: 'http' },
      'minio': { host: 'localhost', port: 9000, protocol: 'http' },
      'mailing': { host: 'localhost', port: 8001, protocol: 'http' }, // MAILING_EXTERNAL_PORT
    };

    const config = dockerExternalMapping[serviceName] || {
      host: 'localhost',
      port: 8000,
      protocol: 'http'
    };

    console.debug(`üåê Docker external URL for '${serviceName}':`, config);
    return this.buildUrl(config, path);
  }

  private async isServiceRegisteredInRedis(serviceName: string): Promise<boolean> {
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –≤ Redis Service Registry
     */
    if (!this.redisGetter) {
      return false;
    }

    try {
      const serviceData = await this.redisGetter(`service_registry:${serviceName}`);
      return !!serviceData;
    } catch (error) {
      console.debug(`Failed to check service '${serviceName}' in Redis:`, error);
      return false;
    }
  }

  private transformDockerUrlForClient(config: ServiceConfig, serviceName: string): ServiceConfig {
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ Docker URL –≤ –≤–Ω–µ—à–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
     * –ù–∞–ø—Ä–∏–º–µ—Ä: app:8000 -> localhost:8000
     */

    // –ú–∞–ø–ø–∏–Ω–≥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö Docker —Ö–æ—Å—Ç–æ–≤ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –ø–æ—Ä—Ç—ã
    const dockerToExternalMapping: Record<string, { host: string; port?: number }> = {
      'app': { host: 'localhost', port: 8000 }, // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç Django
      'backend': { host: 'localhost', port: 8000 }, // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç Django
      'frontend': { host: 'localhost', port: 3000 },
      'redis': { host: 'localhost', port: 6379 },
      'pg': { host: 'localhost', port: 5432 },
      'rabbitmq': { host: 'localhost', port: 5672 },
      'flower': { host: 'localhost', port: 5555 },
      'redis-insight': { host: 'localhost', port: 5540 },
      'minio': { host: 'localhost', port: 9000 },
    };

    // –ï—Å–ª–∏ —Ö–æ—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º Docker –∏–º–µ–Ω–µ–º, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ
    const mapping = dockerToExternalMapping[config.host];
    if (mapping) {
      console.debug(`üîÑ Transforming Docker URL for client: ${config.host}:${config.port} -> ${mapping.host}:${mapping.port || config.port}`);
      return {
        host: mapping.host,
        port: mapping.port || config.port,
        protocol: config.protocol
      };
    }

    // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É–∂–µ –≤–Ω–µ—à–Ω–∏–π (localhost, IP, –¥–æ–º–µ–Ω), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return config;
  }

  private getFromEnvironment(serviceName: string, path: string = ''): string | null {
    const serviceUpper = serviceName.toUpperCase().replace('-', '_');

    // –í –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ä–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ NEXT_PUBLIC_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const envPrefix = this.isClient ? 'NEXT_PUBLIC_' : '';

    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ frontend/.env.local (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π URL
    const fullUrlVar = `${envPrefix}${serviceUpper}_URL`;
    const fullUrl = this.getEnvVar(fullUrlVar);
    if (fullUrl) {
      console.debug(`üîß Found full URL for '${serviceName}' from environment:`, fullUrl);
      return this.appendPath(fullUrl, path);
    }

    // –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const host = this.getEnvVar(`${envPrefix}${serviceUpper}_HOST`);
    const portStr = this.getEnvVar(`${envPrefix}${serviceUpper}_PORT`);
    const protocol = this.getEnvVar(`${envPrefix}${serviceUpper}_PROTOCOL`) || 'http';

    if (!host) {
      console.debug(`üîß No host found for '${serviceName}' in environment variables`);
      return null;
    }

    const port = portStr ? parseInt(portStr, 10) : undefined;
    const config: ServiceConfig = { host, port, protocol };

    console.debug(`üîß Built URL for '${serviceName}' from environment variables:`, config);
    return this.buildUrl(config, path);
  }

  private getFromDefaults(serviceName: string, path: string = ''): string {
    // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ defaults, –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ—Ç –≤ Docker Registry
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (localhost)
    const localDefaults = this.getLocalDefaults();
    const config = localDefaults[serviceName] || {
      host: 'localhost',
      port: 8000,
      protocol: 'http'
    };

    console.debug(`üè† Using local defaults for '${serviceName}':`, config);
    return this.buildUrl(config, path);
  }

  private getLocalDefaults(): Record<string, ServiceConfig> {
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º localhost –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
    return {
      backend: { host: 'localhost', port: 8000, protocol: 'http' }, // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç Django
      app: { host: 'localhost', port: 8000, protocol: 'http' }, // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç Django
      frontend: { host: 'localhost', port: 3000, protocol: 'http' },
      postgres: { host: 'localhost', port: 5432, protocol: 'postgresql' },
      redis: { host: 'localhost', port: 6379, protocol: 'redis' },
      rabbitmq: { host: 'localhost', port: 5672, protocol: 'amqp' },
      minio: { host: 'localhost', port: 9000, protocol: 'http' },
      flower: { host: 'localhost', port: 5555, protocol: 'http' },
      'redis-insight': { host: 'localhost', port: 5540, protocol: 'http' },
    };
  }

  private detectEnvironment(): Environment {
    const isDocker = this.getEnvVar('IS_DOCKER') === 'true';
    const isProduction = this.getEnvVar('NODE_ENV') === 'production';

    if (isDocker) return 'docker';
    if (isProduction) return 'production';
    return 'local';
  }

  private getDefaultConfigs(): Record<string, ServiceConfig> {
    switch (this.environment) {
      case 'docker':
        return {
          backend: { host: 'app', port: 8000, protocol: 'http' },
          frontend: { host: 'frontend', port: 3000, protocol: 'http' },
          postgres: { host: 'pg', port: 5432, protocol: 'postgresql' },
          redis: { host: 'redis', port: 6379, protocol: 'redis' },
          rabbitmq: { host: 'rabbitmq', port: 5672, protocol: 'amqp' },
          minio: { host: 'minio', port: 9000, protocol: 'http' },
          mailing: { host: 'mailing', port: 8000, protocol: 'http' },
          flower: { host: 'flower', port: 5555, protocol: 'http' },
          'redis-insight': { host: 'redis-insight', port: 5540, protocol: 'http' },
        };

      case 'production':
        return {
          backend: { host: 'api.yourdomain.com', port: 443, protocol: 'https' },
          frontend: { host: 'yourdomain.com', port: 443, protocol: 'https' },
          postgres: { host: 'db.yourdomain.com', port: 5432, protocol: 'postgresql' },
          redis: { host: 'redis.yourdomain.com', port: 6379, protocol: 'redis' },
          rabbitmq: { host: 'rabbitmq.yourdomain.com', port: 5672, protocol: 'amqp' },
          minio: { host: 'storage.yourdomain.com', port: 443, protocol: 'https' },
        };

      default: // local
        return {
          backend: { host: 'localhost', port: 8000, protocol: 'http' }, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: Django —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 8000
          frontend: { host: 'localhost', port: 3000, protocol: 'http' },
          postgres: { host: 'localhost', port: 5432, protocol: 'postgresql' },
          redis: { host: 'localhost', port: 6379, protocol: 'redis' },
          rabbitmq: { host: 'localhost', port: 5672, protocol: 'amqp' },
          minio: { host: 'localhost', port: 9000, protocol: 'http' },
        };
    }
  }

  private buildUrl(config: ServiceConfig, path: string = ''): string {
    let baseUrl: string;
    
    if (config.port && config.port !== 80 && config.port !== 443) {
      baseUrl = `${config.protocol}://${config.host}:${config.port}`;
    } else {
      baseUrl = `${config.protocol}://${config.host}`;
    }

    return this.appendPath(baseUrl, path);
  }

  private appendPath(baseUrl: string, path: string): string {
    if (!path) return baseUrl;
    
    const cleanPath = path.replace(/^\/+/, '');
    const cleanBaseUrl = baseUrl.replace(/\/+$/, '');
    
    return `${cleanBaseUrl}/${cleanPath}`;
  }

  private getEnvVar(name: string): string | undefined {
    if (this.isClient) {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ NEXT_PUBLIC_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      return process.env[name];
    } else {
      // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      return process.env[name];
    }
  }

  private logSource(serviceName: string, source: string, url: string): void {
    const context = this.isClient ? 'Client' : 'Server';
    console.debug(`[${context}] Service '${serviceName}' resolved from ${source}: ${url}`);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let globalResolver: ServiceUrlResolver | null = null;
let globalResolverWithRedis: ServiceUrlResolver | null = null;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä –±–µ–∑ Redis
 */
export function getResolver(): ServiceUrlResolver {
  if (!globalResolver) {
    globalResolver = new ServiceUrlResolver();
  }
  return globalResolver;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä —Å Redis
 */
export function getResolverWithRedis(redisGetter: RedisGetter): ServiceUrlResolver {
  if (!globalResolverWithRedis) {
    globalResolverWithRedis = new ServiceUrlResolver(redisGetter);
  }
  return globalResolverWithRedis;
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è URL —Å–µ—Ä–≤–∏—Å–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
 */
export async function resolveServiceUrl(
  serviceName: string, 
  path: string = '',
  redisGetter?: RedisGetter
): Promise<string> {
  const resolver = redisGetter 
    ? getResolverWithRedis(redisGetter)
    : getResolver();
    
  return resolver.resolveUrl(serviceName, path);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export async function getServiceInfo(
  serviceName: string,
  redisGetter?: RedisGetter
): Promise<ServiceInfo> {
  const resolver = redisGetter 
    ? getResolverWithRedis(redisGetter)
    : getResolver();
    
  return resolver.getServiceInfo(serviceName);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { ServiceUrlResolver };
export type { ServiceConfig, ServiceInfo, RedisGetter };
