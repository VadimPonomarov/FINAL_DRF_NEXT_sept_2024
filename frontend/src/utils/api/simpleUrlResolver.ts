/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
 *
 * –õ–æ–≥–∏–∫–∞:
 * 1. –ï—Å–ª–∏ IS_DOCKER=true (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ docker-compose) -> –∏—Å–ø–æ–ª—å–∑—É–µ–º Docker URL
 * 2. –ï—Å–ª–∏ IS_DOCKER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ false -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ URL
 *
 * –í—Å–µ URL –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã:
 * - .env.local (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
 * - .env.docker (–¥–ª—è Docker –∑–∞–ø—É—Å–∫–∞)
 *
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–ø–æ—Ä—Ç—ã, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –ø—É—Ç–∏) –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–¥–µ
 */

import { PORTS, PROTOCOLS, API_PATHS, EXTERNAL_SERVICES } from '@/config/constants';

interface SimpleUrlConfig {
  backendUrl: string;
  wsHost: string;
  frontendUrl: string;
  isDocker: boolean;
}

class SimpleUrlResolver {
  private static config: SimpleUrlConfig | null = null;

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Docker
   */
  private static isDockerEnvironment(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é IS_DOCKER, –∫–æ—Ç–æ—Ä–∞—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ docker-compose
    return process.env.IS_DOCKER === 'true';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
   */
  static getConfig(): SimpleUrlConfig {
    if (this.config) {
      return this.config;
    }

    const isDocker = this.isDockerEnvironment();

    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL;
    const wsHost = process.env.NEXT_PUBLIC_WS_HOST;
    const frontendUrl = process.env.NEXT_PUBLIC_FRONTEND_URL;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if (!backendUrl || !wsHost || !frontendUrl) {
      console.error('‚ùå Missing required environment variables:');
      console.error(`  NEXT_PUBLIC_BACKEND_URL: ${backendUrl || 'NOT_SET'}`);
      console.error(`  NEXT_PUBLIC_WS_HOST: ${wsHost || 'NOT_SET'}`);
      console.error(`  NEXT_PUBLIC_FRONTEND_URL: ${frontendUrl || 'NOT_SET'}`);
      
      // Fallback –∑–Ω–∞—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      const fallbackConfig: SimpleUrlConfig = {
        backendUrl: isDocker
          ? `${PROTOCOLS.BACKEND}://localhost:${PORTS.BACKEND}` // Browser always connects to exposed ports
          : `${PROTOCOLS.BACKEND}://localhost:${PORTS.BACKEND}`,
        wsHost: isDocker
          ? `localhost:${PORTS.BACKEND}` // Browser always connects to exposed ports
          : `localhost:${PORTS.BACKEND}`,
        frontendUrl: isDocker
          ? `${PROTOCOLS.FRONTEND}://localhost:${PORTS.FRONTEND}` // Browser always connects to exposed ports
          : `${PROTOCOLS.FRONTEND}://localhost:${PORTS.FRONTEND}`,
        isDocker
      };
      
      console.warn('‚ö†Ô∏è Using fallback configuration:', fallbackConfig);
      this.config = fallbackConfig;
      return fallbackConfig;
    }

    this.config = {
      backendUrl,
      wsHost,
      frontendUrl,
      isDocker
    };

    console.log('üéØ Simple URL Configuration:');
    console.log(`  Environment: ${isDocker ? 'Docker' : 'Local'}`);
    console.log(`  Backend URL: ${backendUrl}`);
    console.log(`  WebSocket Host: ${wsHost}`);
    console.log(`  Frontend URL: ${frontendUrl}`);

    return this.config;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±—ç–∫–µ–Ω–¥—É
   */
  static getBackendUrl(path: string = ''): string {
    const config = this.getConfig();
    return `${config.backendUrl}${path}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç WebSocket URL
   */
  static getWebSocketUrl(path: string = ''): string {
    const config = this.getConfig();
    const protocol = PROTOCOLS.WEBSOCKET; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    return `${protocol}://${config.wsHost}${path}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è Redis API (–≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
   */
  static getRedisUrl(key?: string): string {
    if (typeof window !== 'undefined') {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π origin
      const baseUrl = `${window.location.origin}/api/redis`;
      return key ? `${baseUrl}?key=${key}` : baseUrl;
    } else {
      // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const config = this.getConfig();
      const baseUrl = `${config.frontendUrl}/api/redis`;
      return key ? `${baseUrl}?key=${key}` : baseUrl;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
   */
  static getFrontendUrl(path: string = ''): string {
    const config = this.getConfig();
    return `${config.frontendUrl}${path}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Docker
   */
  static isDocker(): boolean {
    return this.getConfig().isDocker;
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–µ—à (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static clearCache(): void {
    this.config = null;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  static logConfig(): void {
    const config = this.getConfig();
    console.log('üìã Current URL Configuration:');
    console.log(`  Environment: ${config.isDocker ? 'Docker' : 'Local'}`);
    console.log(`  Backend URL: ${config.backendUrl}`);
    console.log(`  WebSocket Host: ${config.wsHost}`);
    console.log(`  Frontend URL: ${config.frontendUrl}`);
    console.log('');
    console.log('üîó Generated URLs:');
    console.log(`  Backend API: ${this.getBackendUrl('/api/auth/login')}`);
    console.log(`  WebSocket: ${this.getWebSocketUrl('/api/chat/test/')}`);
    console.log(`  Redis API: ${this.getRedisUrl('backend_auth')}`);
  }
}

export default SimpleUrlResolver;
