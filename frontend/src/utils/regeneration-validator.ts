/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 * –ü—Ä–∏–Ω—Ü–∏–ø: –ü—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ—à–∏–±–∫–∞—Ö - –¥–µ–ª–∞—Ç—å —Ü–∏–∫–ª –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–º–µ—Å—Ç–æ fallback –∑–Ω–∞—á–µ–Ω–∏–π
 */

export interface ValidationIssue {
  type: 'critical' | 'warning' | 'info';
  field: string;
  message: string;
  currentValue: any;
  expectedValue?: any;
}

export interface ValidationResult {
  isValid: boolean;
  needsRegeneration: boolean;
  issues: ValidationIssue[];
  score: number; // 0-100, –≥–¥–µ 100 = –∏–¥–µ–∞–ª—å–Ω–æ
}

export interface RegenerationConfig {
  maxAttempts: number;
  criticalThreshold: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø–∏—Å–∏
  warningThreshold: number;
}

const DEFAULT_CONFIG: RegenerationConfig = {
  maxAttempts: 3,
  criticalThreshold: 80, // –ï—Å–ª–∏ score < 80, –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  warningThreshold: 90   // –ï—Å–ª–∏ score < 90, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
};

/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */
export class RegenerationValidator {
  private config: RegenerationConfig;

  constructor(config: Partial<RegenerationConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
   */
  validateAd(adData: any): ValidationResult {
    const issues: ValidationIssue[] = [];
    let score = 100;

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–ö–†–ò–¢–ò–ß–ù–û)
    const cascadeIssues = this.validateCascadeConsistency(adData);
    issues.push(...cascadeIssues);
    score -= cascadeIssues.filter(i => i.type === 'critical').length * 30;

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∏ —Ç–∏–ø–æ–≤ (–ö–†–ò–¢–ò–ß–ù–û)
    const brandTypeIssues = this.validateBrandTypeMatch(adData);
    issues.push(...brandTypeIssues);
    score -= brandTypeIssues.filter(i => i.type === 'critical').length * 25;

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï)
    const logicIssues = this.validateDataLogic(adData);
    issues.push(...logicIssues);
    score -= logicIssues.filter(i => i.type === 'warning').length * 10;

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö (–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï)
    const completenessIssues = this.validateCompleteness(adData);
    issues.push(...completenessIssues);
    score -= completenessIssues.filter(i => i.type === 'warning').length * 5;

    const finalScore = Math.max(0, score);
    const needsRegeneration = finalScore < this.config.criticalThreshold;

    return {
      isValid: finalScore >= this.config.warningThreshold,
      needsRegeneration,
      issues,
      score: finalScore
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ú–æ–¥–µ–ª—å ‚Üí –ú–∞—Ä–∫–∞ ‚Üí –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   */
  private validateCascadeConsistency(adData: any): ValidationIssue[] {
    const issues: ValidationIssue[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—Å–∫–∞–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (!adData.vehicle_type_name) {
      issues.push({
        type: 'critical',
        field: 'vehicle_type_name',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
        currentValue: adData.vehicle_type_name
      });
    }

    if (!adData.brand) {
      issues.push({
        type: 'critical',
        field: 'brand',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫–∞',
        currentValue: adData.brand
      });
    }

    if (!adData.model) {
      issues.push({
        type: 'critical',
        field: 'model',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª—å',
        currentValue: adData.model
      });
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∞—Ä–∫–∏ –∏ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   */
  private validateBrandTypeMatch(adData: any): ValidationIssue[] {
    const issues: ValidationIssue[] = [];

    const brand = adData.brand?.toLowerCase();
    const vehicleType = adData.vehicle_type_name?.toLowerCase();

    if (!brand || !vehicleType) return issues;

    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const carBrands = ['bmw', 'mercedes-benz', 'audi', 'toyota', 'honda', 'hyundai', 'ford', 'volkswagen'];
    const motorcycleBrands = ['yamaha', 'honda', 'kawasaki', 'suzuki', 'ducati', 'brp'];
    const truckBrands = ['man', 'scania', 'volvo', 'daf', 'iveco', 'kamaz'];
    const specialBrands = ['atlas copco', 'caterpillar', 'komatsu', 'liebherr'];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    if (vehicleType.includes('–ª–µ–≥–∫–æ–≤') && !carBrands.some(cb => brand.includes(cb))) {
      // –ï—Å–ª–∏ —Ç–∏–ø "–ª–µ–≥–∫–æ–≤—ã–µ", –Ω–æ –º–∞—Ä–∫–∞ –Ω–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è
      if (motorcycleBrands.some(mb => brand.includes(mb))) {
        issues.push({
          type: 'critical',
          field: 'vehicle_type_brand_mismatch',
          message: `–ú–∞—Ä–∫–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ "${adData.brand}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∏–ø–∞ "–õ–µ–≥–∫–æ–≤—ã–µ"`,
          currentValue: { brand: adData.brand, type: adData.vehicle_type_name },
          expectedValue: '–ú–æ—Ç–æ'
        });
      }
      if (specialBrands.some(sb => brand.includes(sb))) {
        issues.push({
          type: 'critical',
          field: 'vehicle_type_brand_mismatch',
          message: `–ú–∞—Ä–∫–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ "${adData.brand}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∏–ø–∞ "–õ–µ–≥–∫–æ–≤—ã–µ"`,
          currentValue: { brand: adData.brand, type: adData.vehicle_type_name },
          expectedValue: '–°–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞'
        });
      }
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–≥–æ–¥, –ø—Ä–æ–±–µ–≥, —Ü–µ–Ω–∞)
   */
  private validateDataLogic(adData: any): ValidationIssue[] {
    const issues: ValidationIssue[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞
    const year = adData.year;
    if (year && (year < 1900 || year > 2025)) {
      issues.push({
        type: 'warning',
        field: 'year',
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥: ${year}`,
        currentValue: year
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–≥–∞
    const mileage = adData.mileage;
    if (mileage && (mileage < 0 || mileage > 1000000)) {
      issues.push({
        type: 'warning',
        field: 'mileage',
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥: ${mileage}`,
        currentValue: mileage
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ–¥–∞ –∏ –ø—Ä–æ–±–µ–≥–∞
    if (year && mileage && year > 1900) {
      const age = 2024 - year;
      const expectedMileageRange = [age * 5000, age * 30000]; // 5-30 —Ç—ã—Å –∫–º –≤ –≥–æ–¥
      if (age > 0 && (mileage < expectedMileageRange[0] * 0.1 || mileage > expectedMileageRange[1] * 2)) {
        issues.push({
          type: 'warning',
          field: 'year_mileage_mismatch',
          message: `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–æ–¥–∞ (${year}) –∏ –ø—Ä–æ–±–µ–≥–∞ (${mileage} –∫–º)`,
          currentValue: { year, mileage }
        });
      }
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
   */
  private validateCompleteness(adData: any): ValidationIssue[] {
    const issues: ValidationIssue[] = [];

    const requiredFields = ['title', 'description', 'price', 'currency'];
    const missingFields = requiredFields.filter(field => !adData[field]);

    missingFields.forEach(field => {
      issues.push({
        type: 'warning',
        field,
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`,
        currentValue: adData[field]
      });
    });

    return issues;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
   */
  validateBatch(ads: any[]): { validAds: any[], problematicAds: any[], needsRegeneration: boolean } {
    const results = ads.map(ad => ({ ad, validation: this.validateAd(ad) }));
    
    const validAds = results
      .filter(r => !r.validation.needsRegeneration)
      .map(r => r.ad);
    
    const problematicAds = results
      .filter(r => r.validation.needsRegeneration)
      .map(r => ({ ...r.ad, validationIssues: r.validation.issues }));

    return {
      validAds,
      problematicAds,
      needsRegeneration: problematicAds.length > 0
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  createValidationReport(ads: any[]): string {
    const batchResult = this.validateBatch(ads);
    const totalAds = ads.length;
    const validCount = batchResult.validAds.length;
    const problematicCount = batchResult.problematicAds.length;

    let report = `üìä –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:\n`;
    report += `================================================================================\n`;
    report += `üìã –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${totalAds}\n`;
    report += `‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: ${validCount} (${Math.round(validCount/totalAds*100)}%)\n`;
    report += `‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${problematicCount} (${Math.round(problematicCount/totalAds*100)}%)\n\n`;

    if (problematicCount > 0) {
      report += `üîÑ –¢–†–ï–ë–£–Æ–¢ –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò:\n`;
      report += `------------------------------------------------------------\n`;
      
      batchResult.problematicAds.forEach((ad, index) => {
        report += `${index + 1}. ${ad.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        if (ad.validationIssues) {
          ad.validationIssues.forEach((issue: ValidationIssue) => {
            const icon = issue.type === 'critical' ? 'üö®' : '‚ö†Ô∏è';
            report += `   ${icon} ${issue.message}\n`;
          });
        }
        report += `\n`;
      });
    }

    return report;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const regenerationValidator = new RegenerationValidator();
