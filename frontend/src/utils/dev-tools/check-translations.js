#!/usr/bin/env node

/**
 * Translation Checker Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const TRANSLATION_FILES = {
  en: path.join(__dirname, '../../locales/en.ts'),
  ru: path.join(__dirname, '../../locales/ru.ts'),
  uk: path.join(__dirname, '../../locales/uk.ts')
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function extractKeys(obj, prefix = '') {
  const keys = [];
  
  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    
    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      keys.push(...extractKeys(value, fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  
  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ TypeScript —Ñ–∞–π–ª–∞
function extractKeysFromText(content) {
  const keys = new Set();

  try {
    // –£–¥–∞–ª—è–µ–º export default –∏ –∏–º–ø–æ—Ä—Ç—ã
    let cleanContent = content
      .replace(/^import.*$/gm, '')
      .replace(/^export\s+default\s+/, '')
      .replace(/;\s*$/, '')
      .trim();

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {, —ç—Ç–æ –æ–±—ä–µ–∫—Ç
    if (cleanContent.startsWith('{')) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º eval –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –Ω–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
      const translationObject = eval('(' + cleanContent + ')');

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
      function extractKeysRecursive(obj, prefix = '') {
        for (const [key, value] of Object.entries(obj)) {
          const fullKey = prefix ? `${prefix}.${key}` : key;

          if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
            extractKeysRecursive(value, fullKey);
          } else {
            keys.add(fullKey);
          }
        }
      }

      extractKeysRecursive(translationObject);
    } else {
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
      const keyRegex = /["']([^"']+)["']\s*:\s*["']/g;
      let match;

      while ((match = keyRegex.exec(content)) !== null) {
        keys.add(match[1]);
      }
    }
  } catch (error) {
    console.warn(`Warning: Could not parse file content, using regex fallback:`, error.message);

    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    const keyRegex = /["']([^"']+)["']\s*:\s*["']/g;
    let match;

    while ((match = keyRegex.exec(content)) !== null) {
      keys.add(match[1]);
    }
  }

  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function loadTranslationKeys(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return extractKeysFromText(content);
  } catch (error) {
    console.error(`Error loading ${filePath}:`, error.message);
    return new Set();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π
function addMissingKeys(lang, missingKeys, filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');

    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π)
    const lastBraceIndex = content.lastIndexOf('};');
    if (lastBraceIndex === -1) {
      console.log(`‚ùå Could not find insertion point in ${path.basename(filePath)}`);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–ø—è—Ç–∞—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
    const beforeLastBrace = content.substring(0, lastBraceIndex).trim();
    const needsComma = !beforeLastBrace.endsWith(',') && !beforeLastBrace.endsWith('{');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π
    const newKeysString = missingKeys.map(key => {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞
      const baseTranslation = key.split('.').pop() || key;
      let translation;

      // –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
      switch (lang) {
        case 'uk':
          translation = baseTranslation.replace(/([A-Z])/g, ' $1').toLowerCase().trim() + ' (uk)';
          break;
        case 'ru':
          translation = baseTranslation.replace(/([A-Z])/g, ' $1').toLowerCase().trim() + ' (ru)';
          break;
        case 'en':
        default:
          translation = baseTranslation.replace(/([A-Z])/g, ' $1').toLowerCase().trim();
          break;
      }

      return `  "${key}": "${translation}",`;
    }).join('\n');

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π
    const beforeInsert = content.substring(0, lastBraceIndex);
    const afterInsert = content.substring(lastBraceIndex);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    let newContent = beforeInsert;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (needsComma) {
      newContent = newContent.replace(/(\s*)$/, ',$1');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!newContent.endsWith('\n')) {
      newContent += '\n';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
    newContent += newKeysString + '\n' + afterInsert;

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, newContent, 'utf8');
    return true;
  } catch (error) {
    console.error(`Error adding keys to ${path.basename(filePath)}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkTranslations() {
  console.log('üîç Checking translation files...\n');

  const allKeys = {};

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  for (const [lang, filePath] of Object.entries(TRANSLATION_FILES)) {
    console.log(`üìÅ Loading ${lang}: ${path.basename(filePath)}`);
    allKeys[lang] = loadTranslationKeys(filePath);

    if (allKeys[lang].size > 0) {
      console.log(`   ‚úÖ Loaded ${allKeys[lang].size} keys`);
    } else {
      console.log(`   ‚ùå Failed to load or no keys found`);
      return false;
    }
  }
  
  console.log('\nüîç Comparing translation keys...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
  const allUniqueKeys = new Set();
  Object.values(allKeys).forEach(keySet => {
    keySet.forEach(key => allUniqueKeys.add(key));
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
  let hasErrors = false;
  const languages = Object.keys(allKeys);
  
  for (const lang of languages) {
    const missingKeys = [];
    
    for (const key of allUniqueKeys) {
      if (!allKeys[lang].has(key)) {
        missingKeys.push(key);
      }
    }
    
    if (missingKeys.length > 0) {
      console.log(`üîß Auto-fixing ${missingKeys.length} missing keys in ${lang.toUpperCase()}:`);
      missingKeys.slice(0, 5).forEach(key => console.log(`   + ${key}`));
      if (missingKeys.length > 5) {
        console.log(`   + ... and ${missingKeys.length - 5} more`);
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
      const filePath = TRANSLATION_FILES[lang];
      if (addMissingKeys(lang, missingKeys, filePath)) {
        console.log(`   ‚úÖ Successfully added missing keys to ${lang.toUpperCase()}`);
      } else {
        console.log(`   ‚ùå Failed to add missing keys to ${lang.toUpperCase()}`);
        hasErrors = true;
      }
      console.log();
    } else {
      console.log(`‚úÖ ${lang.toUpperCase()}: All keys present`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏
  for (const lang of languages) {
    const extraKeys = [];
    
    for (const key of allKeys[lang]) {
      const presentInOthers = languages.some(otherLang => 
        otherLang !== lang && allKeys[otherLang].has(key)
      );
      
      if (!presentInOthers && languages.length > 1) {
        extraKeys.push(key);
      }
    }
    
    if (extraKeys.length > 0) {
      hasErrors = true;
      console.log(`‚ö†Ô∏è  Extra keys in ${lang.toUpperCase()} (not in other languages):`);
      extraKeys.forEach(key => console.log(`   + ${key}`));
      console.log();
    }
  }
  
  if (!hasErrors) {
    console.log('üéâ All translation files are synchronized!');
  } else {
    console.log('‚ö†Ô∏è  Some translation issues remain after auto-fix.');
    console.log('üí° Please review and fix remaining issues manually.');
  }
  
  return !hasErrors;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
const currentFile = fileURLToPath(import.meta.url);
const scriptFile = process.argv[1];

if (currentFile === scriptFile) {
  const success = checkTranslations();
  process.exit(success ? 0 : 1);
}

export { checkTranslations };
