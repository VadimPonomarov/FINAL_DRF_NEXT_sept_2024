/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–æ—Ç–æ
 */

import { CarAdsService } from '@/services/autoria/carAds.service';
import { AdGeneratorService } from '@/services/autoria/ad-generator.service';
import { CarAdFormData } from '@/types/autoria';
import { mapFormDataToApiData } from '@/utils/carAdDataMapper';
import { generateFullMockData } from '@/utils/mockData';
import { AutoRiaUsersService, UserSelectionResult } from '@/services/autoria/users.service';

interface User {
  id: number;
  email: string;
  first_name?: string;
  last_name?: string;
  is_superuser: boolean;
}

/**
 * –õ–æ–≥–∏–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω —á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—ã–π —Ö–µ–ª–ø–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω
 */
async function loginSuperAdmin(): Promise<string | null> {
  try {
    console.log('üîê Logging in as superadmin pvs.versia@gmail.com using helper...');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    const { backendApiHelpers } = await import('../app/api/(helpers)/backend');

    const authResult = await backendApiHelpers.auth({
      email: 'pvs.versia@gmail.com',
      password: '12345678'
    });

    if (authResult.status !== 200) {
      console.error(`‚ùå Superadmin login failed:`, authResult);
      return null;
    }

    const accessToken = authResult.data?.access;

    if (!accessToken) {
      console.error('‚ùå No access token received for superadmin');
      return null;
    }

    console.log('‚úÖ Successfully logged in as superadmin using helper');
    return accessToken;

  } catch (error) {
    console.error('‚ùå Superadmin login error:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω
 */
async function getAllUsers(superAdminToken: string): Promise<User[]> {
  try {
    console.log('üìã Fetching all users...');

    const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/users/`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${superAdminToken}`,
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Failed to fetch users: ${response.status} - ${errorText}`);
      return [];
    }

    const data = await response.json();
    const users = data.results || data || [];

    console.log(`‚úÖ Found ${users.length} users in database`);
    return users;

  } catch (error) {
    console.error('‚ùå Error fetching users:', error);
    return [];
  }
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω
 */
async function activateUser(userId: number, superAdminToken: string): Promise<boolean> {
  try {
    console.log(`üîì Activating user ${userId}...`);

    const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/users/admin/${userId}/`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${superAdminToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        is_active: true
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Failed to activate user ${userId}: ${response.status} - ${errorText}`);
      return false;
    }

    console.log(`‚úÖ Successfully activated user ${userId}`);
    return true;

  } catch (error) {
    console.error(`‚ùå Error activating user ${userId}:`, error);
    return false;
  }
}

/**
 * –õ–æ–≥–∏–Ω–∏—Ç—Å—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
async function loginAsUser(email: string): Promise<string | null> {
  try {
    console.log(`üîê Logging in as ${email}...`);

    const loginResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        password: '12345678' // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      })
    });

    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.error(`‚ùå Login failed for ${email}: ${loginResponse.status} - ${errorText}`);
      return null;
    }

    const loginData = await loginResponse.json();
    const accessToken = loginData.access || loginData.token;

    if (!accessToken) {
      console.error(`‚ùå No access token received for ${email}`);
      return null;
    }

    console.log(`‚úÖ Successfully logged in as ${email}`);
    return accessToken;

  } catch (error) {
    console.error(`‚ùå Login error for ${email}:`, error);
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è CarAdsService (–∫–∞–∫ –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è)
 */
async function createAdWithService(adData: CarAdFormData): Promise<any> {
  try {
    console.log(`üîç createAdWithService: Creating ad using CarAdsService...`);
    console.log(`üîç createAdWithService: Form data:`, {
      title: adData.title,
      brand: adData.brand,
      model: adData.model,
      price: adData.price
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç API (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ä–º–∞)
    const apiData = mapFormDataToApiData(adData);
    console.log(`üîç createAdWithService: Mapped API data:`, {
      title: apiData.title,
      mark: apiData.mark,
      model: apiData.model,
      price: apiData.price,
      mileage_km: apiData.mileage_km
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–µ—Ä–≤–∏—Å, —á—Ç–æ –∏ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    const result = await CarAdsService.createCarAd(apiData as CarAdFormData);

    console.log(`‚úÖ createAdWithService: Success response:`, result);
    return result;
  } catch (error) {
    console.error('‚ùå Error creating ad with service:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ PREMIUM —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function upgradeUserAccountToPremium(userId: number, token: string): Promise<void> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const accountResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/accounts/`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });

    if (!accountResponse.ok) {
      throw new Error(`Failed to get user account: ${accountResponse.status}`);
    }

    const accountData = await accountResponse.json();
    const userAccount = accountData.results?.[0] || accountData;

    if (!userAccount || !userAccount.id) {
      throw new Error('User account not found');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–æ PREMIUM —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π admin endpoint
    const upgradeResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/accounts/admin/${userAccount.id}/type/`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        account_type: 'PREMIUM',
        reason: 'Test ads generation - automatic upgrade',
        notify_user: false
      })
    });

    if (!upgradeResponse.ok) {
      const errorText = await upgradeResponse.text();
      throw new Error(`Failed to upgrade account: ${upgradeResponse.status} - ${errorText}`);
    }

    console.log(`‚úÖ Account ${userAccount.id} upgraded to PREMIUM for user ${userId}`);
  } catch (error) {
    console.error(`‚ùå Error upgrading account for user ${userId}:`, error);
    throw error;
  }
}

interface User {
  id: number;
  email: string;
  first_name?: string;
  last_name?: string;
  is_superuser: boolean;
}





// –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
const TEST_ACCOUNTS = [
  { email: 'pvs.versia@gmail.com', password: '12345678', name: 'Main Account' },
  { email: 'test1@example.com', password: 'password123', name: 'Test Account 1' },
  { email: 'test2@example.com', password: 'password123', name: 'Test Account 2' },
  { email: 'dealer@example.com', password: 'password123', name: 'Dealer Account' },
  { email: 'salon@example.com', password: 'password123', name: 'Auto Salon Account' }
];

/**
 * –õ–æ–≥–∏–Ω–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
 */
async function loginAndGetToken(email: string, password: string): Promise<string | null> {
  try {
    console.log(`üîê Logging in as ${email}...`);

    const loginResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password })
    });

    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.error(`‚ùå Login failed for ${email}: ${loginResponse.status} - ${errorText}`);
      return null;
    }

    const loginData = await loginResponse.json();
    const accessToken = loginData.access || loginData.token;

    if (!accessToken) {
      console.error(`‚ùå No access token received for ${email}`);
      return null;
    }

    console.log(`‚úÖ Successfully logged in as ${email}`);
    return accessToken;

  } catch (error) {
    console.error(`‚ùå Login error for ${email}:`, error);
    return null;
  }
}



// –ö—ç—à –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let referencesCache: {
  marks?: any[];
  regions?: any[];
  cities?: any[];
  colors?: any[];
} = {};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ backend API
 */
async function getReferenceData() {
  if (Object.keys(referencesCache).length > 0) {
    return referencesCache;
  }

  console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
  const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';

  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    const marksResponse = await fetch(`${backendUrl}/api/ads/reference/marks/`);
    let marks = [];
    if (marksResponse.ok) {
      const marksData = await marksResponse.json();
      marks = Array.isArray(marksData) ? marksData : (marksData.results || []);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
    const regionsResponse = await fetch(`${backendUrl}/api/ads/reference/regions/`);
    let regions = [];
    if (regionsResponse.ok) {
      const regionsData = await regionsResponse.json();
      regions = Array.isArray(regionsData) ? regionsData : (regionsData.results || []);
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞
    const citiesResponse = await fetch(`${backendUrl}/api/ads/reference/cities/`);
    let cities = [];
    if (citiesResponse.ok) {
      const citiesData = await citiesResponse.json();
      cities = Array.isArray(citiesData) ? citiesData : (citiesData.results || []);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞
    const colorsResponse = await fetch(`${backendUrl}/api/ads/reference/colors/`);
    let colors = [];
    if (colorsResponse.ok) {
      const colorsData = await colorsResponse.json();
      colors = Array.isArray(colorsData) ? colorsData : (colorsData.results || []);
    }

    referencesCache = { marks, regions, cities, colors };
    console.log('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
      marks: marks.length,
      regions: regions.length,
      cities: cities.length,
      colors: colors.length
    });

    return referencesCache;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return { marks: [], regions: [], cities: [], colors: [] };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –º–∞—Ä–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
 */
async function getMarkIdByName(markName: string): Promise<number> {
  const references = await getReferenceData();

  if (!Array.isArray(references.marks) || references.marks.length === 0) {
    console.error('‚ùå –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç');
    throw new Error(`Car marks reference data is not available`);
  }

  const mark = references.marks.find(m =>
    m.name === markName ||
    m.name_ru === markName ||
    m.name_uk === markName
  );

  if (mark) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞: ${markName} -> ID: ${mark.id}`);
    return mark.id;
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–∞—Ä–∫—É
  const firstMark = references.marks[0];
  console.log(`‚ö†Ô∏è –ú–∞—Ä–∫–∞ ${markName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º ${firstMark.name} -> ID: ${firstMark.id}`);
  return firstMark.id;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
 */
async function getRegionIdByName(regionName: string): Promise<number> {
  const references = await getReferenceData();
  const region = references.regions?.find(r => r.name === regionName);

  if (region) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–≥–∏–æ–Ω: ${regionName} -> ID: ${region.id}`);
    return region.id;
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
  const firstRegion = references.regions?.[0];
  if (firstRegion) {
    console.log(`‚ö†Ô∏è –†–µ–≥–∏–æ–Ω ${regionName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ${firstRegion.name} -> ID: ${firstRegion.id}`);
    return firstRegion.id;
  }

  throw new Error(`No regions available in reference data`);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞)
 */
async function getCityIdByName(cityName: string, regionId?: number): Promise<number> {
  const references = await getReferenceData();
  let city = references.cities?.find(c => c.name === cityName);

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–µ–≥–∏–æ–Ω, –∏—â–µ–º –≥–æ—Ä–æ–¥ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ
  if (regionId && city) {
    const cityInRegion = references.cities?.find(c =>
      c.name === cityName && c.region === regionId
    );
    if (cityInRegion) {
      city = cityInRegion;
    }
  }

  if (city) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥: ${cityName} -> ID: ${city.id}`);
    return city.id;
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥
  const firstCity = references.cities?.[0];
  if (firstCity) {
    console.log(`‚ö†Ô∏è –ì–æ—Ä–æ–¥ ${cityName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ${firstCity.name} -> ID: ${firstCity.id}`);
    return firstCity.id;
  }

  throw new Error(`No cities available in reference data`);
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–µ–∫–µ–Ω–¥–∞)
const TEST_ADS_DATA: CarAdFormData[] = [
  {
    title: "BMW X5 2020 - –ø—Ä–µ–º–∏—É–º –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è BMW X5 2020 –≥–æ–¥–∞ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –û–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –¥–∏–ª–µ—Ä–µ. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –î–¢–ü, –≤—Å–µ –¢–û –ø—Ä–æ–π–¥–µ–Ω—ã –≤–æ–≤—Ä–µ–º—è. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, –ø–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞, —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–∞–º–µ—Ä—ã –∫—Ä—É–≥–æ–≤–æ–≥–æ –æ–±–∑–æ—Ä–∞.",
    model: "X5",
    price: 55000,
    currency: "USD",
    region: "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–ö–∏—ó–≤",
    seller_type: "private",
    exchange_status: "no_exchange",
    dynamic_fields: {
      year: 2020,
      mileage: 45000,
      fuel_type: "petrol",
      transmission: "automatic",
      body_type: "suv",
      engine_volume: 3.0,
      engine_power: 340,
      drive_type: "awd",
      color: "black",
      condition: "excellent"
    }
  },
  {
    title: "Mercedes-Benz E-Class 2019 - –±–∏–∑–Ω–µ—Å —Å–µ–¥–∞–Ω",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è Mercedes-Benz E-Class 2019 –≥–æ–¥–∞. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è Avantgarde: –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å, –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ MBUX, —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ —Ñ–∞—Ä—ã.",
    model: "E-Class",
    price: 42000,
    currency: "USD",
    region: "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–õ—å–≤—ñ–≤",
    seller_type: "dealer",
    exchange_status: "possible_exchange",
    dynamic_fields: {
      year: 2019,
      mileage: 62000,
      fuel_type: "petrol",
      transmission: "automatic",
      body_type: "sedan",
      engine_volume: 2.0,
      engine_power: 245,
      drive_type: "rwd",
      color: "silver",
      condition: "good"
    }
  },
  {
    title: "Toyota Camry 2021 - –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π —Å–µ–¥–∞–Ω",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è Toyota Camry 2021 –≥–æ–¥–∞. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–æ–≤—ã–π, –ø—Ä–æ–±–µ–≥ –≤—Å–µ–≥–æ 25000 –∫–º. –ü–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Toyota Safety Sense 2.0, –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
    model: "Camry",
    price: 32000,
    currency: "USD",
    region: "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–•–∞—Ä–∫—ñ–≤",
    seller_type: "auto_salon",
    exchange_status: "no_exchange",
    dynamic_fields: {
      year: 2021,
      mileage: 25000,
      fuel_type: "hybrid",
      transmission: "automatic",
      body_type: "sedan",
      engine_volume: 2.5,
      engine_power: 218,
      drive_type: "fwd",
      color: "white",
      condition: "excellent"
    }
  },
  {
    title: "Volkswagen Golf 2018 - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ö—ç—Ç—á–±–µ–∫",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è Volkswagen Golf 2018 –≥–æ–¥–∞. –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –≥–æ—Ä–æ–¥–∞. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è Comfortline: –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –ø–∞—Ä–∫—Ç—Ä–æ–Ω–∏–∫.",
    model: "Golf",
    price: 18500,
    currency: "USD",
    region: "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–î–Ω—ñ–ø—Ä–æ",
    seller_type: "private",
    exchange_status: "possible_exchange",
    dynamic_fields: {
      year: 2018,
      mileage: 78000,
      fuel_type: "petrol",
      transmission: "manual",
      body_type: "hatchback",
      engine_volume: 1.4,
      engine_power: 125,
      drive_type: "fwd",
      color: "blue",
      condition: "good"
    }
  },
  {
    title: "Ford Transit 2020 - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ñ—É—Ä–≥–æ–Ω",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è Ford Transit 2020 –≥–æ–¥–∞. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å 1.5 —Ç–æ–Ω–Ω—ã, –æ–±—ä–µ–º –∫—É–∑–æ–≤–∞ 12 –º¬≥. –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–∏–∑–µ–ª—å–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å.",
    model: "Transit",
    price: 28000,
    currency: "USD",
    region: "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–û–¥–µ—Å–∞",
    seller_type: "dealer",
    exchange_status: "no_exchange",
    dynamic_fields: {
      year: 2020,
      mileage: 95000,
      fuel_type: "diesel",
      transmission: "manual",
      body_type: "van",
      engine_volume: 2.0,
      engine_power: 130,
      drive_type: "rwd",
      color: "white",
      condition: "good"
    }
  },
  {
    title: "Honda CBR600RR 2019 - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–æ—Ç–æ—Ü–∏–∫–ª",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è Honda CBR600RR 2019 –≥–æ–¥–∞. –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–æ—Ç–æ—Ü–∏–∫–ª –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—Ä–æ–±–µ–≥ –≤—Å–µ–≥–æ 12000 –∫–º. –í—Å–µ –¢–û –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–æ–≤–∞—è —Ä–µ–∑–∏–Ω–∞, —Å–≤–µ–∂–µ–µ –º–∞—Å–ª–æ.",
    model: "CBR600RR",
    price: 8500,
    currency: "USD",
    region: "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–ö–∏—ó–≤",
    seller_type: "private",
    exchange_status: "possible_exchange",
    dynamic_fields: {
      year: 2019,
      mileage: 12000,
      fuel_type: "petrol",
      transmission: "manual",
      body_type: "sport",
      engine_volume: 0.6,
      engine_power: 118,
      drive_type: "rwd",
      color: "red",
      condition: "excellent"
    }
  },
  {
    title: "Audi A4 2017 - –ø—Ä–µ–º–∏—É–º —Å–µ–¥–∞–Ω —Å –ø—Ä–æ–±–µ–≥–æ–º",
    description: "–ü—Ä–æ–¥–∞–µ—Ç—Å—è Audi A4 2017 –≥–æ–¥–∞. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è Premium: –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ MMI, –∫—Å–µ–Ω–æ–Ω–æ–≤—ã–µ —Ñ–∞—Ä—ã, –ø–∞—Ä–∫—Ç—Ä–æ–Ω–∏–∫.",
    model: "A4",
    price: 24500,
    currency: "USD",
    region: "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    city: "–õ—å–≤—ñ–≤",
    seller_type: "auto_salon",
    exchange_status: "no_exchange",
    dynamic_fields: {
      year: 2017,
      mileage: 89000,
      fuel_type: "petrol",
      transmission: "automatic",
      body_type: "sedan",
      engine_volume: 2.0,
      engine_power: 190,
      drive_type: "awd",
      color: "gray",
      condition: "good"
    }
  }
];



/**
 * –õ–æ–≥–∏–Ω–∏—Ç—Å—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω
 */
async function loginUser(): Promise<string | null> {
  try {
    console.log('üîê Logging in user pvs.versia@gmail.com...');

    const loginResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'pvs.versia@gmail.com',
        password: '12345678'
      })
    });

    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.error(`‚ùå Login failed: ${loginResponse.status} - ${errorText}`);
      return null;
    }

    const loginData = await loginResponse.json();
    const accessToken = loginData.access || loginData.token;

    if (!accessToken) {
      console.error('‚ùå No access token received');
      return null;
    }

    console.log('‚úÖ Successfully logged in, token received');
    return accessToken;

  } catch (error) {
    console.error('‚ùå Login error:', error);
    return null;
  }
}



/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–æ PREMIUM —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function upgradeAccountWithAuth(accountId: number, token: string): Promise<void> {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/accounts/${accountId}/`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        account_type: 'PREMIUM'
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to upgrade account: ${response.status} - ${errorText}`);
    }

    console.log(`‚úÖ Account ${accountId} upgraded to PREMIUM`);
  } catch (error) {
    console.error(`‚ùå Error upgrading account ${accountId}:`, error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API —Å –ª–æ–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function createTestAds(count?: number, includeImages: boolean = false, imageTypes: string[] = ['front', 'side'], notificationCallback?: (message: string, type?: 'success' | 'error' | 'info') => void): Promise<{ created: number; details: any[]; totalImages?: number }> {
  const maxCount = count || 10;
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ${maxCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π${includeImages ? ' —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏' : ''}...`);

  if (includeImages) {
    console.log('üì∏ Selected image types:', imageTypes);
    if (imageTypes.length === 0) {
      throw new Error('Image types must be specified when includeImages is true');
    }
  }

  // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
  console.log('üîê Step 1: Getting superadmin token and user list...');
  const superAdminToken = await loginSuperAdmin();
  if (!superAdminToken) {
    throw new Error('Failed to login as superadmin');
  }

  const allUsers = await getAllUsers(superAdminToken);
  if (allUsers.length === 0) {
    throw new Error('No users found in database');
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const activeUsers = allUsers.filter(user => user.email && user.email.includes('@'));
  console.log(`üë• Found ${activeUsers.length} active users for random selection`);

  if (activeUsers.length === 0) {
    throw new Error('No active users found for ad creation');
  }

  const results = [];
  let totalImages = 0;

  // üéØ –î–ª—è –±–∞–∑–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 1
  const actualMaxCount = maxCount; // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–∏–º –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞

  // üöÄ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –°–æ–∑–¥–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  console.log(`üöÄ Starting ASYNC generation of ${actualMaxCount} ads...`);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const createSingleAd = async (index: number) => {
    console.log(`ü§ñ Creating ad ${index + 1}/${maxCount} with random user login...`);

    // 2. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const randomUser = activeUsers[Math.floor(Math.random() * activeUsers.length)];
    console.log(`üë§ Selected random user: ${randomUser.email} (ID: ${randomUser.id})`);

    // 3. –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ frontend API (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ Redis)
    const loginResponse = await fetch(`${process.env.NEXT_PUBLIC_FRONTEND_URL || 'http://localhost:3000'}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: randomUser.email,
        password: '12345678' // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      })
    });

    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      throw new Error(`Login failed for ${randomUser.email}: ${loginResponse.status} - ${errorText}`);
    }

    console.log(`‚úÖ Successfully logged in as ${randomUser.email}, tokens saved to Redis`);

    console.log(`ü§ñ Generating unique ad ${index + 1}/${maxCount}...`);
    const adData = await AdGeneratorService.generateUniqueAd(index, includeImages, imageTypes);
    console.log(`üîÑ Processing ad ${index + 1}/${maxCount}:`, adData.title);

    try {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${index + 1}/${maxCount}: ${adData.title}`);
      console.log('üìã Ad data:', JSON.stringify(adData, null, 2));

      // API endpoint —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ ID
      console.log('üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API endpoint...');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ AdGeneratorService
      const generatedImages: string[] = adData.images || [];
      if (generatedImages.length > 0) {
        totalImages += generatedImages.length;
        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ${generatedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö LLM:`, generatedImages.map(url => url.substring(0, 80) + '...'));
      } else {
        console.log(`‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${adData.title}"`);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API endpoint
      // API endpoint —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ ID
      const formData = {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
        title: adData.title,
        description: adData.description,
        model: adData.model,
        price: adData.price,
        currency: adData.currency,
        region: adData.region, // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, API —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ ID
        city: adData.city, // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, API —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ ID
        seller_type: adData.seller_type,
        exchange_status: adData.exchange_status,

        // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏, API —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ ID
        brand: adData.mark, // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã)
        year: adData.year,
        mileage: adData.mileage, // –ò—Å–ø–æ–ª—å–∑—É–µ–º mileage –≤–º–µ—Å—Ç–æ mileage_km –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–æ–π
        mileage_km: adData.mileage, // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–ª—è backend
        engine_volume: adData.engine_volume,
        fuel_type: adData.fuel_type,
        transmission: adData.transmission, // –ò—Å–ø–æ–ª—å–∑—É–µ–º transmission –≤–º–µ—Å—Ç–æ transmission_type –¥–ª—è —Ñ–æ—Ä–º—ã
        transmission_type: adData.transmission, // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–ª—è backend
        body_type: adData.body_type,

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        engine_power: adData.dynamic_fields.engine_power,
        drive_type: adData.dynamic_fields.drive_type,
        color: adData.dynamic_fields.color,
        condition: adData.dynamic_fields.condition,
        steering_wheel: 'left',

        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç backend
        contacts: [
          {
            type: 'name',
            value: adData.contact_name,
            is_visible: true,
            note: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ'
          },
          {
            type: 'phone',
            value: adData.phone,
            is_visible: true,
            note: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω'
          }
        ],

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dynamic_fields: adData.dynamic_fields,

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        images: generatedImages.length > 0 ? generatedImages : undefined
      };

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è API endpoint:');
      console.log(`  title: ${formData.title ? '–ï—Å—Ç—å' : '–ù–µ—Ç'} (${formData.title?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
      console.log(`  description: ${formData.description ? '–ï—Å—Ç—å' : '–ù–µ—Ç'} (${formData.description?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
      console.log(`  brand: ${typeof formData.brand} (${formData.brand})`);
      console.log(`  model: ${typeof formData.model} (${formData.model})`);
      console.log(`  year: ${typeof formData.year} (${formData.year})`);
      console.log(`  price: ${typeof formData.price} (${formData.price})`);
      console.log(`  region: ${typeof formData.region} (${formData.region})`);
      console.log(`  city: ${typeof formData.city} (${formData.city})`);
      console.log(`  contacts: ${formData.contacts ? formData.contacts.length : 0} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
      console.log(`  images: ${formData.images ? formData.images.length : 0} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

      // üåê –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API endpoint (—Ç–æ–∫–µ–Ω—ã —É–∂–µ –≤ Redis)
      console.log(`üåê Creating ad through API endpoint as ${randomUser.email}...`);
      console.log('üìã Final form data:', JSON.stringify(formData, null, 2));

      const frontendUrl = process.env.NEXT_PUBLIC_FRONTEND_URL || 'http://localhost:3000';
      const response = await fetch(`${frontendUrl}/api/ads/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API request failed: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ Ad creation response:', result);

      console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è ${randomUser.email}${generatedImages.length > 0 ? ` —Å ${generatedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏` : ''}:`, result);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      if (notificationCallback) {
        const successMessage = `‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${adData.title} (${randomUser.email})${generatedImages.length > 0 ? ` (${generatedImages.length} —Ñ–æ—Ç–æ)` : ''}`;
        notificationCallback(successMessage, 'success');
      }

      return {
        success: true,
        data: result, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ mockResult
        title: adData.title,
        user: randomUser.email,
        imagesCount: generatedImages.length
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è "${adData.title}":`, error);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const errorMessage = error instanceof Error ? error.message :
                          typeof error === 'string' ? error :
                          JSON.stringify(error, null, 2);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (notificationCallback) {
        const notificationMessage = `‚ùå –û—à–∏–±–∫–∞: ${adData.title} (${randomUser.email}) - ${errorMessage}`;
        notificationCallback(notificationMessage, 'error');
      }

      return { success: false, error: errorMessage, title: adData.title, user: randomUser.email, imagesCount: 0 };
    }
  };

  // üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –°–æ–∑–¥–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  const BATCH_SIZE = 3; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const allResults = [];

  for (let i = 0; i < actualMaxCount; i += BATCH_SIZE) {
    const batch = Array.from({ length: Math.min(BATCH_SIZE, actualMaxCount - i) }, (_, idx) => i + idx);
    console.log(`üöÄ Processing batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(actualMaxCount/BATCH_SIZE)} (ads ${i + 1}-${Math.min(i + BATCH_SIZE, actualMaxCount)})`);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
    const batchPromises = batch.map(index => createSingleAd(index));

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
    const batchResults = await Promise.allSettled(batchPromises);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    batchResults.forEach((result, idx) => {
      if (result.status === 'fulfilled') {
        allResults.push(result.value);
        if (result.value.success && result.value.imagesCount) {
          totalImages += result.value.imagesCount;
        }
      } else {
        console.error(`‚ùå Promise rejected for ad ${batch[idx] + 1}:`, result.reason);
        allResults.push({ success: false, error: result.reason, title: `Ad ${batch[idx] + 1}`, imagesCount: 0 });
      }
    });

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (i + BATCH_SIZE < actualMaxCount) {
      console.log(`‚è≥ Waiting before next batch...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const successful = allResults.filter(r => r.success).length;
  const failed = allResults.filter(r => !r.success).length;

  console.log('\nüìä –ò–¢–û–ì–ò –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –¢–ï–°–¢–û–í–´–• –û–ë–™–Ø–í–õ–ï–ù–ò–ô:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successful}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  console.log(`üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${allResults.length}`);
  console.log(`üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
  console.log(`üñºÔ∏è –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalImages}`);
  console.log(`üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –±–∞—Ç—á–∞–º–∏ –ø–æ ${BATCH_SIZE}`);
  console.log(`üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è`);

  if (failed > 0) {
    console.log('\n‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏:');
    allResults.filter(r => !r.success).forEach(r => {
      console.log(`- ${r.title} (${r.user}): ${r.error}`);
    });
  }

  if (successful > 0) {
    console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:');
    allResults.filter(r => r.success).forEach(r => {
      console.log(`- ${r.title} (ID: ${r.data?.data?.id || r.data?.id}) by ${r.user} - ${r.imagesCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    });
  }

  return {
    created: successful,
    totalImages: totalImages,
    details: allResults
  };
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
export async function cleanupTestAds(): Promise<{ deleted: number; errors: string[] }> {
  console.log('üóëÔ∏è Starting cleanup of all test ads...');

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const cleanupResponse = await fetch('/api/autoria/test-ads/cleanup-real', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' }
    });

    if (!cleanupResponse.ok) {
      const errorText = await cleanupResponse.text();
      throw new Error(`Real cleanup failed: ${cleanupResponse.status} - ${errorText}`);
    }

    const result = await cleanupResponse.json();
    console.log(`üéØ REAL cleanup completed: ${result.deleted} ads deleted out of ${result.total_found} found`);

    return {
      deleted: result.deleted || 0,
      errors: result.errors || []
    };

  } catch (error) {
    console.error('‚ùå Error in cleanup function:', error);
    return { deleted: 0, errors: [error instanceof Error ? error.message : String(error)] };
  }
}



/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ CarAdFormData (–∫–∞–∫ –≤ —Ñ–æ—Ä–º–µ)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ "Quick" –≤ —Ñ–æ—Ä–º–µ
 */
async function generateCarAdFormData(index: number): Promise<CarAdFormData> {
  console.log(`[generateCarAdFormData] üé≤ Generating cascading mock data for ad ${index}...`);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ "Quick" –≤ —Ñ–æ—Ä–º–µ
  const mockData = await generateFullMockData();
  console.log(`[generateCarAdFormData] ‚úÖ Generated cascading data:`, {
    vehicle_type: mockData.vehicle_type,
    brand: mockData.brand,
    model: mockData.model,
    region: mockData.region,
    city: mockData.city,
    exchange_status: mockData.exchange_status // –û–¢–õ–ê–î–ö–ê
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const uniqueTitle = `${mockData.title || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'} #${index + 1}`;
  const uniqueDescription = `${mockData.description || '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'} - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${index + 1}`;

  const formData: CarAdFormData = {
    ...mockData,
    title: uniqueTitle,
    description: uniqueDescription,
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    use_profile_contacts: true,
    status: 'active',
    tags: ['demo', 'generated', `batch-${Date.now()}`],

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ exchange_status
    exchange_status: mockData.exchange_status === 'no' ? 'no_exchange' : (mockData.exchange_status || 'no_exchange'),

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata: {
      generated: true,
      generated_at: new Date().toISOString(),
      generator_version: '3.0',
      source: 'quick_generator'
    }
  };

  console.log(`[generateCarAdFormData] ‚úÖ Final form data for ad ${index}:`, {
    title: formData.title,
    brand: formData.brand,
    model: formData.model,
    price: formData.price,
    region: formData.region,
    city: formData.city,
    exchange_status: formData.exchange_status // –û–¢–õ–ê–î–ö–ê
  });

  return formData;
}

/**
 * –ù–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –∫–∞–∫ –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è
 */
export async function createTestAdsSimple(
  count: number = 3,
  includeImages: boolean = false,
  imageTypes: string[] = ['front', 'side'],
  options?: { baseUrl?: string }
): Promise<{ created: number; totalImages: number; details: any[] }> {
  console.log(`üöÄ Creating ${count} test ads using ready API endpoint...`);

  const results = [];
  let totalImages = 0;

  for (let i = 0; i < count; i++) {
    try {
      console.log(`üìù Generating ad ${i + 1}/${count}...`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ Quick
      const formData = await generateCarAdFormData(i);
      console.log(`üîç Generated form data for ad ${i + 1}:`, {
        title: formData.title,
        brand: formData.brand,
        model: formData.model,
        price: formData.price,
        region: formData.region,
        city: formData.city
      });

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API endpoint (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ä–º–∞)
      console.log(`üåê Creating ad ${i + 1} through API endpoint...`);
      console.log(`üîç DEBUG: Sending formData.exchange_status = "${formData.exchange_status}"`);
      const response = await fetch(`${options?.baseUrl ?? ''}/api/autoria/cars/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API request failed: ${response.status} - ${errorText}`);
      }

      const createdAd = await response.json();
      console.log(`‚úÖ Created ad ${i + 1}: ${formData.title} (ID: ${createdAd.id || createdAd.data?.id})`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (includeImages && (createdAd.id || createdAd.data?.id)) {
        try {
          const adId = createdAd.id || createdAd.data?.id;
          console.log(`üé® Generating images for ad ${adId}...`);

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–∏–ø–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
          const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
          const imageResponse = await fetch(`${backendUrl}/api/chat/generate-car-images/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              car_data: {
                brand: formData.brand,
                model: formData.model,
                year: formData.year,
                color: formData.color,
                body_type: formData.body_type,
                vehicle_type: formData.vehicle_type || 'car',
                vehicle_type_name: formData.vehicle_type_name || formData.vehicle_type,
                condition: formData.condition || 'good',
                description: formData.description || ''
              },
              angles: imageTypes,
              style: "realistic"
            })
          });

          if (imageResponse.ok) {
            const imageData = await imageResponse.json();
            if (imageData.images && imageData.images.length > 0) {
              totalImages += imageData.images.length;
              console.log(`‚úÖ Generated ${imageData.images.length} images for ad ${adId}`);
            }
          }
        } catch (imageError) {
          console.warn(`‚ö†Ô∏è Failed to generate images for ad:`, imageError);
        }
      }

      results.push({
        success: true,
        data: createdAd,
        title: formData.title,
        imagesCount: includeImages ? imageTypes.length : 0
      });

    } catch (error) {
      console.error(`‚ùå Failed to create ad ${i + 1}:`, error);
      results.push({
        success: false,
        error: error instanceof Error ? error.message : String(error),
        title: `Ad ${i + 1}`,
        imagesCount: 0
      });
    }
  }

  const successful = results.filter(r => r.success).length;
  console.log(`üìä Created ${successful}/${count} test ads with ${totalImages} total images`);

  return {
    created: successful,
    totalImages,
    details: results
  };
}

export default { createTestAds, createTestAdsSimple, cleanupTestAds };
