/**
 * Centralized auth-aware fetch with automatic token refresh and user notifications
 *
 * Workflow:
 * 1. Makes initial request
 * 2. If 401 (Unauthorized), attempts to refresh tokens via /api/auth/refresh
 * 3. If refresh succeeds, retries the original request
 * 4. If refresh fails or second request returns 401, shows toast and redirects to /login
 *
 * Usage: await fetchWithAuth('/api/autoria/favorites/toggle', { method: 'POST', body: JSON.stringify({ car_ad_id }) })
 */
export async function fetchWithAuth(input: RequestInfo | URL, init: RequestInit = {}): Promise<Response> {
  console.log('[fetchWithAuth] Making request to:', input);

  const resp = await fetch(input, {
    ...init,
    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º credentials: 'include', —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    // credentials: 'include' –≤—ã–∑—ã–≤–∞–µ—Ç CORS –æ—à–∏–±–∫—É —Å Access-Control-Allow-Origin: *
    headers: {
      'Content-Type': 'application/json',
      ...(init.headers || {})
    },
    cache: 'no-store'
  });

  if (resp.status !== 401) {
    console.log('[fetchWithAuth] Request successful, status:', resp.status);
    return resp;
  }

  console.log('[fetchWithAuth] ‚ö†Ô∏è Received 401 Unauthorized, attempting token refresh...');

  // Try to refresh once via internal API
  try {
    const origin = typeof window !== 'undefined' ? window.location.origin : process.env.NEXTAUTH_URL || 'http://localhost:3000';
    const refresh = await fetch(`${origin}/api/auth/refresh`, { method: 'POST', cache: 'no-store' });

    if (refresh.ok) {
      console.log('[fetchWithAuth] ‚úÖ Token refresh successful, retrying original request...');

      const retry = await fetch(input, {
        ...init,
        // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º credentials: 'include'
        headers: {
          'Content-Type': 'application/json',
          ...(init.headers || {})
        },
        cache: 'no-store'
      });

      if (retry.status !== 401) {
        console.log('[fetchWithAuth] ‚úÖ Retry successful, status:', retry.status);
        return retry;
      }

      console.log('[fetchWithAuth] ‚ùå Retry still returned 401, tokens are invalid');
    } else {
      console.log('[fetchWithAuth] ‚ùå Token refresh failed, status:', refresh.status);
    }
  } catch (error) {
    console.error('[fetchWithAuth] ‚ùå Error during token refresh:', error);
  }

  // Still unauthorized: show toast and redirect to /login with callback
  if (typeof window !== 'undefined') {
    console.log('[fetchWithAuth] üîÑ Redirecting to login page...');

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º toast –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    import('@/hooks/use-toast').then(({ toast }) => {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º.",
        variant: "destructive",
        duration: 5000,
      });
    }).catch(err => {
      console.error('[fetchWithAuth] Failed to show toast:', err);
    });

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ toast –ø–µ—Ä–µ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
    setTimeout(() => {
      const callback = encodeURIComponent(window.location.pathname + window.location.search);
      window.location.href = `/login?callbackUrl=${callback}&message=${encodeURIComponent('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.')}`;
    }, 500);
  }

  return resp; // Return the 401 response for callers on the server side
}

