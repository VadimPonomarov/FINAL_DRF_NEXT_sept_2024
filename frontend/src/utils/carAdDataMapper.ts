/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É API –∏ —Ñ–æ—Ä–º–æ–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
 */

import { CarAd, CarAdFormData } from '@/types/autoria';

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API (CarAd) –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ä–º—ã (CarAdFormData)
 */
export function mapApiDataToFormData(apiData: CarAd): Partial<CarAdFormData> {
  console.log('[DataMapper] Converting API data to form data:', apiData);
  console.log('[DataMapper] Key API fields:', {
    vehicle_type: apiData.vehicle_type,
    vehicle_type_name: apiData.vehicle_type_name,
    mark: apiData.mark,
    model: apiData.model,
    images: apiData.images?.length || 0,
    dynamic_fields: apiData.dynamic_fields ? Object.keys(apiData.dynamic_fields) : []
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
  const criticalFields = {
    title: apiData.title,
    description: apiData.description,
    price: apiData.price,
    currency: apiData.currency,
    mark: apiData.mark,
    model: apiData.model
  };

  const missingCritical = Object.entries(criticalFields)
    .filter(([key, value]) => !value || value === '')
    .map(([key]) => key);

  if (missingCritical.length > 0) {
    console.error('[DataMapper] ‚ùå CRITICAL: Missing required fields from API:', missingCritical);
    console.error('[DataMapper] ‚ùå This will cause form initialization problems!');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏/—á–∏—Å–ª–∞ –∫–∞–∫ –µ—Å—Ç—å
  const extractId = (value: any): string | undefined => {
    if (!value) return undefined;
    if (typeof value === 'object' && value.id) {
      return value.id.toString();
    }
    if (typeof value === 'string' || typeof value === 'number') {
      return value.toString();
    }
    return undefined;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ API –¥–∞–Ω–Ω—ã—Ö
  const extractName = (value: any, nameField: string): string | undefined => {
    if (!value) return undefined;
    if (typeof value === 'object' && value[nameField]) {
      return value[nameField];
    }
    return undefined;
  };

  // üß† –ú–ï–ú–û–ò–ó–ê–¶–ò–Ø: –ö–µ—à –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
  const extractValueCache = new Map<string, any>();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
  const extractValue = (primary: any, ...fallbacks: any[]): any => {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞
    const cacheKey = JSON.stringify([primary, ...fallbacks]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (extractValueCache.has(cacheKey)) {
      return extractValueCache.get(cacheKey);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    let result = undefined;
    if (primary !== undefined && primary !== null && primary !== '') {
      result = primary;
    } else {
      for (const fallback of fallbacks) {
        if (fallback !== undefined && fallback !== null && fallback !== '') {
          result = fallback;
          break;
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
    if (extractValueCache.size > 500) {
      extractValueCache.clear();
    }
    extractValueCache.set(cacheKey, result);

    return result;
  };

  const formData: Partial<CarAdFormData> = {
    // ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    id: apiData.id,

    // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏—Ö –Ω–∞–ª–∏—á–∏–µ
    title: apiData.title || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú –≤ production
    description: apiData.description || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú –≤ production

    // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï: –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è - –¥–ª—è —Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –º–∞—Ä–∫–∏
    brand: extractId(apiData.mark) || extractId(apiData.brand) || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú
    mark: extractId(apiData.mark) || extractId(apiData.brand) || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    brand_id: extractId(apiData.mark) || extractId(apiData.brand) || '',
    mark_id: extractId(apiData.mark) || extractId(apiData.brand) || '',
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–∞—Ö
    brand_name: extractName(apiData.mark, 'name') || apiData.brand_name || apiData.mark_name || '',
    mark_name: extractName(apiData.mark, 'name') || apiData.mark_name || apiData.brand_name || '',

    // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    vehicle_type: extractId(apiData.vehicle_type) || extractValue(
      apiData.vehicle_type,
      apiData.dynamic_fields?.vehicle_type
    ) || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú
    vehicle_type_name: apiData.vehicle_type_name ||
                      (typeof apiData.vehicle_type === 'object' ? apiData.vehicle_type.name : undefined) ||
                      extractName(apiData.vehicle_type, 'name') || '',

    // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï: –ú–æ–¥–µ–ª—å - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    model: extractValue(
      typeof apiData.model === 'object' ? apiData.model.name : apiData.model,
      apiData.dynamic_fields?.model
    ) || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú –≤ production

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    generation: extractValue(apiData.generation, apiData.dynamic_fields?.generation),
    modification: extractValue(apiData.modification, apiData.dynamic_fields?.modification),

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    year: extractValue(
      apiData.year,
      apiData.car_specs?.year,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.year
    ),
    // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: mileage –º–∞–ø–ø–∏—Ç—Å—è –∏–∑ mileage_km (CarSpecificationModel)
    mileage: extractValue(
      apiData.mileage_km, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç backend –ø–æ–ª—é
      apiData.mileage,
      apiData.car_specs?.mileage,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.mileage_km,
      apiData.dynamic_fields?.mileage
    ),
    mileage_km: extractValue(
      apiData.mileage_km,
      apiData.mileage,
      apiData.car_specs?.mileage,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.mileage_km,
      apiData.dynamic_fields?.mileage
    ),
    engine_volume: extractValue(
      apiData.engine_volume,
      apiData.car_specs?.engine_volume,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.engine_volume
    ),
    engine_power: extractValue(
      apiData.engine_power,
      apiData.dynamic_fields?.engine_power
    ),
    fuel_type: extractValue(
      apiData.fuel_type,
      apiData.car_specs?.fuel_type,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.fuel_type
    ),
    transmission: extractValue(
      apiData.transmission,
      apiData.transmission_type,
      apiData.car_specs?.transmission,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.transmission,
      apiData.dynamic_fields?.transmission_type
    ),
    drive_type: extractValue(
      apiData.drive_type,
      apiData.dynamic_fields?.drive_type
    ),
    body_type: extractValue(
      apiData.body_type,
      apiData.car_specs?.body_type,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.body_type
    ),
    color: extractValue(
      typeof apiData.color === 'object' ? apiData.color.name : apiData.color,
      apiData.car_specs?.color,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.color
    ),
    steering_wheel: extractValue(
      apiData.steering_wheel,
      apiData.dynamic_fields?.steering_wheel
    ),
    condition: extractValue(
      apiData.condition,
      apiData.car_specs?.condition,  // –î–æ–±–∞–≤–ª—è–µ–º car_specs
      apiData.dynamic_fields?.condition,
      'used' // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ),
    vin_code: extractValue(
      apiData.vin_code,
      apiData.dynamic_fields?.vin_code,
      apiData.dynamic_fields?.vin
    ),
    license_plate: extractValue(
      apiData.license_plate,
      apiData.dynamic_fields?.license_plate
    ),
    number_of_doors: extractValue(
      apiData.number_of_doors,
      apiData.dynamic_fields?.number_of_doors
    ),
    number_of_seats: extractValue(
      apiData.number_of_seats,
      apiData.dynamic_fields?.number_of_seats
    ),

    // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï: –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    price: apiData.price || 0, // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ 0 –≤ production
    currency: apiData.currency || 'UAH', // ‚úÖ –ò–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    region: extractId(apiData.region) || extractValue(apiData.region, apiData.dynamic_fields?.region) || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú
    city: extractId(apiData.city) || extractValue(apiData.city, apiData.dynamic_fields?.city) || '', // ‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–£–°–¢–´–ú
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    region_name: extractName(apiData.region, 'name') || apiData.region_name ||
                 (typeof apiData.region === 'string' ? apiData.region : undefined) || '',
    city_name: extractName(apiData.city, 'name') || apiData.city_name ||
               (typeof apiData.city === 'string' ? apiData.city : undefined) || '',

    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contacts: apiData.contacts || [],
    contact_name: extractValue(
      apiData.contact_name,
      apiData.dynamic_fields?.contact_name
    ),
    phone: extractValue(
      apiData.phone,
      apiData.dynamic_fields?.phone
    ),

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    additional_info: extractValue(
      apiData.additional_info,
      apiData.dynamic_fields?.additional_info
    ),

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    use_profile_contacts: extractValue(
      apiData.use_profile_contacts,
      apiData.dynamic_fields?.use_profile_contacts,
      true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true - –≤–∫–ª—é—á–µ–Ω–æ
    ),

    // –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –æ–±–º–µ–Ω
    seller_type: extractValue(
      apiData.seller_type,
      apiData.dynamic_fields?.seller_type,
      'private'
    ),
    exchange_status: (() => {
      const raw = extractValue(
        apiData.exchange_status,
        apiData.dynamic_fields?.exchange_status,
        'no_exchange'
      );
      if (raw === 'no') return 'no_exchange';
      if (raw === 'possible_exchange') return 'possible';
      return raw;
    })(),

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_urgent: extractValue(
      apiData.is_urgent,
      apiData.dynamic_fields?.is_urgent,
      false
    ),
    is_highlighted: extractValue(
      apiData.is_highlighted,
      apiData.dynamic_fields?.is_highlighted,
      false
    ),

    // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    geocode: extractValue(
      apiData.geocode,
      apiData.dynamic_fields?.geocode
    ),

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–¥ —Ñ–æ—Ä–º—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º—ã
    images: (apiData.images || []).map((img: any) => {
      const resolvedUrl = img?.image_display_url || img?.image_url || img?.url || img?.image;
      const imagePath = img?.image ?? (typeof resolvedUrl === 'string' && !resolvedUrl.startsWith('http') ? resolvedUrl : undefined);
      const displayUrl = img?.image_display_url ?? (typeof resolvedUrl === 'string' && resolvedUrl.startsWith('http') ? resolvedUrl : undefined);
      return {
        id: img?.id,
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç ImagesForm
        image: imagePath,
        image_display_url: displayUrl,
        url: resolvedUrl,
        caption: img?.caption,
        is_primary: img?.is_primary || img?.is_main,
        is_main: img?.is_main || img?.is_primary,
        order: img?.order,
      };
    }),
    existing_images: (apiData.existing_images || apiData.images || []).map((img: any) => {
      const resolvedUrl = img?.image_display_url || img?.image_url || img?.url || img?.image;
      const imagePath = img?.image ?? (typeof resolvedUrl === 'string' && !resolvedUrl.startsWith('http') ? resolvedUrl : undefined);
      const displayUrl = img?.image_display_url ?? (typeof resolvedUrl === 'string' && resolvedUrl.startsWith('http') ? resolvedUrl : undefined);
      return {
        id: img?.id,
        image: imagePath,
        image_display_url: displayUrl,
        url: resolvedUrl,
        caption: img?.caption,
        is_primary: img?.is_primary || img?.is_main,
        is_main: img?.is_main || img?.is_primary,
        order: img?.order,
      };
    }),

    // Dynamic fields –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    dynamic_fields: apiData.dynamic_fields || {},
  };

  console.log('[DataMapper] Mapped form data:', formData);
  console.log('[DataMapper] Key mapped fields:', {
    brand: formData.brand,
    model: formData.model,
    region: formData.region,
    city: formData.city,
    price: formData.price,
    currency: formData.currency,
    year: formData.year,
    mileage: formData.mileage
  });

  console.log('[DataMapper] ‚úÖ Final form data created');
  console.log('[DataMapper] üîç Key fields check:', {
    vehicle_type: formData.vehicle_type,
    vehicle_type_name: formData.vehicle_type_name,
    brand: formData.brand,
    brand_name: formData.brand_name,
    model: formData.model,
    images_count: formData.images?.length || 0,
    first_image_url: formData.images?.[0]?.image_display_url || formData.images?.[0]?.url
  });

  return formData;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã (CarAdFormData) –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
 */
export function mapFormDataToApiData(formData: Partial<CarAdFormData>): Partial<CarAd> {
  console.log('[DataMapper] üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Converting form data to API data');
  console.log('[DataMapper] üìù –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
  console.log('[DataMapper] üöó –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:', {
    title: formData.title,
    brand: formData.brand,
    model: formData.model,
    year: formData.year,
    mileage: formData.mileage,
    color: formData.color,
    region: formData.region,
    city: formData.city,
    price: formData.price,
  });

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const inputRequiredFields = {
    title: formData.title,
    description: formData.description,
    price: formData.price,
    currency: formData.currency,
    brand: formData.brand || formData.mark,
    model: formData.model,
    region: formData.region,
    city: formData.city
  };

  const missingFields = Object.entries(inputRequiredFields)
    .filter(([key, value]) => !value || value === '' || value === 0)
    .map(([key]) => key);

  if (missingFields.length > 0) {
    console.error('[DataMapper] üö® CRITICAL: Missing required fields before API call:', missingFields);
    console.error('[DataMapper] üö® Form data:', formData);
    throw new Error(`Required fields are missing: ${missingFields.join(', ')}`);
  }

  const apiData: Partial<CarAd> = {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title: formData.title,
    description: formData.description,

    // –ú–æ–¥–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    model: formData.model,

    // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: –ø–µ—Ä–µ–¥–∞–µ–º ID –≤ API (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ)
    vehicle_type: (() => {
      const raw = (formData as any).vehicle_type ?? (formData.dynamic_fields as any)?.vehicle_type;
      if (raw === undefined || raw === null || raw === '') {
        console.error('[DataMapper] üö® CRITICAL: vehicle_type is missing in form data!', formData);
        return undefined;
      }
      const n = typeof raw === 'number' ? raw : parseInt(String(raw));
      if (isNaN(n)) {
        console.error('[DataMapper] üö® CRITICAL: vehicle_type is not a valid number!', raw);
        return undefined;
      }
      return n;
    })(),
    vehicle_type_name: (formData as any).vehicle_type_name,

    // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è - —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'make', –º–æ–¥–µ–ª—å 'mark'
    mark: (() => {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: brand_id -> mark_id -> brand -> mark
      const candidates: Array<string | number | undefined> = [
        (formData as any).brand_id,
        (formData as any).mark_id,
        formData.brand,
        formData.mark
      ];
      for (const c of candidates) {
        if (c === undefined || c === null || c === '') continue;
        const n = typeof c === 'number' ? c : parseInt(String(c));
        if (!isNaN(n)) return n;
      }
      console.error('[DataMapper] üö® CRITICAL: mark/brand is missing in form data!', formData);
      throw new Error('Mark/Brand is required but missing in form data');
    })(),

    // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º 'make' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
    make: (() => {
      const candidates: Array<string | number | undefined> = [
        (formData as any).brand_id,
        (formData as any).mark_id,
        formData.brand,
        formData.mark
      ];
      for (const c of candidates) {
        if (c === undefined || c === null || c === '') continue;
        const n = typeof c === 'number' ? c : parseInt(String(c));
        if (!isNaN(n)) return n;
      }
      console.error('[DataMapper] üö® CRITICAL: make/brand is missing in form data!', formData);
      throw new Error('Make/Brand is required but missing in form data');
    })(),

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    year: formData.year,
    mileage_km: formData.mileage,
    engine_volume: formData.engine_volume,
    engine_power: formData.engine_power,
    fuel_type: formData.fuel_type,
    transmission_type: formData.transmission,
    drive_type: formData.drive_type,
    body_type: formData.body_type,
    color: formData.color,
    steering_wheel: formData.steering_wheel,
    condition: (() => {
      const m = formData.mileage ? parseInt(String(formData.mileage)) : undefined;
      const cond = formData.condition;
      if (cond === 'damaged') return 'damaged';
      if (typeof m === 'number' && !isNaN(m)) return m < 5000 ? 'new' : 'used';
      return cond || 'used';
    })(),
    vin_code: formData.vin_code,
    license_plate: formData.license_plate,
    number_of_doors: formData.number_of_doors,
    number_of_seats: formData.number_of_seats,

    // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    price: formData.price,
    currency: formData.currency,

    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ø–æ–ª—è
    region: (() => {
      if (!formData.region) {
        console.error('[DataMapper] üö® CRITICAL: region is missing in form data!', formData);
        throw new Error('Region is required but missing in form data');
      }
      const regionId = parseInt(formData.region);
      if (isNaN(regionId)) {
        console.error('[DataMapper] üö® CRITICAL: region is not a valid number!', formData.region);
        throw new Error(`Region must be a valid number, got: ${formData.region}`);
      }
      return regionId;
    })(),
    city: (() => {
      if (!formData.city) {
        console.error('[DataMapper] üö® CRITICAL: city is missing in form data!', formData);
        throw new Error('City is required but missing in form data');
      }
      const cityId = parseInt(formData.city);
      if (isNaN(cityId)) {
        console.error('[DataMapper] üö® CRITICAL: city is not a valid number!', formData.city);
        throw new Error(`City must be a valid number, got: ${formData.city}`);
      }
      return cityId;
    })(),

    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contacts: formData.contacts || [],
    contact_name: formData.contact_name,
    additional_info: formData.additional_info,
    use_profile_contacts: formData.use_profile_contacts,
    phone: formData.phone,

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images: formData.images || [],
    existing_images: formData.existing_images || [],

    // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç CarSpecificationModel)
    year: formData.year ? parseInt(String(formData.year)) : undefined,
    mileage_km: formData.mileage ? parseInt(String(formData.mileage)) : undefined, // Frontend mileage -> Backend mileage_km
    engine_volume: formData.engine_volume ? parseFloat(String(formData.engine_volume)) : undefined,
    engine_power: formData.engine_power ? parseInt(String(formData.engine_power)) : undefined,
    fuel_type: formData.fuel_type,
    transmission_type: formData.transmission || formData.transmission_type, // Frontend transmission -> Backend transmission_type
    drive_type: formData.drive_type,
    body_type: formData.body_type,
    color: formData.color,
    steering_wheel: formData.steering_wheel,
    condition: (() => {
      const m = formData.mileage ? parseInt(String(formData.mileage)) : undefined;
      const cond = formData.condition;
      if (cond === 'damaged') return 'damaged';
      if (typeof m === 'number' && !isNaN(m)) return m < 5000 ? 'new' : 'used';
      return cond || 'used';
    })(),
    vin_code: formData.vin_code,
    license_plate: formData.license_plate,
    number_of_doors: formData.number_of_doors ? parseInt(String(formData.number_of_doors)) : undefined,
    number_of_seats: formData.number_of_seats ? parseInt(String(formData.number_of_seats)) : undefined,
    generation: formData.generation,
    modification: formData.modification,

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    seller_type: formData.seller_type,
    exchange_status: (() => {
      const raw = formData.exchange_status;
      if (!raw) return 'no_exchange';
      if (raw === 'no') return 'no_exchange';
      if (raw === 'possible_exchange') return 'possible';
      return raw;
    })(),
    is_urgent: formData.is_urgent,
    is_highlighted: formData.is_highlighted,
    geocode: formData.geocode,

    // Dynamic fields - –¥—É–±–ª–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    dynamic_fields: {
      ...(formData.dynamic_fields || {}),
      vehicle_type: (formData as any).vehicle_type ?? (formData.dynamic_fields as any)?.vehicle_type,
      vehicle_type_name: (formData as any).vehicle_type_name ?? (formData.dynamic_fields as any)?.vehicle_type_name,
      brand_name: (formData as any).brand_name ?? (formData.dynamic_fields as any)?.brand_name,
      model: formData.model,
      year: formData.year,
      mileage: formData.mileage,
      mileage_km: formData.mileage, // –î—É–±–ª–∏—Ä—É–µ–º –∫–∞–∫ mileage_km
      engine_volume: formData.engine_volume,
      engine_power: formData.engine_power,
      fuel_type: formData.fuel_type,
      transmission: formData.transmission, // Frontend –ø–æ–ª–µ
      transmission_type: formData.transmission || formData.transmission_type, // Backend –ø–æ–ª–µ
      drive_type: formData.drive_type,
      body_type: formData.body_type,
      color: formData.color,
      steering_wheel: formData.steering_wheel,
      condition: formData.condition,
      vin_code: formData.vin_code,
      license_plate: formData.license_plate,
      number_of_doors: formData.number_of_doors,
      number_of_seats: formData.number_of_seats,
      generation: formData.generation,
      modification: formData.modification,
      exchange_status: (() => { const raw = formData.exchange_status ?? (formData.dynamic_fields as any)?.exchange_status; if (!raw) return 'no_exchange'; if (raw === 'no') return 'no_exchange'; if (raw === 'possible_exchange') return 'possible'; return raw; })(),
    },
  };

  // –£–¥–∞–ª—è–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const cleanedApiData = Object.fromEntries(
    Object.entries(apiData).filter(([_, value]) => value !== undefined)
  );

  console.log('[DataMapper] Mapped API data:', cleanedApiData);
  console.log('[DataMapper] Removed undefined fields:',
    Object.keys(apiData).filter(key => apiData[key as keyof typeof apiData] === undefined)
  );

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const outputRequiredFields = {
    title: cleanedApiData.title,
    description: cleanedApiData.description,
    price: cleanedApiData.price,
    currency: cleanedApiData.currency,
    brand: cleanedApiData.brand,
    model: cleanedApiData.model,
    region: cleanedApiData.region,
    city: cleanedApiData.city
  };

  const emptyRequired = Object.entries(outputRequiredFields)
    .filter(([key, value]) => !value || value === '' || value === 0)
    .map(([key]) => key);

  if (emptyRequired.length > 0) {
    console.error('[DataMapper] üö® CRITICAL ERROR: Required fields are empty:', emptyRequired);
    console.error('[DataMapper] üö® This will cause form validation failures!');
    console.error('[DataMapper] üö® Original API data for debugging:', {
      title: apiData.title,
      description: apiData.description,
      price: apiData.price,
      currency: apiData.currency,
      mark: apiData.mark,
      model: apiData.model,
      region: apiData.region,
      city: apiData.city
    });
  }

  return cleanedApiData;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ
 */
export function hasValidData(data: any): boolean {
  if (!data || typeof data !== 'object') return false;
  
  const keys = Object.keys(data);
  return keys.some(key => {
    const value = data[key];
    return value !== undefined && value !== null && value !== '';
  });
}
