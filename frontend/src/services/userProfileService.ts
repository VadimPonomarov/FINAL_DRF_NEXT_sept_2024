/**
 * API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π fetchData —Ö–µ–ª–ø–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Bearer —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∞–≤—Ç–æ—Ä–µ—Ñ—Ä–µ—à–∞
 */

import { fetchData, fetchWithDomain } from '@/app/api/common';
import {
  BackendUser,
  BackendProfile,
  BackendAccount,
  BackendRawAddress,
  BackendAccountContact,
  ProfileUpdateData,
  AccountUpdateData,
  RawAddressUpdateData,
  ContactUpdateData,
  ProfileApiResponse,
  AccountApiResponse,
  FullUserProfileData,
  AccountTypeEnum,
  ModerationLevelEnum,
  RoleEnum,
  ContactTypeEnum
} from '@/types/backend-user';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class UserProfileService {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º (UserEditSerializer)
   */
  static async getUserProfile(): Promise<ProfileApiResponse | null> {
    try {
      console.log('[UserProfileService] üì§ Fetching user profile...');

      const data = await fetchWithDomain<ProfileApiResponse>('api/user/profile/', {
        domain: 'internal',
        redirectOnError: false
      });

      if (!data) {
        console.log('[UserProfileService] ‚ùå No profile data received');
        return null;
      }

      console.log('[UserProfileService] ‚úÖ Profile data received successfully');
      return data;
    } catch (error) {
      console.error('[UserProfileService] ‚ùå Error fetching profile:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateUserProfile(updateData: { profile: ProfileUpdateData }): Promise<ProfileApiResponse | null> {
    try {
      console.log('==================================================');
      console.log('[UserProfileService] üöÄ updateUserProfile called!');
      console.log('[UserProfileService] üì§ Input data:', JSON.stringify(updateData, null, 2));
      console.log('==================================================');

      // –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ö—É–∫–µ
      console.log('[UserProfileService] üìã Final update data:', updateData);

      console.log('[UserProfileService] üîÑ Calling fetchWithDomain...');
      console.log('[UserProfileService] üì§ URL: api/user/profile/');
      console.log('[UserProfileService] üì§ Method: PATCH');
      console.log('[UserProfileService] üì§ Body:', JSON.stringify(updateData, null, 2));

      const data = await fetchWithDomain<ProfileApiResponse>('api/user/profile/', {
        method: 'PATCH',
        body: updateData,
        domain: 'internal',
        redirectOnError: false
      });

      console.log('[UserProfileService] üì• fetchWithDomain response:', data);

      if (!data) {
        console.log('[UserProfileService] ‚ùå No response from profile update');
        return null;
      }

      console.log('[UserProfileService] ‚úÖ Profile updated successfully');
      return data;
    } catch (error) {
      console.error('[UserProfileService] ‚ùå Error updating profile:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async uploadAvatar(avatarFile: File, userId: number): Promise<BackendProfile | null> {
    try {
      console.log('[UserProfileService] üì§ Uploading avatar...');

      const formData = new FormData();
      formData.append('avatar', avatarFile);

      const data = await fetchWithDomain<BackendProfile>('api/user/profile/avatar', {
        method: 'PATCH',
        body: formData,
        domain: 'internal',
        headers: {}, // –î–ª—è FormData –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type
        redirectOnError: false
      });

      if (!data) {
        console.log('[UserProfileService] ‚ùå No response from avatar upload');
        return null;
      }

      console.log('[UserProfileService] ‚úÖ Avatar uploaded successfully');
      return data;
    } catch (error) {
      console.error('[UserProfileService] ‚ùå Error uploading avatar:', error);
      throw error;
    }
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class UserAccountService {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserAccount(): Promise<AccountApiResponse | null> {
    try {
      console.log('[UserAccountService] üì§ Fetching user account...');

      const data = await fetchWithDomain<AccountApiResponse>('api/user/account/', {
        domain: 'internal',
        redirectOnError: false
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const account = data;

      if (!account) {
        console.log('[UserAccountService] ‚ùå No account data received');
        return null;
      }

      console.log('[UserAccountService] ‚úÖ Account data received successfully');
      return account;
    } catch (error) {
      console.error('[UserAccountService] ‚ùå Error fetching account:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateUserAccount(accountData: AccountUpdateData): Promise<AccountApiResponse | null> {
    try {
      console.log('[UserAccountService] üì§ Updating user account...', accountData);

      const data = await fetchWithDomain<AccountApiResponse>('api/user/account/', {
        method: 'POST', // AddsAccountSerializer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST –¥–ª—è create_or_update
        body: accountData,
        domain: 'internal',
        redirectOnError: false
      });

      if (!data) {
        console.log('[UserAccountService] ‚ùå No response from account update');
        return null;
      }

      console.log('[UserAccountService] ‚úÖ Account updated successfully');
      return data;
    } catch (error) {
      console.error('[UserAccountService] ‚ùå Error updating account:', error);
      throw error;
    }
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export class UserContactService {

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  static async getAccountContacts(): Promise<BackendAccountContact[]> {
    try {
      console.log('[UserContactService] üì§ Fetching account contacts...');

      const data = await fetchWithDomain<any[]>('api/accounts/contacts/', {
        domain: 'internal',
        redirectOnError: false
      });

      if (!data) {
        console.log('[UserContactService] ‚ùå No contacts data received');
        return [];
      }

      // Normalize backend shape (type/value/adds_account) -> frontend shape (contact_type/contact_value/account)
      const normalized: BackendAccountContact[] = (Array.isArray(data) ? data : []).map((item: any) => ({
        id: item.id,
        account: item.adds_account ?? item.account ?? null,
        contact_type: item.type ?? item.contact_type,
        contact_value: item.value ?? item.contact_value,
        // Backend has is_visible/note; approximate mapping for UI expectations
        is_primary: item.is_primary ?? (typeof item.is_visible === 'boolean' ? item.is_visible : false),
        is_verified: item.is_verified ?? false,
        created_at: item.created_at,
        updated_at: item.updated_at
      }));

      console.log('[UserContactService] ‚úÖ Contacts data normalized:', normalized.length);
      return normalized;
    } catch (error) {
      console.error('[UserContactService] ‚ùå Error fetching contacts:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
   */
  static async createContact(contactData: ContactUpdateData): Promise<BackendAccountContact | null> {
    try {
      console.log('[UserContactService] üì§ Creating contact...', contactData);

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID
      const account = await UserAccountService.getUserAccount();
      console.log('[UserContactService] üè¢ User account:', account);

      if (!account) {
        throw new Error('User account not found. Please create account first.');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç backend: { type, value, is_visible, note, account }
      const backendPayload: any = {
        type: contactData.contact_type,
        value: contactData.contact_value,
        is_visible: contactData.is_primary ?? true,
        note: undefined,
        account: account.id,
      };

      console.log('[UserContactService] üì§ Sending contact data (backend shape):', backendPayload);

      const data = await fetchWithDomain<any>('api/accounts/contacts/', {
        method: 'POST',
        body: backendPayload,
        domain: 'internal',
        redirectOnError: false
      });

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ frontend-—Ñ–æ—Ä–º–∞—Ç
      const normalized: BackendAccountContact | null = data
        ? {
            id: data.id,
            account: data.adds_account ?? data.account ?? account.id,
            contact_type: data.type ?? data.contact_type,
            contact_value: data.value ?? data.contact_value,
            is_primary: data.is_primary ?? (typeof data.is_visible === 'boolean' ? data.is_visible : false),
            is_verified: data.is_verified ?? false,
            created_at: data.created_at,
            updated_at: data.updated_at,
          }
        : null;

      if (!normalized) {
        console.log('[UserContactService] ‚ùå No response from contact creation');
        return null;
      }

      console.log('[UserContactService] ‚úÖ Contact created successfully:', normalized);
      return normalized;
    } catch (error) {
      console.error('[UserContactService] ‚ùå Error creating contact:', error);

      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      if (error instanceof Error) {
        console.error('[UserContactService] ‚ùå Error details:', {
          message: error.message,
          stack: error.stack
        });
      }

      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
   */
  static async updateContact(contactId: number, contactData: Partial<ContactUpdateData>): Promise<BackendAccountContact | null> {
    try {
      console.log('[UserContactService] üì§ Updating contact...', { contactId, contactData });

      const data = await fetchWithDomain<BackendAccountContact>(`api/accounts/contacts/${contactId}`, {
        method: 'PATCH',
        body: contactData,
        domain: 'internal',
        redirectOnError: false
      });

      if (!data) {
        console.log('[UserContactService] ‚ùå No response from contact update');
        return null;
      }

      console.log('[UserContactService] ‚úÖ Contact updated successfully');
      return data;
    } catch (error) {
      console.error('[UserContactService] ‚ùå Error updating contact:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
   */
  static async deleteContact(contactId: number): Promise<boolean> {
    try {
      console.log('[UserContactService] üì§ Deleting contact...', contactId);

      await fetchWithDomain(`api/accounts/contacts/${contactId}`, {
        method: 'DELETE',
        domain: 'internal',
        redirectOnError: false
      });

      console.log('[UserContactService] ‚úÖ Contact deleted successfully');
      return true;
    } catch (error) {
      console.error('[UserContactService] ‚ùå Error deleting contact:', error);
      throw error;
    }
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class UserAddressService {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserAddresses(): Promise<BackendRawAddress[]> {
    try {
      console.log('[UserAddressService] üì§ Fetching user addresses...');

      const data = await fetchWithDomain<BackendRawAddress[]>('api/user/addresses/', {
        domain: 'internal',
        redirectOnError: false
      });

      if (!data) {
        console.log('[UserAddressService] ‚ÑπÔ∏è No addresses found, returning empty array');
        return [];
      }

      console.log(`[UserAddressService] ‚úÖ Success: ${Array.isArray(data) ? data.length : 0} addresses found`);
      return Array.isArray(data) ? data : [];
    } catch (error) {
      console.error('[UserAddressService] ‚ùå Error fetching addresses:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
   */
  static async createAddress(addressData: RawAddressUpdateData): Promise<BackendRawAddress | null> {
    try {
      console.log('[UserAddressService] üì§ Creating new address...', addressData);

      // Use Next.js API route instead of direct backend call
      const response = await fetch('/api/accounts/addresses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(addressData)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (!data) {
        console.log('[UserAddressService] ‚ùå No response from address creation');
        return null;
      }

      console.log('[UserAddressService] ‚úÖ Address created successfully');
      return data;
    } catch (error) {
      console.error('[UserAddressService] ‚ùå Error creating address:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
   */
  static async updateAddress(addressId: number, addressData: RawAddressUpdateData): Promise<BackendRawAddress | null> {
    try {
      console.log('[UserAddressService] üì§ Updating address...', addressId, addressData);

      // Use Next.js API route instead of direct backend call
      const response = await fetch(`/api/accounts/addresses/${addressId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(addressData)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (!data) {
        console.log('[UserAddressService] ‚ùå No response from address update');
        return null;
      }

      console.log('[UserAddressService] ‚úÖ Address updated successfully');
      return data;
    } catch (error) {
      console.error('[UserAddressService] ‚ùå Error updating address:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å
   */
  static async deleteAddress(addressId: number): Promise<boolean> {
    try {
      console.log('[UserAddressService] üì§ Deleting address...', addressId);

      // Use Next.js API route instead of direct backend call
      const response = await fetch(`/api/accounts/addresses/${addressId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      console.log('[UserAddressService] ‚úÖ Address deleted successfully');
      return true;
    } catch (error) {
      console.error('[UserAddressService] ‚ùå Error deleting address:', error);
      return false;
    }
  }
}

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class FullUserDataService {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Ñ–∏–ª—å + –∞–∫–∫–∞—É–Ω—Ç + –∞–¥—Ä–µ—Å–∞ + –∫–æ–Ω—Ç–∞–∫—Ç—ã)
   */
  static async getFullUserData(): Promise<FullUserProfileData | null> {
    try {
      console.log('[FullUserDataService] üì§ Fetching full user data...');

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const [profileResponse, accountResponse, addressResponse, contactResponse] = await Promise.allSettled([
        UserProfileService.getUserProfile(),
        UserAccountService.getUserAccount(),
        UserAddressService.getUserAddresses(),
        UserContactService.getAccountContacts()
      ]);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const profile = profileResponse.status === 'fulfilled' ? profileResponse.value : null;
      const account = accountResponse.status === 'fulfilled' ? accountResponse.value : null;
      const addressList = addressResponse.status === 'fulfilled' ? addressResponse.value : [];
      const contactList = contactResponse.status === 'fulfilled' ? contactResponse.value : [];

      if (!profile) {
        console.log('[FullUserDataService] ‚ùå Failed to load user profile');
        return null;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –¥–ª—è is_staff –∏ is_superuser
      let userFlags = { is_staff: false, is_superuser: false, is_active: true };
      try {
        if (typeof window !== 'undefined') {
          const storedAuth = localStorage.getItem('backend_auth');
          if (storedAuth) {
            const authData = JSON.parse(storedAuth);
            if (authData?.user) {
              userFlags = {
                is_staff: authData.user.is_staff || false,
                is_superuser: authData.user.is_superuser || false,
                is_active: authData.user.is_active !== undefined ? authData.user.is_active : true
              };
              console.log('[FullUserDataService] üîë User flags from localStorage:', userFlags);
            }
          }
        }
      } catch (error) {
        console.error('[FullUserDataService] ‚ùå Error getting user flags:', error);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const fullData: FullUserProfileData = {
        user: {
          id: profile.profile?.user || 0,
          email: profile.email,
          is_active: userFlags.is_active,
          is_staff: userFlags.is_staff,
          is_superuser: userFlags.is_superuser,
          profile: profile.profile,
          created_at: profile.profile?.created_at || '',
          updated_at: profile.profile?.updated_at || ''
        },
        account: account,
        addresses: addressList,
        contacts: contactList
      };

      console.log('[FullUserDataService] ‚úÖ Full user data loaded successfully:', {
        profile: !!profile,
        account: !!account,
        addressCount: addressList?.length || 0,
        contactCount: contactList?.length || 0
      });
      return fullData;
    } catch (error) {
      console.error('[FullUserDataService] ‚ùå Error loading full user data:', error);
      return null;
    }
  }
}
