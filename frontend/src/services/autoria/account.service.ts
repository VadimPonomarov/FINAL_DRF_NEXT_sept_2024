/**
 * Account Service - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
import { getAuthorizationHeaders } from '@/common/constants/headers';

export interface AccountUpdateData {
  account_type: 'BASIC' | 'PREMIUM';
  reason?: string;
  notify_user?: boolean;
}

export class AccountService {
  private static readonly BASE_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ PREMIUM –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π
   */
  static async upgradeToPremium(accountId: number): Promise<any> {
    console.log(`üîÑ Upgrading account ${accountId} to PREMIUM...`);

    try {
      const headers = await getAuthorizationHeaders();

      const updateData = {
        account_type: 'PREMIUM'
      };

      const response = await fetch(`${this.BASE_URL}/api/accounts/admin/${accountId}/type/`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        body: JSON.stringify(updateData),
        cache: 'no-store'
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Failed to upgrade account ${accountId}:`, errorText);
        throw new Error(`Failed to upgrade account: ${response.statusText}`);
      }

      const result = await response.json();
      console.log(`‚úÖ Account ${accountId} upgraded to PREMIUM:`, result);
      return result;
    } catch (error) {
      console.error(`‚ùå Error upgrading account ${accountId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
   */
  static async getAccountInfo(accountId: number): Promise<any> {
    try {
      const headers = await getAuthorizationHeaders();

      const response = await fetch(`${this.BASE_URL}/api/accounts/${accountId}/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        cache: 'no-store'
      });

      if (!response.ok) {
        throw new Error(`Failed to get account info: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error(`‚ùå Error getting account ${accountId} info:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
   */
  static async getUserById(userId: number): Promise<any> {
    try {
      const headers = await getAuthorizationHeaders();

      const response = await fetch(`${this.BASE_URL}/api/users/admin/${userId}/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        cache: 'no-store'
      });

      if (!response.ok) {
        throw new Error(`Failed to get user info: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error(`‚ùå Error getting user ${userId} info:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ email
   */
  static async getUserByEmail(email: string): Promise<any> {
    try {
      console.log('üîë Getting authorization headers...');
      const headers = await getAuthorizationHeaders();
      console.log('üîë Headers received:', Object.keys(headers));

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π admin endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const url = `${this.BASE_URL}/api/users/admin/list/?email=${encodeURIComponent(email)}`;
      console.log('üåê Making request to:', url);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        cache: 'no-store'
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå HTTP error:', response.status, errorText);
        if (response.status === 404) {
          throw new Error(`User with email ${email} not found`);
        }
        if (response.status === 403) {
          throw new Error(`Access denied. Admin rights required to search users`);
        }
        throw new Error(`Failed to get user by email: ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      console.log('üìã API Response structure:', {
        hasResults: !!result.results,
        isArray: Array.isArray(result),
        resultCount: result.results?.length || 0,
        keys: Object.keys(result)
      });

      // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const user = Array.isArray(result.results) ? result.results[0] :
                   Array.isArray(result) ? result[0] : result;

      if (!user) {
        throw new Error(`User with email ${email} not found`);
      }

      console.log('‚úÖ Found user:', { id: user.id, email: user.email });
      return user;
    } catch (error) {
      console.error(`‚ùå Error getting user by email ${email}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
   */
  static async getUserById(userId: number): Promise<any> {
    try {
      console.log('üîë Getting authorization headers...');
      const headers = await getAuthorizationHeaders();

      const url = `${this.BASE_URL}/api/users/admin/${userId}/`;
      console.log('üåê Making request to:', url);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        cache: 'no-store'
      });

      console.log('üì° Response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå HTTP error:', response.status, errorText);
        if (response.status === 404) {
          throw new Error(`User with ID ${userId} not found`);
        }
        if (response.status === 403) {
          throw new Error(`Access denied. Admin rights required to get user details`);
        }
        throw new Error(`Failed to get user by ID: ${response.statusText} - ${errorText}`);
      }

      const user = await response.json();
      console.log('‚úÖ Found user:', { id: user.id, email: user.email });
      return user;
    } catch (error) {
      console.error(`‚ùå Error getting user by ID ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user ID
   */
  static async getAccountByUserId(userId: number): Promise<any> {
    try {
      const headers = await getAuthorizationHeaders();

      const response = await fetch(`${this.BASE_URL}/api/accounts/?user=${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        cache: 'no-store'
      });

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error(`Account for user ${userId} not found`);
        }
        throw new Error(`Failed to get account by user ID: ${response.statusText}`);
      }

      const result = await response.json();
      // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const account = Array.isArray(result.results) ? result.results[0] :
                     Array.isArray(result) ? result[0] : result;

      if (!account) {
        throw new Error(`Account for user ${userId} not found`);
      }

      return account;
    } catch (error) {
      console.error(`‚ùå Error getting account by user ID ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ò–∑–º–µ–Ω—è–µ—Ç —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ (BASIC/PREMIUM) –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π admin endpoint
   */
  static async changeAccountType(accountId: number, accountType: 'BASIC' | 'PREMIUM', reason?: string): Promise<any> {
    console.log(`üîÑ Changing account ${accountId} type to ${accountType}...`);

    try {
      const headers = await getAuthorizationHeaders();
      console.log('üîë Headers:', headers);

      const updateData = {
        account_type: accountType
      };

      const url = `${this.BASE_URL}/api/accounts/admin/${accountId}/type/`;
      console.log('üåê Request URL:', url);
      console.log('üì¶ Request data:', updateData);

      const response = await fetch(url, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          ...headers,
        },
        body: JSON.stringify(updateData),
        cache: 'no-store'
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Failed to change account ${accountId} type:`, errorText);

        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (response.status === 404) {
          throw new Error(`Account with ID ${accountId} not found`);
        } else if (response.status === 403) {
          throw new Error('Access denied. Only superusers can change account types.');
        } else if (response.status === 401) {
          throw new Error('Authentication required. Please log in.');
        } else {
          throw new Error(`Failed to change account type: ${response.status} ${response.statusText}. ${errorText}`);
        }
      }

      const result = await response.json();
      console.log(`‚úÖ Account ${accountId} type changed to ${accountType}:`, result);
      return result;
    } catch (error) {
      console.error(`‚ùå Error changing account ${accountId} type:`, error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
      if (error instanceof TypeError && error.message.includes('fetch')) {
        throw new Error('Network error: Unable to connect to the server. Please check your connection.');
      }

      throw error;
    }
  }
}
