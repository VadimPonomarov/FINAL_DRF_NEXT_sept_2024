/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CRUD
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API proxy –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DRF
// –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –≤ Node.js (API routes) - –ø–æ–ª–Ω—ã–π URL
const API_BASE = typeof window !== 'undefined'
  ? '/api/autoria'
  : 'http://localhost:3000/api/autoria';
import {
  CarAd,
  CarAdFormData,
  CarSearchFormData,
  CarAdAnalytics,
  PaginatedResponse,
  ApiResponse,
  ModerationResult,
  AccountLimits
} from '@/types/autoria';
import { fetchWithAuth } from '@/utils/fetchWithAuth';

export class CarAdsService {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  static async getCarAds(
    params?: CarSearchFormData & {
      page?: number;
      page_size?: number;
      ordering?: string;
      status?: string;
      mine?: boolean; // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
      owner_id?: number | 'me';
    }
  ): Promise<PaginatedResponse<CarAd>> {
    const queryParams = new URLSearchParams();

    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è backend API
          let paramKey = key;
          let paramValue = String(value);

          // –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          if (key === 'sort_by') {
            paramKey = 'ordering';
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º frontend —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ backend —Ñ–æ—Ä–º–∞—Ç
            switch (value) {
              case 'price_asc':
                paramValue = 'price';
                break;
              case 'price_desc':
                paramValue = '-price';
                break;
              case 'year_desc':
                paramValue = '-year';
                break;
              case 'year_asc':
                paramValue = 'year';
                break;
              case 'mileage_asc':
                paramValue = 'mileage_km';
                break;
              case 'mileage_desc':
                paramValue = '-mileage_km';
                break;
              case 'created_desc':
                paramValue = '-created_at';
                break;
              case 'created_asc':
                paramValue = 'created_at';
                break;
              default:
                paramValue = '-created_at';
            }
          }

          // –ú–∞–ø–ø–∏–Ω–≥ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          if (key === 'brand' && value) {
            paramKey = 'mark';
          }
          if (key === 'mileage_to' && value) {
            paramKey = 'mileage_km_max';
          }
          if (key === 'transmission' && value) {
            paramKey = 'transmission_type';
          }

          // –ú–∞–ø–ø–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–∞ "—Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
          if (key === 'mine' && value === true) {
            // –ù–∞ backend –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä created_by=me
            paramKey = 'created_by';
            paramValue = 'me';
          }
          if (key === 'owner_id') {
            paramKey = 'created_by';
          }

          // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–µ–Ω—ã, –≥–æ–¥–∞ –∏ –ø—Ä–æ–±–µ–≥–∞ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ SearchPage.tsx
          // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –µ—Å—Ç—å

          queryParams.append(paramKey, paramValue);
        }
      });
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—É–±–ª–∏—á–Ω–æ–º –ø–æ–∏—Å–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    // –ï—Å–ª–∏ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç–∞—Ç—É—Å –∏ –Ω–µ –≤–∫–ª—é—á–∏–ª–∏ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ active
    const isOwnQuery = queryParams.get('created_by') === 'me' || queryParams.has('created_by');
    if (!queryParams.has('status') && !isOwnQuery) {
      queryParams.append('status', 'active');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API route –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
    const endpoint = `/api/autoria/cars${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;

    console.log('[CarAdsService] Fetching cars:', endpoint);

    const response = await fetchWithAuth(endpoint, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      cache: 'no-store'
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] API Error:', response.status, errorText);
      throw new Error(`Failed to fetch car ads: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('[CarAdsService] Success:', data.count || 0, 'cars found');

    return data;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async getCarAd(id: number): Promise<CarAd> {
    console.log('[CarAdsService] Fetching car ad:', id);

    const response = await fetchWithAuth(`/api/autoria/cars/${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] Get car ad error:', response.status, errorText);
      throw new Error(`Failed to fetch car ad: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('[CarAdsService] Successfully fetched car ad:', data.id);
    return data;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  static async addToFavorites(carId: number): Promise<void> {
    console.log('[CarAdsService] Adding to favorites:', carId);

    const response = await fetch(`/api/autoria/cars/${carId}/favorite`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] Add to favorites error:', response.status, errorText);
      throw new Error(`Failed to add to favorites: ${response.statusText}`);
    }

    console.log('[CarAdsService] Successfully added to favorites');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  static async removeFromFavorites(carId: number): Promise<void> {
    console.log('[CarAdsService] Removing from favorites:', carId);

    const response = await fetch(`/api/autoria/cars/${carId}/favorite`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] Remove from favorites error:', response.status, errorText);
      throw new Error(`Failed to remove from favorites: ${response.statusText}`);
    }

    console.log('[CarAdsService] Successfully removed from favorites');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async updateCarAd(id: number, data: Partial<CarAdFormData>): Promise<CarAd> {
    console.log('[CarAdsService] üîÑ Updating car ad:', id);
    console.log('[CarAdsService] üì§ Request data keys:', Object.keys(data));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API route –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateUrl = `/api/autoria/cars/${id}/update`;
    console.log('[CarAdsService] üì§ Request URL:', updateUrl);

    const requestBody = JSON.stringify(data);
    console.log('[CarAdsService] üì§ Request body size:', requestBody.length, 'chars');

    const response = await fetch(updateUrl, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: requestBody
    });

    console.log('[CarAdsService] üì° Response status:', response.status);
    console.log('[CarAdsService] üì° Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] ‚ùå Update error:', response.status, errorText);
      console.error('[CarAdsService] ‚ùå Failed request data sample:', {
        id,
        dataKeys: Object.keys(data),
        url: `/api/autoria/cars/${id}`
      });
      throw new Error(`Failed to update car ad: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const result = await response.json();
    console.log('[CarAdsService] ‚úÖ Successfully updated car ad:', result.id);
    console.log('[CarAdsService] ‚úÖ Response data keys:', Object.keys(result));
    return result;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async deleteCarAd(id: number): Promise<void> {
    console.log('[CarAdsService] Deleting car ad:', id);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API route
    const deleteUrl = `/api/autoria/cars/${id}`;
    console.log('[CarAdsService] üì§ Delete URL:', deleteUrl);

    const response = await fetchWithAuth(deleteUrl, {
      method: 'DELETE'
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] Delete error:', response.status, errorText);
      throw new Error(`Failed to delete car ad: ${response.statusText}`);
    }

    console.log('[CarAdsService] Successfully deleted car ad');
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É ID (—Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ –ø–æ—à—Ç—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  static async bulkDeleteMyAds(ids: number[]): Promise<{ deleted: number[]; failed: number[] }> {
    if (!Array.isArray(ids) || ids.length === 0) {
      return { deleted: [], failed: [] };
    }

    try {
      const url = `/api/ads/bulk-delete`;
      const response = await fetchWithAuth(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids })
      });

      if (response.ok) {
        const data = await response.json().catch(() => ({}));
        return {
          deleted: data?.deleted_ids || ids,
          failed: data?.failed_ids || []
        };
      }
      // –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç bulk ‚Äî –ø–∞–¥–∞–µ–º –≤ —Ñ–æ–ª–±—ç–∫
      console.warn('[CarAdsService] bulk endpoint not available, falling back to per-item deletes');
    } catch (e) {
      console.warn('[CarAdsService] bulk delete failed, fallback to per-item:', e);
    }

    const results = await Promise.allSettled(ids.map(id => this.deleteCarAd(id)));
    const deleted: number[] = [];
    const failed: number[] = [];
    results.forEach((r, idx) => (r.status === 'fulfilled' ? deleted : failed).push(ids[idx]));
    return { deleted, failed };
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –Ω–µ—Ç endpoint ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ —É–¥–∞–ª—è–µ–º)
  static async bulkDeleteMyAdsByStatus(status: string): Promise<{ deleted: number; failed: number }> {
    try {
      const url = `/api/ads/bulk-delete?status=${encodeURIComponent(status)}`;
      const response = await fetchWithAuth(url, { method: 'POST' });
      if (response.ok) {
        const data = await response.json().catch(() => ({}));
        return {
          deleted: Number(data?.deleted || 0),
          failed: Number(data?.failed || 0)
        };
      }
      console.warn('[CarAdsService] bulk-by-status endpoint not available, falling back to client bulk');
    } catch (e) {
      console.warn('[CarAdsService] bulk-by-status failed, fallback to client bulk:', e);
    }

    // –§–æ–ª–±—ç–∫: –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
    const pageData = await this.getMyCarAds({ page: 1, limit: 1000, status });
    const ids = (pageData.results || []).map(a => a.id as unknown as number);
    const { deleted, failed } = await this.bulkDeleteMyAds(ids);
    return { deleted: deleted.length, failed: failed.length };
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (owner endpoint –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å)
  static async updateMyAdStatus(id: number, status: string): Promise<CarAd> {
    console.log('[CarAdsService] Updating my ad status:', { id, status });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º owner endpoint —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ API —Ä–æ—É—Ç
    const url = `/api/autoria/cars/${id}/status`;
    const response = await fetchWithAuth(url, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      credentials: 'include',
      body: JSON.stringify({ status })
    });

    if (!response.ok) {
      let errorMessage = `Failed to update status: ${response.statusText}`;
      try {
        const errorData = await response.json();
        errorMessage = errorData.detail || errorData.error || errorMessage;
      } catch (e) {
        // If we can't parse the error as JSON, use the status text
        console.error('Error parsing error response:', e);
      }
      console.error('[CarAdsService] Update status error:', response.status, errorMessage);
      throw new Error(errorMessage);
    }

    try {
      return await response.json();
    } catch (e) {
      console.error('Error parsing response:', e);
      return { id, status } as CarAd; // Return minimal response if parsing fails
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async createCarAd(data: CarAdFormData): Promise<CarAd> {
    console.log('[CarAdsService] üîÑ Creating new car ad');
    console.log('[CarAdsService] üì§ Request data keys:', Object.keys(data));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API route
    const createUrl = '/api/autoria/cars';
    console.log('[CarAdsService] üì§ Create URL:', createUrl);

    const response = await fetch(createUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    console.log('[CarAdsService] üì° Create response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] ‚ùå Create error:', response.status, errorText);
      throw new Error(`Failed to create car ad: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const result = await response.json();
    const created = (result && (result.data || result));
    console.log('[CarAdsService] ‚úÖ Successfully created car ad:', created?.id || created?.data?.id);
    return created;
  }





  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getMyCarAds(
    params?: { page?: number; limit?: number; status?: string; ordering?: string; search?: string }
  ): Promise<PaginatedResponse<CarAd>> {
    const queryParams = new URLSearchParams();

    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          // –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è backend API
          let paramKey = key;
          let paramValue = String(value);

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º limit –≤ page_size –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è backend API
          if (key === 'limit') {
            paramKey = 'page_size';
          }

          queryParams.append(paramKey, paramValue);
        }
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint —á–µ—Ä–µ–∑ proxy
    const endpoint = `/api/ads/my-ads${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;

    console.log('[CarAdsService] Fetching my ads:', endpoint);

    const response = await fetchWithAuth(endpoint, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch my car ads: ${response.statusText}`);
    }

    return response.json();
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async testModeration(data: {
    title: string;
    description: string;
    price?: number;
  }): Promise<ModerationResult> {
    const response = await fetch(`${API_BASE}/test-moderation/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    if (!response.ok) {
      throw new Error(`Failed to test moderation: ${response.statusText}`);
    }

    return response.json();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Premium)
  static async getCarAdAnalytics(id: number): Promise<CarAdAnalytics> {
    const response = await fetch(`${API_BASE}/${id}/analytics/`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to get car ad analytics: ${response.statusText}`);
    }

    return response.json();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  static async addToFavorites(id: number): Promise<void> {
    const response = await fetch(`${API_BASE}/favorites/${id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to add to favorites: ${response.statusText}`);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  static async removeFromFavorites(id: number): Promise<void> {
    const response = await fetch(`${API_BASE}/favorites/${id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to remove from favorites: ${response.statusText}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  static async getFavoriteAds(
    params?: { page?: number; limit?: number }
  ): Promise<PaginatedResponse<CarAd>> {
    const queryParams = new URLSearchParams();

    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º limit –≤ page_size –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è backend API
          let paramKey = key;
          if (key === 'limit') {
            paramKey = 'page_size';
          }
          queryParams.append(paramKey, String(value));
        }
      });
    }

    const endpoint = `${API_BASE}/favorites${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;

    console.log('[CarAdsService] Fetching favorites:', endpoint);

    const response = await fetchWithAuth(endpoint, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch favorites: ${response.statusText}`);
    }

    return response.json();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
  static async checkAccountLimits(token: string): Promise<AccountLimits> {
    return api.get<AccountLimits>(`/api/accounts/limits/`, token);
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async toggleAdStatus(id: number, active: boolean, token: string): Promise<CarAd> {
    return api.patch<CarAd>(`${this.BASE_PATH}/${id}/`, { is_active: active }, token);
  }

  // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã)
  static async renewAd(id: number, token: string): Promise<CarAd> {
    return api.post<CarAd>(`${this.BASE_PATH}/${id}/renew/`, {}, token);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  static async getSimilarAds(id: number, limit: number = 5): Promise<CarAd[]> {
    return api.get<CarAd[]>(`${this.BASE_PATH}/${id}/similar/?limit=${limit}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  static async getViewStats(id: number, token: string): Promise<{
    total_views: number;
    today_views: number;
    week_views: number;
    month_views: number;
  }> {
    return api.get(`${this.BASE_PATH}/${id}/views/`, token);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É
  static async sendMessage(adId: number, message: string, token: string): Promise<void> {
    return api.post<void>(`${this.BASE_PATH}/${adId}/message/`, { message }, token);
  }

  // –ñ–∞–ª–æ–±–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  static async reportAd(id: number, reason: string, description?: string, token?: string): Promise<void> {
    return api.post<void>(`${this.BASE_PATH}/${id}/report/`, {
      reason,
      description
    }, token);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async getAdHistory(id: number, token: string): Promise<Array<{
    id: number;
    field: string;
    old_value: any;
    new_value: any;
    changed_at: string;
    changed_by: string;
  }>> {
    return api.get(`${this.BASE_PATH}/${id}/history/`, token);
  }

  // –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async cloneAd(id: number, token: string): Promise<CarAd> {
    return api.post<CarAd>(`${this.BASE_PATH}/${id}/clone/`, {}, token);
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  static async exportAd(id: number, format: 'pdf' | 'json' | 'xml', token: string): Promise<Blob> {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${this.BASE_PATH}/${id}/export/?format=${format}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error('Export failed');
    }

    return response.blob();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  static async getAdQRCode(id: number): Promise<string> {
    const response = await api.get<{ qr_code: string }>(`${this.BASE_PATH}/${id}/qr-code/`);
    return response.qr_code;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
  static async getShareUrl(id: number, platform: 'facebook' | 'telegram' | 'viber' | 'whatsapp'): Promise<string> {
    const response = await api.get<{ share_url: string }>(`${this.BASE_PATH}/${id}/share/?platform=${platform}`);
    return response.share_url;
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  static async toggleFavorite(carAdId: number): Promise<{ is_favorite: boolean; message: string }> {
    console.log('[CarAdsService] Toggling favorite for car ad:', carAdId);

    const response = await fetch('/api/autoria/favorites/toggle', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ car_ad_id: carAdId })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[CarAdsService] Toggle favorite error:', response.status, errorText);
      throw new Error(`Failed to toggle favorite: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('[CarAdsService] Successfully toggled favorite:', {
      car_ad_id: carAdId,
      is_favorite: data.is_favorite
    });

    return data;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  static async addToFavorites(carAdId: number): Promise<{ is_favorite: boolean; message: string }> {
    console.log('[CarAdsService] Adding to favorites:', carAdId);
    return this.toggleFavorite(carAdId);
  }

  // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  static async removeFromFavorites(carAdId: number): Promise<{ is_favorite: boolean; message: string }> {
    console.log('[CarAdsService] Removing from favorites:', carAdId);
    return this.toggleFavorite(carAdId);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
export default CarAdsService;
