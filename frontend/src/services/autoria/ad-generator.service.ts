/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */

import { ImageGenerationService } from './image-generation.service';

export interface GeneratedAd {
  title: string;
  description: string;
  model: string;
  mark: string;
  price: number;
  currency: string;
  region: string;
  city: string;
  seller_type: string;
  exchange_status: string;
  dynamic_fields: {
    year: number;
    mileage: number;
    fuel_type: string;
    transmission: string;
    body_type: string;
    engine_volume: number;
    engine_power: number;
    drive_type: string;
    color: string;
    condition: string;
  };
  images?: string[];
}

export class AdGeneratorService {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  static async generateUniqueAd(index: number, includeImages: boolean = false, imageTypes: string[] = ['front', 'side']): Promise<GeneratedAd> {
    console.log(`üé≤ Generating diverse ad ${index + 1}...`);

    if (includeImages && imageTypes.length === 0) {
      console.warn('‚ö†Ô∏è includeImages is true but no imageTypes specified, using defaults');
      imageTypes = ['front', 'side'];
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const carData = [
      { mark: 'BMW', models: ['X5', 'X3', '3 Series', '5 Series', 'X1'], region: '–ù—ñ–º–µ—á—á–∏–Ω–∞' },
      { mark: 'Mercedes-Benz', models: ['E-Class', 'C-Class', 'GLE', 'A-Class', 'S-Class'], region: '–ù—ñ–º–µ—á—á–∏–Ω–∞' },
      { mark: 'Toyota', models: ['Camry', 'Corolla', 'RAV4', 'Prius', 'Land Cruiser'], region: '–Ø–ø–æ–Ω—ñ—è' },
      { mark: 'Volkswagen', models: ['Golf', 'Passat', 'Tiguan', 'Polo', 'Jetta'], region: '–ù—ñ–º–µ—á—á–∏–Ω–∞' },
      { mark: 'Audi', models: ['A4', 'A6', 'Q5', 'A3', 'Q7'], region: '–ù—ñ–º–µ—á—á–∏–Ω–∞' },
      { mark: 'Ford', models: ['Focus', 'Mondeo', 'Kuga', 'Fiesta', 'Transit'], region: '–°–®–ê' },
      { mark: 'Honda', models: ['Civic', 'Accord', 'CR-V', 'Pilot', 'Fit'], region: '–Ø–ø–æ–Ω—ñ—è' },
      { mark: 'Hyundai', models: ['Elantra', 'Tucson', 'Santa Fe', 'i30', 'Sonata'], region: '–ö–æ—Ä–µ—è' },
      { mark: 'Kia', models: ['Sportage', 'Cerato', 'Sorento', 'Rio', 'Optima'], region: '–ö–æ—Ä–µ—è' },
      { mark: 'Mazda', models: ['CX-5', 'Mazda3', 'CX-3', 'Mazda6', 'CX-9'], region: '–Ø–ø–æ–Ω—ñ—è' }
    ];

    const cities = [
      { city: '–ö–∏—ó–≤', region: '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–•–∞—Ä–∫—ñ–≤', region: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–û–¥–µ—Å–∞', region: '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–î–Ω—ñ–ø—Ä–æ', region: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–õ—å–≤—ñ–≤', region: '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', region: '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–ö—Ä–∏–≤–∏–π –†—ñ–≥', region: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' },
      { city: '–ú–∏–∫–æ–ª–∞—ó–≤', region: '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å' }
    ];

    const sellerTypes = ['private', 'dealer', 'auto_salon'];
    const fuelTypes = ['petrol', 'diesel', 'hybrid', 'electric'];
    const transmissions = ['manual', 'automatic'];
    const bodyTypes = ['sedan', 'hatchback', 'suv', 'coupe', 'wagon', 'van'];
    const driveTypes = ['fwd', 'rwd', 'awd'];
    const colors = ['black', 'white', 'silver', 'blue', 'red', 'gray', 'green', 'brown', 'yellow'];
    const conditions = ['excellent', 'good', 'satisfactory'];
    const exchangeStatuses = ['no_exchange', 'possible'];

    // –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    const carInfo = carData[index % carData.length];
    const model = carInfo.models[Math.floor(Math.random() * carInfo.models.length)];
    const cityInfo = cities[index % cities.length];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const year = 2015 + (index % 10);
    const isNewCar = year >= 2022;
    const isLuxury = ['BMW', 'Mercedes-Benz', 'Audi'].includes(carInfo.mark);
    
    // –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—Ä–∫–∏, –≥–æ–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let basePrice = 15000;
    if (isLuxury) basePrice += 20000;
    if (isNewCar) basePrice += 15000;
    const price = basePrice + (index * 2000) % 40000;

    // –ü—Ä–æ–±–µ–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–æ–¥–∞
    const carAge = 2024 - year;
    const baseMileage = carAge * 15000; // 15k –∫–º –≤ –≥–æ–¥
    const mileage = Math.max(1000, baseMileage + (index * 3000) % 50000);

    const condition = isNewCar ? 'excellent' : conditions[index % conditions.length];
    const sellerType = isLuxury ? (index % 2 === 0 ? 'dealer' : 'auto_salon') : sellerTypes[index % sellerTypes.length];

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    const descriptions = [
      `–ü—Ä–æ–¥–∞—î—Ç—å—Å—è ${carInfo.mark} ${model} ${year} —Ä–æ–∫—É –≤–∏–ø—É—Å–∫—É –≤ ${condition === 'excellent' ? '–≤—ñ–¥–º—ñ–Ω–Ω–æ–º—É' : condition === 'good' ? '—Ö–æ—Ä–æ—à–æ–º—É' : '–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ–º—É'} —Å—Ç–∞–Ω—ñ. –ê–≤—Ç–æ–º–æ–±—ñ–ª—å –º–∞—î –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º—ñ—Å—Ç—ñ ${cityInfo.city}.`,
      `${carInfo.mark} ${model} ${year} - –Ω–∞–¥—ñ–π–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ ${carInfo.region}. –ü—Ä–æ–±—ñ–≥ ${Math.floor(mileage / 1000)}–∫ –∫–º. –í—Å—ñ –¢–û –ø—Ä–æ–π–¥–µ–Ω—ñ –≤—á–∞—Å–Ω–æ. –¢–æ—Ä–≥ –º–æ–∂–ª–∏–≤–∏–π.`,
      `–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø—Ä–æ–¥–∞—î—Ç—å—Å—è ${carInfo.mark} ${model} ${year} —Ä–æ–∫—É. –°—Ç–∞–Ω ${condition === 'excellent' ? '—ñ–¥–µ–∞–ª—å–Ω–∏–π' : condition === 'good' ? '—Ö–æ—Ä–æ—à–∏–π' : '—Ä–æ–±–æ—á–∏–π'}. –î–æ–∫—É–º–µ–Ω—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫—É. –ú–æ–∂–ª–∏–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –°–¢–û.`,
      `${carInfo.mark} ${model} ${year} - –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–∞ –¥–æ—Ä–æ–∑—ñ. –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —Ç–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π. –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–≤—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å–∞—Ö.`
    ];

    const adData: GeneratedAd = {
      title: `${carInfo.mark} ${model} ${year} - ${condition === 'excellent' ? '—ñ–¥–µ–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω' : condition === 'good' ? '—Ö–æ—Ä–æ—à–∏–π —Å—Ç–∞–Ω' : '—Ä–æ–±–æ—á–∏–π —Å—Ç–∞–Ω'}`,
      description: descriptions[index % descriptions.length],
      model,
      mark: carInfo.mark,
      price,
      currency: 'USD',
      region: cityInfo.region,
      city: cityInfo.city,
      seller_type: sellerType,
      exchange_status: exchangeStatuses[index % exchangeStatuses.length],
      dynamic_fields: {
        year,
        mileage,
        fuel_type: fuelTypes[index % fuelTypes.length],
        transmission: transmissions[index % transmissions.length],
        body_type: bodyTypes[index % bodyTypes.length],
        engine_volume: 1.0 + (index % 40) / 10,
        engine_power: 90 + (index * 15) % 350,
        drive_type: driveTypes[index % driveTypes.length],
        color: colors[index % colors.length],
        condition
      }
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.log(`üîç AdGeneratorService: includeImages = ${includeImages} for ${adData.title}`);
    if (includeImages) {
      try {
        console.log(`üé® Generating images for ${adData.title} with types:`, imageTypes);
        const images = await this.generateCarImages(adData, imageTypes);
        adData.images = images;
        console.log(`‚úÖ Generated ${images.length} images for ${adData.title}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to generate images for ${adData.title}:`, error);
        adData.images = [];
      }
    } else {
      console.log(`‚è≠Ô∏è Skipping image generation for ${adData.title} (includeImages = false)`);
      adData.images = [];
    }

    console.log(`‚úÖ Generated unique ad ${index + 1}:`, adData.title);
    return adData;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —á–µ—Ä–µ–∑ backend
   */
  private static async generateCarImages(adData: GeneratedAd, imageTypes: string[] = ['front', 'side']): Promise<string[]> {
    try {
      console.log(`üé® Generating images for ${adData.mark} ${adData.model} via backend with types:`, imageTypes);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –ø—É—Å—Ç—ã–µ
      if (imageTypes.length === 0) {
        throw new Error('No image types specified - cannot generate empty images');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
      const images = await ImageGenerationService.generateCarImagesForAd(adData, imageTypes);

      if (images.length > 0) {
        console.log(`‚úÖ Generated ${images.length} images via backend`);
        return images;
      } else {
        throw new Error('No images generated by backend - empty content not allowed');
      }

    } catch (error) {
      console.error(`‚ùå Image generation failed for ${adData.title}:`, error);

      // üîÑ REGENERATION CYCLE: Instead of fallback, trigger regeneration
      console.log(`üîÑ REGENERATION: Will retry image generation instead of using fallback`);
      throw new Error(`ImageGenerationFailed: ${error.message}`); // Trigger regeneration cycle
    }
  }
}
