/**
 * Runtime environment variable loader for Next.js production
 * 
 * –í–ê–ñ–ù–û: Next.js –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç NEXT_PUBLIC_* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–¥ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏.
 * –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ API routes –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
 * –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –∏–∑ env-config/.
 */

import fs from 'fs';
import path from 'path';

let envLoaded = false;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ env-config/ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export function loadRuntimeEnv() {
  if (envLoaded && process.env.NODE_ENV === 'production') {
    return; // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
  }

  try {
    const rootDir = process.cwd();
    const envConfigDir = path.resolve(rootDir, 'env-config');
    
    const envFiles = [
      path.join(envConfigDir, '.env.base'),
      path.join(envConfigDir, '.env.secrets'),
      path.join(envConfigDir, '.env.local'),
    ];

    for (const envFile of envFiles) {
      if (fs.existsSync(envFile)) {
        const content = fs.readFileSync(envFile, 'utf8');
        
        for (const line of content.split('\n')) {
          const trimmed = line.trim();
          if (trimmed && !trimmed.startsWith('#') && trimmed.includes('=')) {
            const [key, ...valueParts] = trimmed.split('=');
            const value = valueParts.join('=').trim();
            const keyTrimmed = key.trim();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if (keyTrimmed && !process.env[keyTrimmed]) {
              process.env[keyTrimmed] = value;
            }
          }
        }
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if (!process.env.NEXT_PUBLIC_BACKEND_URL) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º nginx proxy (http://localhost/api)
      // –î–ª—è production –≤ Docker - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å (http://app:8000)
      const isDocker = process.env.IS_DOCKER === 'true';
      process.env.NEXT_PUBLIC_BACKEND_URL = isDocker ? 'http://app:8000' : 'http://localhost/api';
    }
    
    if (!process.env.BACKEND_URL) {
      // BACKEND_URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Django
      const isDocker = process.env.IS_DOCKER === 'true';
      process.env.BACKEND_URL = isDocker ? 'http://app:8000' : 'http://localhost:8000';
    }

    envLoaded = true;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–≤ development –≤—Å–µ–≥–¥–∞, –≤ production —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîß [Runtime Env Loader] Environment variables loaded from env-config/');
      console.log(`   NEXT_PUBLIC_BACKEND_URL: ${process.env.NEXT_PUBLIC_BACKEND_URL}`);
      console.log(`   BACKEND_URL: ${process.env.BACKEND_URL}`);
      console.log(`   IS_DOCKER: ${process.env.IS_DOCKER || 'false'}`);
    }
  } catch (error) {
    console.error('‚ùå [Runtime Env Loader] Failed to load environment variables:', error);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (!process.env.NEXT_PUBLIC_BACKEND_URL) {
      process.env.NEXT_PUBLIC_BACKEND_URL = 'http://localhost/api';
    }
    if (!process.env.BACKEND_URL) {
      process.env.BACKEND_URL = 'http://localhost:8000';
    }
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
loadRuntimeEnv();

