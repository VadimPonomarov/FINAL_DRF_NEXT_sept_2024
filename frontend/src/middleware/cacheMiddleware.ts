/**
 * Middleware –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import { NextRequest, NextResponse } from 'next/server';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
const CACHE_CONFIG = {
  // üöÄ –°–ü–†–ê–í–û–ß–ù–´–ï –î–ê–ù–ù–´–ï - –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ï –î–û–õ–ì–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ, –Ω–µ –º–µ–Ω—è—é—Ç—Å—è)
  'reference/brands': { maxAge: 86400, staleWhileRevalidate: 172800 },      // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/models': { maxAge: 86400, staleWhileRevalidate: 172800 },      // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/vehicle-types': { maxAge: 86400, staleWhileRevalidate: 172800 }, // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/colors': { maxAge: 86400, staleWhileRevalidate: 172800 },     // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/regions': { maxAge: 86400, staleWhileRevalidate: 172800 },   // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/cities': { maxAge: 86400, staleWhileRevalidate: 172800 },     // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/fuel-types': { maxAge: 86400, staleWhileRevalidate: 172800 }, // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/transmissions': { maxAge: 86400, staleWhileRevalidate: 172800 }, // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference/body-types': { maxAge: 86400, staleWhileRevalidate: 172800 }, // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤
  'reference': { maxAge: 86400, staleWhileRevalidate: 172800 },            // 24 —á–∞—Å–∞ / 48 —á–∞—Å–æ–≤ (–æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω)
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - –∫–æ—Ä–æ—Ç–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  'user/contacts': { maxAge: 60, staleWhileRevalidate: 120 },          // 1 –º–∏–Ω / 2 –º–∏–Ω
  'user/profile': { maxAge: 120, staleWhileRevalidate: 240 },          // 2 –º–∏–Ω / 4 –º–∏–Ω
  
  // –û–±—ä—è–≤–ª–µ–Ω–∏—è - –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  'cars': { maxAge: 30, staleWhileRevalidate: 60 },                    // 30 —Å–µ–∫ / 1 –º–∏–Ω
  'ads/search': { maxAge: 60, staleWhileRevalidate: 120 },             // 1 –º–∏–Ω / 2 –º–∏–Ω
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  'default': { maxAge: 60, staleWhileRevalidate: 120 }                 // 1 –º–∏–Ω / 2 –º–∏–Ω
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è URL
 */
function getCacheConfig(pathname: string) {
  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  for (const [pattern, config] of Object.entries(CACHE_CONFIG)) {
    if (pattern !== 'default' && pathname.includes(pattern)) {
      return config;
    }
  }
  
  return CACHE_CONFIG.default;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É
 */
export function addCacheHeaders(request: NextRequest, response: NextResponse) {
  const pathname = request.nextUrl.pathname;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ API –∑–∞–ø—Ä–æ—Å–∞–º
  if (!pathname.startsWith('/api/')) {
    return response;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const cacheConfig = getCacheConfig(pathname);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const headers = new Headers(response.headers);
  
  // Cache-Control –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ CDN
  headers.set(
    'Cache-Control',
    `public, max-age=${cacheConfig.maxAge}, stale-while-revalidate=${cacheConfig.staleWhileRevalidate}`
  );
  
  // ETag –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const etag = generateETag(request);
  if (etag) {
    headers.set('ETag', etag);
  }
  
  // Vary –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  headers.set('Vary', 'Accept, Accept-Encoding, Authorization');
  
  // Last-Modified –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  headers.set('Last-Modified', new Date().toUTCString());
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  if (process.env.NODE_ENV === 'development') {
    headers.set('X-Cache-Config', JSON.stringify(cacheConfig));
    headers.set('X-Cache-Pattern', pathname);
  }
  
  console.log(`[CacheMiddleware] üöÄ Applied cache config for ${pathname}:`, cacheConfig);
  
  return new NextResponse(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers
  });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ETag –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 */
function generateETag(request: NextRequest): string | null {
  try {
    const url = request.nextUrl.toString();
    const method = request.method;
    const timestamp = Math.floor(Date.now() / (5 * 60 * 1000)); // –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ URL, –º–µ—Ç–æ–¥–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
    const hash = btoa(`${method}:${url}:${timestamp}`).slice(0, 16);
    return `"${hash}"`;
  } catch (error) {
    console.warn('[CacheMiddleware] Failed to generate ETag:', error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
 */
export function checkConditionalHeaders(request: NextRequest): NextResponse | null {
  const ifNoneMatch = request.headers.get('If-None-Match');
  const ifModifiedSince = request.headers.get('If-Modified-Since');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ETag
  if (ifNoneMatch) {
    const currentETag = generateETag(request);
    if (currentETag && ifNoneMatch === currentETag) {
      console.log('[CacheMiddleware] üéØ ETag match, returning 304');
      return new NextResponse(null, { status: 304 });
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Last-Modified (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  if (ifModifiedSince) {
    const modifiedSince = new Date(ifModifiedSince);
    const now = new Date();
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
    
    if (modifiedSince > fiveMinutesAgo) {
      console.log('[CacheMiddleware] üéØ Not modified, returning 304');
      return new NextResponse(null, { status: 304 });
    }
  }
  
  return null;
}

/**
 * Middleware –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function cachePreprocessor(request: NextRequest): NextResponse | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const conditionalResponse = checkConditionalHeaders(request);
  if (conditionalResponse) {
    return conditionalResponse;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (process.env.NODE_ENV === 'development') {
    console.log(`[CacheMiddleware] üì• Processing request: ${request.method} ${request.nextUrl.pathname}`);
  }
  
  return null;
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º
 */
export const CacheUtils = {
  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
   */
  async clearBrowserCache() {
    if (typeof window !== 'undefined' && 'caches' in window) {
      const cacheNames = await caches.keys();
      await Promise.all(
        cacheNames.map(cacheName => caches.delete(cacheName))
      );
      console.log('[CacheUtils] üóëÔ∏è Browser cache cleared');
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getCacheStats() {
    if (typeof window !== 'undefined' && 'caches' in window) {
      const cacheNames = await caches.keys();
      const stats = await Promise.all(
        cacheNames.map(async (name) => {
          const cache = await caches.open(name);
          const keys = await cache.keys();
          return {
            name,
            entries: keys.length,
            urls: keys.map(req => req.url).slice(0, 5) // –ü–µ—Ä–≤—ã–µ 5 URL –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
          };
        })
      );
      return stats;
    }
    return [];
  },

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
   */
  async preloadCriticalData() {
    const criticalUrls = [
      '/api/public/reference/vehicle-types?page_size=30',
      '/api/public/reference/regions?page_size=30',
      '/api/public/reference/colors?page_size=100',
      '/api/public/reference/fuel-types?page_size=20',
      '/api/public/reference/transmissions?page_size=10'
    ];

    console.log('[CacheUtils] üöÄ Preloading critical data...');
    
    try {
      await Promise.all(
        criticalUrls.map(url => 
          fetch(url, { 
            method: 'GET',
            headers: { 'X-Preload': 'true' }
          }).catch(err => 
            console.warn(`[CacheUtils] Failed to preload ${url}:`, err)
          )
        )
      );
      console.log('[CacheUtils] ‚úÖ Critical data preloaded');
    } catch (error) {
      console.error('[CacheUtils] ‚ùå Failed to preload critical data:', error);
    }
  }
};

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export function useCacheManager() {
  return {
    clearCache: CacheUtils.clearBrowserCache,
    getCacheStats: CacheUtils.getCacheStats,
    preloadCriticalData: CacheUtils.preloadCriticalData
  };
}
