/**
 * TypeScript —Ç–∏–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π AutoRia
 */

// –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
export type Currency = 'USD' | 'EUR' | 'UAH';
export type AccountType = 'basic' | 'premium';
export type AdStatus = 'draft' | 'pending' | 'active' | 'needs_review' | 'rejected' | 'sold' | 'archived';
export type UserRole = 'buyer' | 'seller' | 'manager' | 'admin';
// –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∏–ø ContactType

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ä–º—ã)
export interface CarAdFormData {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
  title?: string;
  description?: string;
  model?: string; // CharField –≤ –º–æ–¥–µ–ª–∏
  price?: number;
  currency?: Currency;
  region?: string; // ID —Ä–µ–≥–∏–æ–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  city?: string; // ID –≥–æ—Ä–æ–¥–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  region_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  city_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

  // –°–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è ID)
  brand?: string; // ID –º–∞—Ä–∫–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ (–∞–ª–∏–∞—Å –¥–ª—è mark)
  mark?: string; // ID –º–∞—Ä–∫–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  vehicle_type?: string; // ID —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞

  // –ù–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ virtual-select
  brand_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  mark_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  vehicle_type_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  model_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

  // –ù–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ virtual-select
  brand_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  mark_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  vehicle_type_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  generation?: string;
  modification?: string;

  // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç CarSpecificationModel)
  year?: number; // CarSpecificationModel.year
  mileage?: number; // Frontend –ø–æ–ª–µ, –º–∞–ø–ø–∏—Ç—Å—è –≤ mileage_km –Ω–∞ backend
  mileage_km?: number; // Backend –ø–æ–ª–µ CarSpecificationModel.mileage_km
  engine_volume?: number; // CarSpecificationModel.engine_volume (–≤ –ª–∏—Ç—Ä–∞—Ö)
  engine_power?: number; // CarSpecificationModel.engine_power (–≤ –ª.—Å.)
  fuel_type?: string; // CarSpecificationModel.fuel_type (enum)
  transmission?: string; // CarSpecificationModel.transmission_type (enum)
  transmission_type?: string; // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  drive_type?: string; // CarSpecificationModel.drive_type (enum)
  body_type?: string; // CarSpecificationModel.body_type (enum)
  color?: string | number; // CarSpecificationModel.color (ForeignKey ID)
  color_name?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–∑ CarColorModel.name)
  steering_wheel?: string; // CarSpecificationModel.steering_wheel (enum)
  condition?: string; // CarSpecificationModel.condition (enum)
  vin_code?: string; // CarSpecificationModel.vin_code (max 17 chars)
  license_plate?: string; // CarSpecificationModel.license_plate (max 20 chars)
  number_of_doors?: number; // CarSpecificationModel.number_of_doors (2,3,4,5)
  number_of_seats?: number; // CarSpecificationModel.number_of_seats (1-20)

  // –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –æ–±–º–µ–Ω
  seller_type?: 'private' | 'dealer' | 'auto_salon';
  exchange_status?: 'no_exchange' | 'possible' | 'only_exchange';

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  geocode?: string;

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è (JSON field –≤ –º–æ–¥–µ–ª–∏)
  dynamic_fields?: {
    year?: number;
    mileage?: number;
    engine_volume?: number;
    engine_power?: number;
    fuel_type?: string;
    transmission?: string;
    drive_type?: string;
    body_type?: string;
    color?: string;
    steering_wheel?: string;
    condition?: string;
    vin_code?: string;
    license_plate?: string;
    number_of_doors?: number;
    number_of_seats?: number;
    [key: string]: any; // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
  };

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  images?: string[];

  // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (ForeignKey relationships)
  region: number; // ForeignKey to RegionModel
  city: number; // ForeignKey to CityModel

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  seller_type?: string;
  exchange_status?: string;
  exchange_possible?: boolean; // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞

  // Dynamic fields (JSON field –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
  dynamic_fields?: Record<string, any>;

  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  contact_name?: string;
  additional_info?: string;
  contacts?: AdContact[]; // –ú–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  use_profile_contacts?: boolean; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  phone?: string;

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  images?: File[];
  existing_images?: CarAdImage[]; // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  images_to_delete?: number[]; // ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  main_existing_image_id?: number; // ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è


  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  uploaded_images?: File[]; // –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ, –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  generated_images?: Array<{
    id?: string | number;
    url: string;
    title?: string;
    isMain?: boolean;
    source?: 'uploaded' | 'generated' | 'existing';
    image_display_url?: string;
    image?: string;
  }>;
  main_image_index?: number; // –ò–Ω–¥–µ–∫—Å –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (CarMetadataModel)
  is_urgent?: boolean;
  is_highlighted?: boolean;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞–º–∏
  id?: number;
}

// üöó –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ backend API (CarAdSerializer)
export interface CarAd {
  id: number;
  title: string;
  description: string;

  // –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (populated ForeignKeys)
  mark: {
    id: number;
    name: string;
  } | number; // –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ ID
  model: string; // –í –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ —ç—Ç–æ CharField, –Ω–µ ForeignKey
  generation?: string;
  modification?: string;

  // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∏–∑ CarSpecificationModel + dynamic_fields)
  year?: number; // CarSpecificationModel.year –∏–ª–∏ dynamic_fields.year
  mileage?: number; // Frontend –ø–æ–ª–µ
  mileage_km?: number; // CarSpecificationModel.mileage_km –∏–ª–∏ dynamic_fields.mileage_km
  engine_volume?: number; // CarSpecificationModel.engine_volume
  engine_power?: number; // CarSpecificationModel.engine_power
  fuel_type?: string; // CarSpecificationModel.fuel_type (enum)
  transmission?: string; // Frontend –ø–æ–ª–µ
  transmission_type?: string; // CarSpecificationModel.transmission_type (enum)
  drive_type?: string; // CarSpecificationModel.drive_type (enum)
  body_type?: string; // CarSpecificationModel.body_type (enum)
  color?: {
    id: number;
    name: string;
    hex_code?: string;
  } | string | number; // CarSpecificationModel.color (ForeignKey) - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º
  steering_wheel?: string; // CarSpecificationModel.steering_wheel (enum)
  condition?: string; // CarSpecificationModel.condition (enum)
  vin_code?: string; // CarSpecificationModel.vin_code (max 17 chars)
  license_plate?: string; // CarSpecificationModel.license_plate (max 20 chars)
  number_of_doors?: number; // CarSpecificationModel.number_of_doors (2,3,4,5)
  number_of_seats?: number; // CarSpecificationModel.number_of_seats (1-20)

  // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  price: number;
  currency: Currency;

  // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞–º–∏/—á–∏—Å–ª–∞–º–∏)
  region: {
    id: number;
    name: string;
  } | string | number;
  city: {
    id: number;
    name: string;
  } | string | number;

  // –°—Ç–∞—Ç—É—Å –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è
  status: AdStatus;
  is_validated: boolean;
  moderation_reason?: string;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  seller_type: string;
  exchange_status: string;
  is_urgent: boolean;
  is_highlighted: boolean;

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  views_count?: number;
  created_at: string;
  updated_at: string;

  // Dynamic fields (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
  dynamic_fields?: Record<string, any>;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  contacts?: Contact[];
  contact_name?: string;
  phone?: string;
  additional_info?: string;
  images?: CarAdImage[];

  // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
  brand?: string | number; // –ê–ª–∏–∞—Å –¥–ª—è mark
  vehicle_type?: string;
}

// üìà –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (backend statistics API)
export interface AdStatistics {
  ad_id: number;
  title: string;
  is_premium: boolean;
  views?: {
    total: number;
    today: number;
    this_week: number;
    this_month: number;
    daily: Array<{ date: string; count: number }>;
    weekly: Array<{ week: string; count: number }>;
    monthly: Array<{ month: string; count: number }>;
  };
  pricing?: {
    your_price: {
      amount: number;
      currency: string;
    };
    region_average: {
      amount: number;
      currency: string;
      count: number;
      position_percentile: number;
    };
    ukraine_average: {
      amount: number;
      currency: string;
      count: number;
      position_percentile: number;
    };
  };
  recommendations?: Array<{
    type: 'price' | 'views' | 'description' | 'photos';
    message: string;
    priority: 'low' | 'medium' | 'high';
  }>;
  last_updated: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
export interface CarSearchFormData {
  vehicle_type?: string; // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
  brand?: string;
  model?: string;
  year_from?: number;
  year_to?: number;
  price_from?: number;
  price_to?: number;
  currency?: Currency;
  mileage_to?: number;
  fuel_type?: string;
  transmission?: string;
  region?: string;
  city?: string;
  status?: AdStatus; // –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  sort_by?: 'price_asc' | 'price_desc' | 'year_desc' | 'mileage_asc' | 'created_desc';
  page_size?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
}

// –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π CarAd –≤—ã—à–µ

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export interface CarAdImage {
  id: number;
  image: string;
  is_main: boolean;
  order: number;
  created_at: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export interface ImageUploadFormData {
  images: FileList;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Premium)
export interface CarAdAnalytics {
  ad_id: number;
  title: string;
  is_premium: boolean;
  views?: {
    total: number;
    today: number;
    this_week: number;
    this_month: number;
    daily: Array<{ date: string; count: number }>;
    weekly: Array<{ week: string; count: number }>;
    monthly: Array<{ month: string; count: number }>;
  };
  pricing?: {
    your_price: {
      amount: number;
      currency: Currency;
    };
    region_average: {
      amount: number;
      currency: Currency;
      count: number;
      position_percentile: number;
    };
    ukraine_average: {
      amount: number;
      currency: Currency;
      count: number;
      position_percentile: number;
    };
  };
  message?: string; // –î–ª—è –±–∞–∑–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserProfileFormData {
  first_name: string;
  last_name: string;
  phone: string;
  region: string;
  city: string;
  account_type: AccountType;
  notifications_email: boolean;
  notifications_push: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
export interface ModerationResult {
  status: 'approved' | 'rejected' | 'needs_review';
  reason?: string;
  violations?: string[];
  censored_content?: {
    title?: string;
    description?: string;
  };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export interface CarBrand {
  id: number;
  name: string;
  logo?: string;
  popular: boolean;
}

export interface CarModel {
  id: number;
  name: string;
  brand: number;
  popular: boolean;
}

export interface CarColor {
  id: number;
  name: string;
  hex_code?: string;
  popular: boolean;
}

export interface Region {
  id: number;
  name: string;
  cities: City[];
}

export interface City {
  id: number;
  name: string;
  region: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
export interface CurrencyRate {
  base_currency: Currency;
  target_currency: Currency;
  rate: number;
  updated_at: string;
  source: string;
}

export interface CurrencyConversion {
  amount: number;
  from_currency: Currency;
  to_currency: Currency;
  converted_amount: number;
  rate: number;
  rate_date: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
export interface AccountLimits {
  allowed: boolean;
  reason: string;
  account_type: AccountType;
  current_ads: number;
  max_ads: number | null;
  upgrade_message?: string;
  upgrade_url?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export interface PlatformStatistics {
  total_ads: number;
  active_ads: number;
  total_users: number;
  premium_users: number;
  ads_by_brand: Array<{ brand: string; count: number }>;
  ads_by_region: Array<{ region: string; count: number }>;
  average_price_by_currency: Record<Currency, number>;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface NotificationSettings {
  email_notifications: boolean;
  push_notifications: boolean;
  ad_approved: boolean;
  ad_rejected: boolean;
  new_message: boolean;
  price_drop_alert: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
export interface ChatMessage {
  id: number;
  ad_id: number;
  sender: {
    id: number;
    name: string;
    account_type: AccountType;
  };
  message: string;
  created_at: string;
  is_read: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export interface FavoriteAd {
  id: number;
  ad: CarAd;
  created_at: string;
}

// API Response —Ç–∏–ø—ã
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedResponse<T> {
  count: number;
  next: string | null;
  previous: string | null;
  results: T[];
}

// –¢–∏–ø—ã –¥–ª—è —Ñ–æ—Ä–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
export interface FormValidationError {
  field: string;
  message: string;
}

export interface FormSubmissionResult {
  success: boolean;
  data?: any;
  errors?: FormValidationError[];
  message?: string;
}

// –ö–æ–Ω—Ç–∞–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
export interface AdContact {
  id?: number;
  type: string; // ContactTypeEnum
  value: string;
  is_visible: boolean;
  is_primary: boolean;
  note?: string;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
export type {
  ExtendedFormFieldConfig,
  GenericFormProps
};
