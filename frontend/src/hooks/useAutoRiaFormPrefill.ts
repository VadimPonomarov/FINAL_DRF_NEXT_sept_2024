import { useCallback, useEffect } from 'react';
import { useUserProfile } from './useUserProfile';
import { CarAdFormData } from '@/types/autoria';

interface AutoFillData {
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  seller_name?: string;
  seller_phone?: string;
  seller_phone_secondary?: string;
  seller_telegram?: string;
  seller_viber?: string;
  seller_whatsapp?: string;
  
  // –ê–¥—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  region?: string;
  city?: string;
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  seller_email?: string;
}

export const useAutoRiaFormPrefill = () => {
  const { 
    profile, 
    contacts, 
    addresses, 
    loading, 
    error,
    getPrimaryContact,
    getPrimaryAddress,
    getFullName,
    isAuthenticated 
  } = useUserProfile();

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
   */
  const getAutoFillData = useCallback((): AutoFillData => {
    if (!isAuthenticated || !profile) {
      console.log('[AutoRiaFormPrefill] üîí User not authenticated or no profile');
      return {};
    }

    const primaryContact = getPrimaryContact();
    const primaryAddress = getPrimaryAddress();
    const fullName = getFullName();

    const autoFillData: AutoFillData = {};

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (fullName) {
      autoFillData.seller_name = fullName;
      console.log('[AutoRiaFormPrefill] ‚úÖ Added seller name:', fullName);
    }

    if (profile.email) {
      autoFillData.seller_email = profile.email;
      console.log('[AutoRiaFormPrefill] ‚úÖ Added seller email:', profile.email);
    }

    if (primaryContact) {
      if (primaryContact.phone) {
        autoFillData.seller_phone = primaryContact.phone;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added primary phone:', primaryContact.phone);
      }
      
      if (primaryContact.phone_secondary) {
        autoFillData.seller_phone_secondary = primaryContact.phone_secondary;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added secondary phone');
      }
      
      if (primaryContact.telegram) {
        autoFillData.seller_telegram = primaryContact.telegram;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added Telegram');
      }
      
      if (primaryContact.viber) {
        autoFillData.seller_viber = primaryContact.viber;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added Viber');
      }
      
      if (primaryContact.whatsapp) {
        autoFillData.seller_whatsapp = primaryContact.whatsapp;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added WhatsApp');
      }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (primaryAddress) {
      if (primaryAddress.region) {
        autoFillData.region = primaryAddress.region;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added region:', primaryAddress.region);
      }
      
      if (primaryAddress.city) {
        autoFillData.city = primaryAddress.city;
        console.log('[AutoRiaFormPrefill] ‚úÖ Added city:', primaryAddress.city);
      }
    }

    console.log('[AutoRiaFormPrefill] üìã Auto-fill data prepared:', Object.keys(autoFillData));
    return autoFillData;
  }, [
    isAuthenticated, 
    profile, 
    getPrimaryContact, 
    getPrimaryAddress, 
    getFullName
  ]);

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  const applyAutoFill = useCallback((
    currentFormData: Partial<CarAdFormData>,
    options: {
      overwriteExisting?: boolean; // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      fieldsToFill?: string[]; // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    } = {}
  ): Partial<CarAdFormData> => {
    const { overwriteExisting = false, fieldsToFill } = options;
    const autoFillData = getAutoFillData();

    if (Object.keys(autoFillData).length === 0) {
      console.log('[AutoRiaFormPrefill] ‚ÑπÔ∏è No auto-fill data available');
      return currentFormData;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const updatedFormData: Partial<CarAdFormData> = { ...currentFormData };
    let appliedCount = 0;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    Object.entries(autoFillData).forEach(([key, value]) => {
      const formKey = key as keyof CarAdFormData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –ø–æ–ª–µ
      if (fieldsToFill && !fieldsToFill.includes(key)) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ
      const canFill = value && (
        overwriteExisting ||
        !updatedFormData[formKey] ||
        updatedFormData[formKey] === ''
      );

      if (canFill) {
        (updatedFormData as any)[formKey] = value;
        appliedCount++;
        console.log(`[AutoRiaFormPrefill] üîÑ Auto-filled ${key}:`, value);
      }
    });

    if (appliedCount > 0) {
      console.log(`[AutoRiaFormPrefill] ‚úÖ Applied ${appliedCount} auto-fill values`);
    } else {
      console.log('[AutoRiaFormPrefill] ‚ÑπÔ∏è No fields were auto-filled');
    }

    return updatedFormData;
  }, [getAutoFillData]);

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
   */
  const isAutoFillAvailable = useCallback((): boolean => {
    return isAuthenticated && !!profile && Object.keys(getAutoFillData()).length > 0;
  }, [isAuthenticated, profile, getAutoFillData]);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  const getAutoFillSummary = useCallback(() => {
    const autoFillData = getAutoFillData();

    return {
      available: Object.keys(autoFillData).length > 0,
      fields: Object.keys(autoFillData),
      hasContact: !!getPrimaryContact(),
      hasAddress: !!getPrimaryAddress(),
      hasProfile: !!profile,
      totalFields: Object.keys(autoFillData).length,
    };
  }, [getAutoFillData, getPrimaryContact, getPrimaryAddress, profile]);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç placeholder'—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const getPlaceholders = useCallback(() => {
    if (!isAuthenticated || !profile) {
      return {};
    }

    const autoFillData = getAutoFillData();
    const placeholders: Record<string, string> = {};

    // –°–æ–∑–¥–∞–µ–º placeholder'—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    Object.entries(autoFillData).forEach(([key, value]) => {
      if (value) {
        switch (key) {
          case 'seller_name':
            placeholders[key] = `–Ω–∞–ø—Ä. ${value}`;
            break;
          case 'seller_phone':
            placeholders[key] = `–Ω–∞–ø—Ä. ${value}`;
            break;
          case 'seller_email':
            placeholders[key] = `–Ω–∞–ø—Ä. ${value}`;
            break;
          case 'region':
            placeholders[key] = `–Ω–∞–ø—Ä. ${value}`;
            break;
          case 'city':
            placeholders[key] = `–Ω–∞–ø—Ä. ${value}`;
            break;
          default:
            placeholders[key] = `–Ω–∞–ø—Ä. ${value}`;
        }
      }
    });

    return placeholders;
  }, [isAuthenticated, profile, getAutoFillData]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    profile,
    contacts,
    addresses,
    loading,
    error,
    isAuthenticated,

    // –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    getAutoFillData,
    applyAutoFill,
    isAutoFillAvailable,
    getAutoFillSummary,
    getPlaceholders,

    // –£—Ç–∏–ª–∏—Ç—ã
    getPrimaryContact,
    getPrimaryAddress,
    getFullName,
  };
};
