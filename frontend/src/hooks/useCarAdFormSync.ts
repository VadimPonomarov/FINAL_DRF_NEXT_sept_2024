/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */

import { useState, useEffect, useCallback, useRef } from 'react';
import { useI18n } from '@/contexts/I18nContext';
import { CarAdFormData } from '@/types/autoria';

interface UseCarAdFormSyncProps {
  initialData: Partial<CarAdFormData>;
  onDataChange?: (data: Partial<CarAdFormData>) => void;
}

export function useCarAdFormSync({ initialData, onDataChange }: UseCarAdFormSyncProps) {
  const { t } = useI18n();
  const [formData, setFormData] = useState<Partial<CarAdFormData>>(() => initialData);
  const [isDataReady, setIsDataReady] = useState(() => Object.keys(initialData).length > 0);
  const initialDataRef = useRef(initialData);
  const isInitializedRef = useRef(false);

  // –û–±–Ω–æ–≤–ª—è–µ–º formData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialData —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ
    const hasChanged = JSON.stringify(initialDataRef.current) !== JSON.stringify(initialData);

    if (!isInitializedRef.current || hasChanged) {
      console.log('[useCarAdFormSync] Initial data changed:', initialData);

      if (Object.keys(initialData).length > 0) {
        console.log('[useCarAdFormSync] Setting form data:', initialData);

        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const requiredFields = ['title', 'description', 'price', 'brand', 'model', 'region', 'city'];
        const missingFields = requiredFields.filter(field => {
          const value = initialData[field as keyof typeof initialData];
          return !value || value === '' || value === 0;
        });

        if (missingFields.length > 0) {
          console.error('[useCarAdFormSync] üö® CRITICAL: Missing required fields in initialData:', missingFields);
          console.error('[useCarAdFormSync] üö® Initial data:', initialData);
          console.error('[useCarAdFormSync] üö® FORM WILL NOT WORK PROPERLY - REQUIRED FIELDS ARE MISSING!');
        }

        setFormData(initialData);
        setIsDataReady(true);
      } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã
        const defaultData = {
          contacts: [],
          use_profile_contacts: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          status: 'draft',
          visibility_settings: {},
          metadata: {},
          tags: []
        };
        console.log('[useCarAdFormSync] Setting default data:', defaultData);
        setFormData(defaultData);
        setIsDataReady(true);
      }

      initialDataRef.current = initialData;
      isInitializedRef.current = true;
    }
  }, [initialData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–∞—Ö
  const handleTabDataChange = useCallback((tabId: string, tabData: Partial<CarAdFormData>) => {
    console.log(`[useCarAdFormSync] Tab ${tabId} data changed:`, tabData);

    setFormData(prevData => {
      const newData = { ...prevData, ...tabData };
      console.log('[useCarAdFormSync] Updated form data:', newData);

      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (onDataChange && JSON.stringify(prevData) !== JSON.stringify(newData)) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setTimeout(() => onDataChange(newData), 0);
      }

      return newData;
    });
  }, [onDataChange]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–±–∞
  const getTabData = useCallback((tabId: string): Partial<CarAdFormData> => {
    switch (tabId) {
      case 'specs':
        return {
          vehicle_type: formData.vehicle_type,
          vehicle_type_name: formData.vehicle_type_name,
          brand: formData.brand,
          brand_name: formData.brand_name,
          mark: formData.mark,
          mark_name: formData.mark_name,
          model: formData.model,
          model_name: formData.model_name,
          year: formData.year,
          mileage: formData.mileage,
          engine_volume: formData.engine_volume,
          engine_power: formData.engine_power,
          fuel_type: formData.fuel_type,
          transmission: formData.transmission,
          drive_type: formData.drive_type,
          body_type: formData.body_type,
          color: formData.color,
          color_name: formData.color_name,
          steering_wheel: formData.steering_wheel,
          condition: formData.condition,
          vin_code: formData.vin_code,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤
          region_name: formData.region_name,
          city_name: formData.city_name,
        };
      
      case 'pricing':
        return {
          price: formData.price,
          currency: formData.currency,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤
          region_name: formData.region_name,
          city_name: formData.city_name,
        };
      
      case 'location':
        return {
          region: formData.region,
          city: formData.city,
          region_name: formData.region_name,
          city_name: formData.city_name,
        };
      
      case 'contact':
        return {
          contacts: formData.contacts,
          contact_name: formData.contact_name,
          phone: formData.phone,
          use_profile_contacts: formData.use_profile_contacts,
          additional_info: formData.additional_info,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤
          region_name: formData.region_name,
          city_name: formData.city_name,
        };
      
      case 'images':
        return {
          images: formData.images,
          existing_images: formData.existing_images,
          images_to_delete: formData.images_to_delete,
          main_existing_image_id: formData.main_existing_image_id,
        };
      
      case 'metadata':
        return {
          license_plate: formData.license_plate,
          number_of_doors: formData.number_of_doors,
          number_of_seats: formData.number_of_seats,
          seller_type: formData.seller_type,
          exchange_status: formData.exchange_status,
          is_urgent: formData.is_urgent,
          is_highlighted: formData.is_highlighted,
        };
      
      case 'basic':
        return {
          title: formData.title,
          description: formData.description,
          additional_info: formData.additional_info,
        };
      
      default:
        return formData;
    }
  }, [formData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∞–±–∞
  const isTabValid = useCallback((tabId: string): boolean => {
    const tabData = getTabData(tabId);
    
    switch (tabId) {
      case 'specs':
        return !!(tabData.brand && tabData.model && tabData.year);
      
      case 'pricing':
        return !!(tabData.price && tabData.currency && tabData.price > 0);
      
      case 'location':
        return !!(tabData.region && tabData.city);
      
      case 'contact':
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è - —Ç–∞–± –≤–∞–ª–∏–¥–µ–Ω
        if (tabData.use_profile_contacts === true) {
          console.log('[useCarAdFormSync] Contact tab valid: using profile contacts');
          return true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã
        }
        // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        const hasOwnContacts = !!(tabData.contacts && Array.isArray(tabData.contacts) &&
                 tabData.contacts.some(contact => contact && contact.value && contact.value.trim() !== ''));
        console.log('[useCarAdFormSync] Contact tab validation:', {
          use_profile_contacts: tabData.use_profile_contacts,
          hasOwnContacts,
          contacts: tabData.contacts
        });
        return hasOwnContacts;
      
      case 'basic':
        return !!(tabData.title && tabData.description);
      
      default:
        return true; // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    }
  }, [getTabData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const getCompletionPercentage = useCallback((): number => {
    const requiredTabs = ['specs', 'pricing', 'location', 'contact'];
    const validTabs = requiredTabs.filter(tabId => isTabValid(tabId));
    return Math.round((validTabs.length / requiredTabs.length) * 100);
  }, [isTabValid]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
  const getMissingFields = useCallback((): string[] => {
    const missing = [];
    
    if (!isTabValid('specs')) missing.push(t('autoria.tabs.specs'));
    if (!isTabValid('pricing')) missing.push(t('autoria.tabs.pricing'));
    if (!isTabValid('location')) missing.push(t('autoria.tabs.location'));
    if (!isTabValid('contact')) missing.push(t('autoria.tabs.contact'));
    
    return missing;
  }, [isTabValid]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
  const isFormValid = useCallback((): boolean => {
    return isTabValid('specs') && isTabValid('pricing') && isTabValid('location') && isTabValid('contact');
  }, [isTabValid]);

  return {
    formData,
    isDataReady,
    handleTabDataChange,
    getTabData,
    isTabValid,
    getCompletionPercentage,
    getMissingFields,
    isFormValid,
    setFormData,
  };
}
