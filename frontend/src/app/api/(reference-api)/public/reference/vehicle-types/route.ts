import { NextRequest, NextResponse } from 'next/server';
import { fetchData } from '@/app/api/(helpers)/common';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);

    console.log(`[Vehicle Types API] üì§ Fetching vehicle types...`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const params: Record<string, string> = {};
    searchParams.forEach((value, key) => {
      params[key] = value;
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ö–µ–ª–ø–µ—Ä fetchData —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const data = await fetchData('api/ads/reference/vehicle-types/', {
      params,
      redirectOnError: false
    });

    if (!data) {
      console.log('[Vehicle Types API] ‚ùå No data received from backend');
      return NextResponse.json(
        { error: 'No vehicle types data available' },
        { status: 404 }
      );
    }

    console.log(`[Vehicle Types API] ‚úÖ Raw data received:`, data);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ backend
    let vehicleTypes = [];
    if (Array.isArray(data)) {
      vehicleTypes = data;
    } else if (data.results && Array.isArray(data.results)) {
      vehicleTypes = data.results;
    } else if (data.options && Array.isArray(data.options)) {
      vehicleTypes = data.options;
    }

    console.log(`[Vehicle Types API] ‚úÖ Processed ${vehicleTypes.length} vehicle types`);
    console.log(`[Vehicle Types API] üìã First vehicle type sample:`, vehicleTypes[0]);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const transformedData = vehicleTypes.map((item: any) => ({
      value: item.id?.toString() || item.value || '',
      label: item.name || item.label || ''
    }));

    console.log(`[Vehicle Types API] üîÑ Transformed data:`, transformedData.slice(0, 3));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return NextResponse.json({
      options: transformedData,
      total: vehicleTypes.length,
      hasMore: false
    });

  } catch (error) {
    console.error('[Vehicle Types API] ‚ùå Error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
