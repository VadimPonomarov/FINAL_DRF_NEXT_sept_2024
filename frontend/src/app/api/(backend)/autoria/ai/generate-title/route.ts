import { NextRequest, NextResponse } from 'next/server';
import { CarAdFormData } from '@/types/autoria';

interface TitleGenerationRequest {
  brand: string;
  model: string;
  year: number;
  price?: number;
  currency?: string;
  mileage?: number;
  fuel_type?: string;
  transmission?: string;
  engine_volume?: number;
  body_type?: string;
  color?: string;
  condition?: string;
}

interface TitleGenerationResponse {
  title: string;
  confidence: number;
  reasoning?: string;
}

export async function POST(request: NextRequest) {
  try {
    const body: TitleGenerationRequest = await request.json();
    const { 
      brand, 
      model, 
      year, 
      price, 
      currency = 'USD',
      mileage,
      fuel_type,
      transmission,
      engine_volume,
      body_type,
      color,
      condition
    } = body;

    // Validate required data
    if (!brand || !model || !year) {
      return NextResponse.json(
        { error: 'Insufficient data for title generation. Brand, model, and year are required.' },
        { status: 400 }
      );
    }

    console.log('üéØ [generate-title] Generating title with actual form data:', {
      brand, model, year, price, mileage, fuel_type, transmission, color, condition
    });

    // Create prompt using ONLY the actual form data
    const prompt = createTitlePrompt(body);

    // Try to call backend LLM service
    try {
      const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
      const response = await fetch(`${backendUrl}/api/ads/llm/generate-title/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mark: brand,
          model: model,
          year: year,
          specs: {
            mileage: mileage || 0,
            engine_volume: engine_volume || 2.0,
            engine_power: 150, // Default fallback
            fuel_type: fuel_type || 'petrol',
            transmission: transmission || 'automatic',
            color: color || 'black',
            condition: condition || 'good',
            price: price || 25000
          }
        }),
      });

      if (response.ok) {
        const result = await response.json();
        if (result.title) {
          console.log('‚úÖ [generate-title] Backend LLM generated:', result.title);
          return NextResponse.json({
            title: result.title,
            confidence: 90,
            reasoning: 'Generated using backend LLM service with actual form data'
          });
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è [generate-title] Backend LLM failed, using fallback:', error);
    }

    // Fallback: Generate title using actual form data
    const fallbackTitle = generateFallbackTitle(body);
    console.log('üîÑ [generate-title] Using fallback title:', fallbackTitle);

    const response: TitleGenerationResponse = {
      title: fallbackTitle,
      confidence: 75,
      reasoning: 'Generated using fallback logic with actual form characteristics'
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå [generate-title] Error:', error);
    return NextResponse.json(
      { error: 'Failed to generate title' },
      { status: 500 }
    );
  }
}

/**
 * Create prompt for title generation using actual form data
 */
function createTitlePrompt(data: TitleGenerationRequest): string {
  const carInfo = `${data.brand} ${data.model} ${data.year}`;
  
  const specs = [];
  if (data.mileage) specs.push(`–ø—Ä–æ–±—ñ–≥ ${data.mileage} –∫–º`);
  if (data.engine_volume) specs.push(`${data.engine_volume}–ª`);
  if (data.fuel_type) specs.push(data.fuel_type);
  if (data.transmission) specs.push(data.transmission);
  if (data.color) specs.push(`–∫–æ–ª—ñ—Ä ${data.color}`);
  if (data.condition) specs.push(`—Å—Ç–∞–Ω ${data.condition}`);
  if (data.price) specs.push(`—Ü—ñ–Ω–∞ ${data.price} ${data.currency}`);

  return `
–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –†–ï–ê–õ–¨–ù–ò–• —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:

–ê–≤—Ç–æ–º–æ–±—ñ–ª—å: ${carInfo}
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${specs.join(', ')}

–í–∏–º–æ–≥–∏:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
2. –ú–∞–∫—Å–∏–º—É–º 80 —Å–∏–º–≤–æ–ª—ñ–≤
3. –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
4. –ü—Ä–∏–≤–∞–±–ª–∏–≤–∏–π —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π
5. –ë–µ–∑ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
`;
}

/**
 * Generate fallback title using actual form data
 */
function generateFallbackTitle(data: TitleGenerationRequest): string {
  const carInfo = `${data.brand} ${data.model} ${data.year}`;
  
  const details = [];
  
  // Add actual characteristics from form
  if (data.color) {
    details.push(data.color);
  }
  
  if (data.condition) {
    const conditionMap: Record<string, string> = {
      'excellent': '–≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Å—Ç–∞–Ω',
      'good': '—Ö–æ—Ä–æ—à–∏–π —Å—Ç–∞–Ω',
      'fair': '–∑–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω',
      'needs_work': '–ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É',
      'new': '–Ω–æ–≤–∏–π',
      'used': '–≤–∂–∏–≤–∞–Ω–∏–π'
    };
    details.push(conditionMap[data.condition] || data.condition);
  }
  
  if (data.mileage && data.mileage < 50000) {
    details.push('–º–∞–ª–∏–π –ø—Ä–æ–±—ñ–≥');
  }
  
  if (data.engine_volume) {
    details.push(`${data.engine_volume}–ª`);
  }

  const detailsStr = details.length > 0 ? ` - ${details.join(', ')}` : '';
  
  return `${carInfo}${detailsStr}`.substring(0, 80);
}
