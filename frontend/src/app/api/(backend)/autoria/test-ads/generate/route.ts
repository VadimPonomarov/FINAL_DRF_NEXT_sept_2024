import { NextRequest, NextResponse } from 'next/server';
import { generateFullMockData } from '@/utils/mockData';
import { ServerAuthManager } from '@/utils/auth/serverAuth';

import { mapFormDataToApiData } from '@/utils/carAdDataMapper';
import type { CarAdFormData } from '@/types/autoria';

// –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function createTestAdsServer(request: NextRequest, count: number, includeImages: boolean, imageTypes: string[], onProgress?: (progress: number, message: string) => void) {
  console.log(`üöÄ Creating ${count} test ads on server...`);

  // Use current session tokens stored in Redis for all backend calls
  const isAuth = await ServerAuthManager.isAuthenticated(request);
  if (!isAuth) {
    onProgress?.(0, '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ /login');
    throw new Error('Not authenticated: backend_auth tokens missing');
  }
  const authFetch = (url: string, init?: RequestInit) => ServerAuthManager.authenticatedFetch(request, url, init);

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ
  onProgress?.(0, `–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ${count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`);



  const results = [];
  let totalImages = 0;

  // üöÄ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  console.log('üì¶ [TestAds] Pre-loading models cache...');
  let cachedModels: any[] = [];
  try {
    const modelsResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3000'}/api/public/reference/models?page_size=1000`);
    const modelsData = await modelsResponse.json();
    cachedModels = modelsData.options || [];
    console.log(`‚úÖ [TestAds] Cached ${cachedModels.length} models for generation`);
  } catch (error) {
    console.warn('‚ö†Ô∏è [TestAds] Failed to cache models, will use individual requests:', error);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  console.log('üë• Fetching users for ad distribution...');
  const usersResponse = await authFetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/autoria/users/`);

  let availableUsers: any[] = [];
  if (usersResponse.ok) {
    const usersData = await usersResponse.json();
    availableUsers = usersData.results || [];
    console.log(`üë• Found ${availableUsers.length} users for ad distribution`);
  } else {
    console.warn('‚ö†Ô∏è Could not fetch users, will use current session for all ads');
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º
  const superUsers = availableUsers.filter(u => u.is_superuser);
  const premiumUsers = availableUsers.filter(u =>
    !u.is_superuser && (u.account_adds?.account_type === 'PREMIUM' || u.is_staff)
  );
  const basicUsers = availableUsers.filter(u =>
    !u.is_superuser && !u.is_staff &&
    (u.account_adds?.account_type === 'BASIC' || !u.account_adds)
  );

  console.log(`üë• User distribution: ${superUsers.length} super, ${premiumUsers.length} premium, ${basicUsers.length} basic`);

  // –¢—Ä–µ–∫–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö basic –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)
  const usedBasicUsers = new Set<number>();

  for (let i = 0; i < count; i++) {
    try {
      const progress = Math.round((i / count) * (includeImages ? 50 : 90)); // 50% –µ—Å–ª–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, 90% –µ—Å–ª–∏ –±–µ–∑
      onProgress?.(progress, `–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}/${count}...`);
      console.log(`üìù Generating ad ${i + 1}/${count}...`);

      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      let selectedUser = null;
      let userCredentials = null;

      if (availableUsers.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        const availablePool = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
        premiumUsers.forEach(user => availablePool.push(user));

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
        superUsers.forEach(user => availablePool.push(user));

        // –î–æ–±–∞–≤–ª—è–µ–º basic –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã (–ª–∏–º–∏—Ç 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)
        basicUsers.forEach(user => {
          if (!usedBasicUsers.has(user.id)) {
            availablePool.push(user);
          }
        });

        if (availablePool.length > 0) {
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—É–ª–∞
          selectedUser = availablePool[Math.floor(Math.random() * availablePool.length)];

          // –ï—Å–ª–∏ —ç—Ç–æ basic –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
          if (basicUsers.some(u => u.id === selectedUser.id)) {
            usedBasicUsers.add(selectedUser.id);
            console.log(`üë§ Selected basic user: ${selectedUser.email} (${usedBasicUsers.size}/${basicUsers.length} basic users used)`);
          } else if (superUsers.some(u => u.id === selectedUser.id)) {
            console.log(`üî• Selected super user: ${selectedUser.email}`);
          } else {
            console.log(`üëë Selected premium user: ${selectedUser.email}`);
          }

          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞—Ü–∏–∏
          userCredentials = {
            email: selectedUser.email,
            password: '12345678' // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
          };
        } else {
          console.log(`‚ö†Ô∏è No available users (all basic users exhausted), falling back to current session`);
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let currentAuthFetch = authFetch; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é

      if (selectedUser && userCredentials) {
        console.log(`üîê Logging in as ${userCredentials.email}...`);

        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω–∞—Ü–∏—é
          const loginResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/login/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(userCredentials)
          });

          if (loginResponse.ok) {
            const loginData = await loginResponse.json();
            const accessToken = loginData.access;

            if (accessToken) {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é authFetch –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              currentAuthFetch = (url: string, init?: RequestInit) => {
                const headers = {
                  'Authorization': `Bearer ${accessToken}`,
                  'Content-Type': 'application/json',
                  ...(init?.headers || {})
                };
                return fetch(url, { ...init, headers });
              };

              console.log(`‚úÖ Successfully logged in as ${userCredentials.email}`);
            } else {
              console.warn(`‚ö†Ô∏è Login successful but no access token received for ${userCredentials.email}`);
            }
          } else {
            console.warn(`‚ö†Ô∏è Failed to login as ${userCredentials.email}, using current session`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Login error for ${userCredentials.email}:`, error);
        }
      } else {
        console.log('üë§ Using current session tokens for backend calls');
      }




      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
      const mock = await generateFullMockData(cachedModels.length > 0 ? cachedModels : undefined);
      const uniqueTitle = `${(mock as any).brand_name || mock.brand || 'Auto'} ${mock.model || ''} ${mock.year || ''} - Test Ad ${i + 1}`.trim();

      // Resolve valid region/city IDs from backend reference endpoints
      let resolvedRegionId: number | null = null;
      let resolvedCityId: number | null = null;
      try {
        const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
        const regionsResp = await currentAuthFetch(`${backendUrl}/api/ads/reference/regions/`);
        if (regionsResp.ok) {
          const regionsData = await regionsResp.json();
          const regionsArr: any[] = Array.isArray(regionsData) ? regionsData : (regionsData.results || []);
          const firstRegion = regionsArr[0];
          if (firstRegion?.id != null) {
            resolvedRegionId = Number(firstRegion.id);
            const citiesResp = await currentAuthFetch(`${backendUrl}/api/ads/reference/cities/?region_id=${resolvedRegionId}`);
            if (citiesResp.ok) {
              const citiesData = await citiesResp.json();
              const citiesArr: any[] = Array.isArray(citiesData) ? citiesData : (citiesData.results || citiesData?.cities || []);
              const firstCity = citiesArr[0];
              if (firstCity?.id != null) {
                resolvedCityId = Number(firstCity.id);
              }
            }
          }
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Unable to resolve region/city, proceeding without explicit IDs', e);
      }

      const formData: Partial<CarAdFormData> = {
        ...mock,
        title: uniqueTitle,
        description: (mock as any).description || `–ê–≤—Ç–æ—Ç–µ—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ${i + 1}`,
        use_profile_contacts: true,
        status: 'active',
        // Valid region/city resolved dynamically above (if available)
        ...(resolvedRegionId ? { region: resolvedRegionId as any } : {}),
        ...(resolvedCityId ? { city: resolvedCityId as any } : {}),
      };
      if ((formData as any).exchange_status === 'no') {
        (formData as any).exchange_status = 'no_exchange';
      }

      // Simple moderation-safe censoring for known false-positives (e.g., 'A-Class')
      const censor = (s?: string) => (s ? s.replace(/ass/gi, 'a**') : s);
      formData.title = censor(formData.title);
      formData.description = censor(formData.description as string);


      // –£–ë–ò–†–ê–ï–ú –í–°–ï –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∫–∞—Å–∫–∞–¥–∞
      console.log('[TestAds] üö´ NO OVERRIDES - Using reverse-cascade data as-is');
      console.log('[TestAds] üìä Generated data:', {
        vehicle_type: (formData as any).vehicle_type,
        vehicle_type_name: (formData as any).vehicle_type_name,
        brand: (formData as any).brand,
        brand_name: (formData as any).brand_name,
        model: (formData as any).model
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ payload –¥–ª—è backend
      console.log(`[TestAds] üîç BEFORE MAPPING - formData:`, {
        vehicle_type: (formData as any).vehicle_type,
        vehicle_type_name: (formData as any).vehicle_type_name,
        brand: (formData as any).brand,
        brand_name: (formData as any).brand_name,
        model: (formData as any).model
      });

      const apiPayload = mapFormDataToApiData(formData);

      console.log(`[TestAds] üîç AFTER MAPPING - apiPayload:`, {
        vehicle_type: (apiPayload as any).vehicle_type,
        vehicle_type_name: (apiPayload as any).vehicle_type_name,
        mark: (apiPayload as any).mark,
        model: (apiPayload as any).model
      });

      // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ vehicle_type –≤—ã—Ä–µ–∑–∞–ª—Å—è –º–∞–ø–ø–µ—Ä–æ–º ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ formData
      if ((apiPayload as any)?.vehicle_type === undefined && (formData as any)?.vehicle_type != null) {
        (apiPayload as any).vehicle_type = Number((formData as any).vehicle_type);
        console.log(`[TestAds] üîß RESTORED vehicle_type from formData: ${(apiPayload as any).vehicle_type}`);
      }
      // –£–ë–ò–†–ê–ï–ú –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê –¢–†–ê–ù–°–ü–û–†–¢–ê - –¥–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–º—É –∫–∞—Å–∫–∞–¥—É
      {
        const vtIdRaw = (apiPayload as any)?.vehicle_type;
        const vtId = typeof vtIdRaw === 'number' ? vtIdRaw : parseInt(String(vtIdRaw));
        console.log(`[TestAds] üö´ NO OVERRIDES - Vehicle type from reverse-cascade: ${vtId} (${(apiPayload as any)?.vehicle_type_name})`);

        // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ –ù–ï –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
        if (isNaN(vtId)) {
          throw new Error(`Invalid vehicle_type from reverse-cascade: ${vtIdRaw}`);
        }
      }

      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ vehicle_type_name —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤ dynamic_fields
      if ((apiPayload as any).dynamic_fields && (apiPayload as any).vehicle_type_name) {
        (apiPayload as any).dynamic_fields.vehicle_type_name = (apiPayload as any).vehicle_type_name;
      }

      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      console.log('[TestAds] ‚ñ∂ Final payload vehicle_type:', (apiPayload as any).vehicle_type, 'name:', (apiPayload as any).vehicle_type_name);
      console.log('[TestAds] ‚ñ∂ Dynamic fields vehicle_type_name:', (apiPayload as any).dynamic_fields?.vehicle_type_name);


      // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ –±—ç–∫–µ–Ω–¥—É
      console.log(`üåê Creating ad ${i + 1} through backend API...`);
      const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
      const response = await currentAuthFetch(`${backendUrl}/api/ads/cars/create`, {
        method: 'POST',
        body: JSON.stringify(apiPayload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API request failed: ${response.status} - ${errorText}`);
      }

      const createdAd = await response.json();
      console.log(`‚úÖ Created ad ${i + 1}: ${formData.title} (ID: ${createdAd.id})`);

      console.log(`[TestAds] üîç BACKEND RESPONSE - createdAd:`, {
        vehicle_type: createdAd.vehicle_type,
        vehicle_type_name: createdAd.vehicle_type_name,
        mark: createdAd.mark,
        model: createdAd.model,
        title: createdAd.title
      });

      // Optionally generate and save images using the new algorithm
      let savedCount = 0;
      let relevancyIssues: string[] = [];

      let debugInfo: any = undefined;

      if (includeImages) {
        try {
          console.log(`üé® [TestAds] Starting image generation for ad ${createdAd.id}...`);
          console.log(`üìä [TestAds] Image types requested:`, imageTypes);

          // Normalize values for relevancy
          // ‚ùå NORMALIZATION DISABLED: Use ONLY real vehicle_type_name
          const normalizeVehicleType = (raw?: any, rawName?: any): string => {
            console.log(`[TestAds] ‚úÖ Using REAL vehicle_type_name: '${rawName}' (no ID mapping)`);
            return rawName || 'car'; // Use real name or minimal fallback
            const map: Record<string, string> = {
              '–ª–µ–≥–∫–æ–≤–æ–π': 'car', '–ª–µ–≥–∫–æ–≤–∏–π': 'car', '–ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏': 'car', '–ª–µ–≥–∫–æ–≤—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ': 'car', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'car', 'auto': 'car', 'car': 'car',
              '–≥—Ä—É–∑–æ–≤–æ–π': 'truck', '–≥—Ä—É–∑–æ–≤–∏–∫': 'truck', '–≤–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞': 'truck', '–≥—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏': 'truck', '–≤–∞–Ω—Ç–∞–∂–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ': 'truck', 'truck': 'truck',
              '–º–æ—Ç–æ—Ü–∏–∫–ª': 'motorcycle', '–º–æ—Ç–æ—Ü–∏–∫–ª–∏': 'motorcycle', '—Å–∫—É—Ç–µ—Ä': 'motorcycle', 'motorcycle': 'motorcycle',
              '–∞–≤—Ç–æ–±—É—Å': 'bus', '–∞–≤—Ç–æ–±—É—Å–∏': 'bus', 'bus': 'bus',
              '—Ñ—É—Ä–≥–æ–Ω': 'van', '–º—ñ–Ω—ñ–≤–µ–Ω': 'van', '–º–∏–Ω–∏–≤—ç–Ω': 'van', 'van': 'van', 'minivan': 'van',
              '–ø—Ä–∏—Ü–µ–ø': 'trailer', '–ø–æ–ª—É–ø—Ä–∏—Ü–µ–ø': 'trailer', 'trailer': 'trailer'
            };
            if (map[s]) return map[s];
            if (map[name]) return map[name];
            return 'car';
          };
          let vt = normalizeVehicleType((formData as any).vehicle_type, (formData as any).vehicle_type_name);
          if (vt === 'trailer') vt = 'car';
          const preferredBrand = (formData as any)._preferred_brand_for_images;
          const brandStr = (typeof preferredBrand === 'string' && preferredBrand.trim())
            ? preferredBrand
            : ((typeof (formData as any).brand_name === 'string' && (formData as any).brand_name.trim())
                ? (formData as any).brand_name
                : (typeof (formData as any).brand === 'string' && isNaN(Number((formData as any).brand)) ? (formData as any).brand : ''));
          const modelStr = (typeof (formData as any).model_name === 'string' && (formData as any).model_name.trim())
            ? (formData as any).model_name
            : String(formData.model || '');
          const colorStr = (typeof (formData as any).color === 'string' && (formData as any).color.trim())
            ? (formData as any).color.toLowerCase()
            : String((formData as any).color_name || 'silver').toLowerCase();
          const bodyTypeStr = String(formData.body_type || (vt === 'truck' ? 'semi-truck' : vt === 'motorcycle' ? 'sport' : vt === 'bus' ? 'coach' : vt === 'van' ? 'van' : vt === 'trailer' ? 'curtainsider' : 'sedan')).toLowerCase();
          const conditionStr = String(formData.condition || 'good').toLowerCase();

          console.log(`üöó [TestAds] Car data for image generation:`, {
            brand: brandStr,
            model: modelStr,
            year: formData.year,
            color: colorStr,
            body_type: bodyTypeStr,
            vehicle_type: vt,
            vehicle_type_name: (formData as any).vehicle_type_name || vt
          });

          // Generate images via normalized frontend endpoint with debug for relevancy checks
          const imageProgress = 50 + Math.round((i / count) * 40); // 50-90% –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          onProgress?.(imageProgress, `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}/${count}...`);

          // Call backend directly to use pollinations-based mock algorithm and avoid frontend placeholders
          console.log(`üåê [TestAds] Calling image generation endpoint: ${backendUrl}/api/chat/generate-car-images-mock/`);
          const genResp = await fetch(`${backendUrl}/api/chat/generate-car-images-mock/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              car_data: {
                brand: brandStr,
                model: modelStr,
                year: formData.year,
                color: colorStr,
                body_type: bodyTypeStr,
                vehicle_type: vt,
                vehicle_type_name: (formData as any).vehicle_type_name || vt,
                condition: conditionStr,
                description: formData.description
              },
              angles: imageTypes,
              style: 'realistic',
              use_mock_algorithm: true
            })
          });

          console.log(`üì° [TestAds] Image generation response status: ${genResp.status}`);

          if (genResp.ok) {
            const genData = await genResp.json();
            console.log(`‚úÖ [TestAds] Image generation response:`, {
              success: genData.success,
              status: genData.status,
              imagesCount: genData.images?.length || 0,
              hasImages: Array.isArray(genData.images)
            });
            debugInfo = {
              canonical: genData?.debug?.canonical,
              prompts: genData?.debug?.prompts,
              angles: genData?.debug?.angles,
              style: genData?.debug?.style
            };
            // Relevancy/consistency checks using debug prompts
            try {
              const debugPrompts: string[] = (genData?.debug?.prompts as string[]) || [];
              const expected = {
                vt: String(vt || '').toLowerCase(),
                brand: String(brandStr || '').toLowerCase(),
                model: String(modelStr || '').toLowerCase(),
                color: String(colorStr || '').toLowerCase(),
                body: String(bodyTypeStr || '').toLowerCase(),
              };
              debugPrompts.forEach((p, i) => {
                const pl = String(p || '').toLowerCase();
                const miss: string[] = [];
                if (expected.vt && !pl.includes(expected.vt)) miss.push(`type!=${expected.vt}`);
                if (expected.brand && !pl.includes(expected.brand)) miss.push(`brand!=${expected.brand}`);
                if (expected.model && expected.model.length > 0 && !pl.includes(expected.model)) miss.push(`model!=${expected.model}`);
                if (miss.length) relevancyIssues.push(`angle#${i + 1}: ${miss.join(',')}`);
              });
              if (relevancyIssues.length) {
                console.warn(`‚ö†Ô∏è Relevancy issues for ad ${createdAd.id}:`, relevancyIssues);
              }
            } catch (e) {
              console.warn('‚ö†Ô∏è Relevancy check failed (no debug prompts available)');
            }

            if ((genData.success || genData.status === 'ok') && Array.isArray(genData.images)) {
              console.log(`üì∏ [TestAds] Processing ${genData.images.length} generated images...`);

              for (let idx = 0; idx < genData.images.length; idx++) {
                const img = genData.images[idx];
                const url = String(img?.url || '').trim();

                console.log(`üîç [TestAds] Image ${idx + 1}/${genData.images.length}:`, {
                  url: url.substring(0, 100) + '...',
                  angle: img?.angle,
                  title: img?.title,
                  isValid: !(!url || !/^https?:\/\//i.test(url) || url.includes('via.placeholder.com'))
                });

                if (!url || !/^https?:\/\//i.test(url) || url.includes('via.placeholder.com')) {
                  console.warn(`‚ö†Ô∏è [TestAds] Skipping invalid/empty image URL for ad ${createdAd.id} at index ${idx}:`, {
                    url: url || 'EMPTY',
                    reason: !url ? 'empty' : (!/^https?:\/\//i.test(url) ? 'not http/https' : 'placeholder')
                  });
                  continue;
                }

                try {
                  console.log(`üíæ [TestAds] Saving image ${idx + 1} to ad ${createdAd.id}...`);
                  const saveResp = await currentAuthFetch(`${backendUrl}/api/ads/${createdAd.id}/images`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      image_url: url,
                      caption: img.title || '',
                      is_primary: idx === 0,
                      order: idx + 1
                    })
                  });

                  if (saveResp.ok) {
                    savedCount++;
                    totalImages++;
                    console.log(`‚úÖ [TestAds] Successfully saved image ${idx + 1} for ad ${createdAd.id} (total: ${savedCount})`);
                  } else {
                    const errorText = await saveResp.text();
                    console.error(`‚ùå [TestAds] Failed to save image ${idx + 1} for ad ${createdAd.id}:`, {
                      status: saveResp.status,
                      error: errorText
                    });
                  }
                } catch (saveErr) {
                  console.error(`‚ùå [TestAds] Error saving image ${idx + 1} for ad ${createdAd.id}:`, saveErr);
                }
              }

              console.log(`üìä [TestAds] Image saving complete for ad ${createdAd.id}: ${savedCount}/${genData.images.length} saved`);
            } else {
              console.error(`‚ùå [TestAds] Image generation returned no images or invalid response:`, {
                success: genData.success,
                status: genData.status,
                hasImages: Array.isArray(genData.images),
                imagesCount: genData.images?.length || 0
              });
            }
          } else {
            const errorText = await genResp.text();
            console.error(`‚ùå [TestAds] Image generation failed:`, {
              status: genResp.status,
              error: errorText
            });
          }
        } catch (imgErr) {
          console.error(`‚ùå [TestAds] Image generation flow error:`, imgErr);
        }
      }

      console.log(`‚úÖ [TestAds] Ad ${i + 1} created successfully:`, {
        id: createdAd.id,
        title: formData.title,
        imagesCount: savedCount
      });

      results.push({
        success: true,
        title: formData.title,
        id: createdAd.id,
        user: 'current-session',
        imagesCount: savedCount,
        relevancyIssues,
        debug: debugInfo
      });

    } catch (error: any) {
      console.error(`‚ùå [TestAds] Error creating ad ${i + 1}:`, error);
      results.push({
        success: false,
        error: error.message,
        title: `Ad ${i + 1}`,
        imagesCount: 0
      });
    }
  }

  const created = results.filter(r => r.success).length;
  const totalAdsWithImages = results.filter(r => r.success && r.imagesCount > 0).length;

  console.log(`üéâ [TestAds] Generation complete:`, {
    totalRequested: count,
    created,
    totalImages,
    adsWithImages: totalAdsWithImages,
    adsWithoutImages: created - totalAdsWithImages
  });

  onProgress?.(100, `–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ ${created} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å ${totalImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
  return { created, totalImages, details: results };
}

// –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞
async function loginAsUserServer(email: string): Promise<string | null> {
  try {
    console.log(`üîê Server login as ${email}...`);

    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
    const loginResponse = await fetch(`${backendUrl}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        password: '12345678'
      })
    });

    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.error(`‚ùå Server login failed for ${email}: ${loginResponse.status} - ${errorText}`);
      return null;
    }

    const loginData = await loginResponse.json();
    const accessToken = loginData.access || loginData.token;

    if (!accessToken) {
      console.error(`‚ùå No access token received for ${email}`);
      return null;
    }

    console.log(`‚úÖ Server login successful for ${email}`);
    return accessToken;

  } catch (error) {
    console.error(`‚ùå Server login error for ${email}:`, error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è
function generateRandomCarData(index: number) {
  const brands = ['BMW', 'Mercedes-Benz', 'Toyota', 'Audi', 'Volkswagen', 'Honda', 'Ford', 'Nissan'];
  const models = ['X5', 'C-Class', 'Camry', 'A4', 'Golf', 'Civic', 'Focus', 'Altima'];
  const colors = ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–µ—Ä—ã–π', '–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π'];
  const bodyTypes = ['sedan', 'hatchback', 'suv', 'wagon', 'coupe'];
  const vehicleTypes = ['car', 'car', 'car', 'car', 'truck', 'motorcycle']; // –ë–æ–ª—å—à–µ –ª–µ–≥–∫–æ–≤—ã—Ö

  const brand = brands[Math.floor(Math.random() * brands.length)];
  const model = models[Math.floor(Math.random() * models.length)];
  const color = colors[Math.floor(Math.random() * colors.length)];
  const bodyType = bodyTypes[Math.floor(Math.random() * bodyTypes.length)];
  const vehicleType = vehicleTypes[Math.floor(Math.random() * vehicleTypes.length)];
  const year = 2015 + Math.floor(Math.random() * 9); // 2015-2023
  const price = 10000 + Math.floor(Math.random() * 40000); // 10k-50k

  return {
    title: `${brand} ${model} ${year} - Test Ad ${index}`,
    description: `–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${index}. ${brand} ${model} ${year} –≥–æ–¥–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.`,
    brand: brand,
    model: model,
    year: year,
    price: price,
    currency: 'UAH',
    color: color,
    body_type: bodyType,
    vehicle_type: vehicleType,
    vehicle_type_name: vehicleType,
    condition: 'used',
    mileage: Math.floor(Math.random() * 200000),
    engine_volume: 2.0 + Math.random() * 2, // 2.0-4.0L
    fuel_type: 'gasoline',
    transmission: Math.random() > 0.5 ? 'automatic' : 'manual',
    drive_type: 'front',
    seller_type: 'private',
    // Normalize exchange status to valid serializer choices
    exchange_status: 'no_exchange',
    // Use numeric PKs for region and city (fallback IDs)
    region: 203,
    city: 1142
  };
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();

  try {
    console.log('üéØ API ENDPOINT: Starting test ads generation...');

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ + fallback –Ω–∞ querystring
    let body: any = {};
    try {
      body = await request.json();
      console.log('üìã API ENDPOINT: Request body:', body);
    } catch {
      console.log('‚ö†Ô∏è API ENDPOINT: No JSON body or invalid JSON, using defaults');
      body = {};
    }

    const qs = request.nextUrl?.searchParams;
    const parseBool = (v?: string | null) => (v ? /^(1|true|yes)$/i.test(v) : undefined);
    const parseArray = (v?: string | null) => {
      if (!v) return undefined;
      try { const arr = JSON.parse(v as any); if (Array.isArray(arr)) return arr; } catch {}
      return v.split(',').map(s => s.trim()).filter(Boolean);
    };

    let count = (body as any).count;
    if ((typeof count !== 'number' || isNaN(count)) && qs?.get('count')) {
      const n = parseInt(String(qs.get('count')));
      if (!isNaN(n)) count = n;
    }

    let includeImages = (body as any).includeImages;
    if (typeof includeImages !== 'boolean' && qs?.get('includeImages') != null) {
      const b = parseBool(qs.get('includeImages'));
      if (typeof b === 'boolean') includeImages = b;
    }

    let imageTypes = (body as any).imageTypes;
    if (!Array.isArray(imageTypes) && qs?.get('imageTypes')) {
      const arr = parseArray(qs.get('imageTypes'));
      if (arr) imageTypes = arr;
    }

    if (typeof count !== 'number' || isNaN(count)) count = 1;
    if (typeof includeImages !== 'boolean') includeImages = true;
    if (!Array.isArray(imageTypes) || imageTypes.length === 0) imageTypes = ['front', 'side'];

    const maxCount = Math.min(count, 50); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 50 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    console.log(`üé≤ Generating ${maxCount} test ads${includeImages ? ' with images' : ''}...`);

    if (includeImages && imageTypes.length === 0) {
      throw new Error('Image types must be specified when includeImages is true');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–∞—è)
    const shouldUseAsync = includeImages || maxCount > 5;

    if (shouldUseAsync) {
      console.log('üöÄ Using async generation for large request...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Celery
      try {
        const asyncResponse = await fetch('/api/autoria/async/generate-test-ads', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            count: maxCount,
            include_images: includeImages,
            image_types: imageTypes
          })
        });

        if (!asyncResponse.ok) {
          throw new Error(`Async API failed: ${asyncResponse.status}`);
        }

        const asyncResult = await asyncResponse.json();

        return NextResponse.json({
          success: true,
          async: true,
          task_id: asyncResult.task_id,
          message: `–ó–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${maxCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`,
          status_url: asyncResult.status_url,
          estimated_time: asyncResult.estimated_time,
          polling_interval: 2000
        });

      } catch (asyncError) {
        console.warn('‚ö†Ô∏è Async generation failed, falling back to sync:', asyncError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–∫ fallback
      }
    }

    console.log('üì∏ Selected image types:', imageTypes);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    console.log('üöÄ Calling server-side test ads creation...');

    // Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket)
    const progressCallback = (progress: number, message: string) => {
      console.log(`üìä Progress: ${progress}% - ${message}`);
    };

    const result = await createTestAdsServer(request, maxCount, includeImages, imageTypes, progressCallback);
    console.log('üìä [TestAds] Server test ads result:', result);

    const duration = `${((Date.now() - startTime) / 1000).toFixed(1)}s`;
    const adsWithImages = result.details?.filter((d: any) => d.success && d.imagesCount > 0).length || 0;
    const adsWithoutImages = result.created - adsWithImages;

    console.log(`‚úÖ [TestAds] Successfully generated ${result.created} test ads in ${duration}:`, {
      totalAds: result.created,
      totalImages: result.totalImages,
      adsWithImages,
      adsWithoutImages
    });

    return NextResponse.json({
      success: true,
      count: result.created,
      totalImages: result.totalImages || 0,
      adsWithImages,
      adsWithoutImages,
      duration: duration,
      message: `Successfully created ${result.created} test ads${includeImages ? ` with ${result.totalImages} images` : ''}`,
      details: result.details
    });
  } catch (error) {
    console.error('‚ùå API ENDPOINT: Error:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Test ads generation failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
