import { NextRequest, NextResponse } from 'next/server';

/**
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π AutoRia —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
 */
export async function GET(request: NextRequest) {
  try {
    console.log('[AutoRia Users API] üë• Getting AutoRia users...');

    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π endpoint (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    const usersResponse = await fetch(`${backendUrl}/api/users/public/list/`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!usersResponse.ok) {
      const errorText = await usersResponse.text();
      console.error('[AutoRia Users API] ‚ùå Backend error:', {
        status: usersResponse.status,
        statusText: usersResponse.statusText,
        error: errorText
      });

      return NextResponse.json({
        success: false,
        error: `Backend error: ${usersResponse.status} - ${usersResponse.statusText}`,
        details: errorText,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
      }, { status: usersResponse.status });
    }

    const usersData = await usersResponse.json();
    console.log('[AutoRia Users API] ‚úÖ Got users from backend:', usersData.count || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (!usersData || (!usersData.results && !Array.isArray(usersData))) {
      console.error('[AutoRia Users API] ‚ùå Invalid data structure from backend:', usersData);
      return NextResponse.json({
        success: false,
        error: 'Invalid data structure from backend',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±—ç–∫–µ–Ω–¥–∞'
      }, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞)
    const allUsers = usersData.results || usersData || [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const activeUsers = allUsers.filter((user: any) => user.is_active);

    console.log('[AutoRia Users API] ‚úÖ Processed users:', {
      total: allUsers.length,
      active: activeUsers.length,
      sample: activeUsers.slice(0, 3).map((u: any) => ({ id: u.id, email: u.email, is_superuser: u.is_superuser }))
    });

    return NextResponse.json({
      success: true,
      data: {
        results: activeUsers,
        count: activeUsers.length
      },
      source: 'backend',
      message: `–ü–æ–ª—É—á–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`
    });

  } catch (error) {
    console.error('[AutoRia Users API] ‚ùå Error:', error);

    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    }, { status: 500 });
  }
}

