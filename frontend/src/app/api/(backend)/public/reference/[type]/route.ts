import { NextRequest, NextResponse } from 'next/server';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö reference –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ Django backend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ Next.js ‚Üí Django endpoints
// –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è —Ñ–æ—Ä–º (choices)
const TYPE_MAPPING: Record<string, string> = {
  'vehicle-types': 'vehicle-types/choices',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º choices endpoint
  'brands': 'marks/choices',  // Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'marks' –≤–º–µ—Å—Ç–æ 'brands', –∏—Å–ø–æ–ª—å–∑—É–µ–º choices
  'models': 'models/choices',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º choices endpoint –¥–ª—è —Ñ–æ—Ä–º
  'regions': 'regions',
  'cities': 'cities',
  'colors': 'colors/choices',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º choices endpoint
  'fuel-types': 'fuel-types',
  'transmissions': 'transmissions',
  'body-types': 'body-types',
};

export async function GET(request: NextRequest, { params }: { params: Promise<{ type: string }> }) {
  try {
    const { type } = await params;
    const { searchParams } = new URL(request.url);

    console.log(`üìã PUBLIC REFERENCE API: GET request for type: ${type}`);

    // –ü–æ–ª—É—á–∞–µ–º Django endpoint
    const djangoType = TYPE_MAPPING[type];
    if (!djangoType) {
      console.warn(`‚ö†Ô∏è PUBLIC REFERENCE API: Unknown type: ${type}`);
      return NextResponse.json(
        { error: 'Unknown reference type', success: false },
        { status: 400 }
      );
    }

    // –°—Ç—Ä–æ–∏–º URL –¥–ª—è Django backend
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
    const queryString = searchParams.toString();
    // Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /api/ads/reference/ –≤–º–µ—Å—Ç–æ /api/public/reference/
    const djangoUrl = `${backendUrl}/api/ads/reference/${djangoType}/${queryString ? `?${queryString}` : ''}`;

    console.log(`üîó PUBLIC REFERENCE API: Proxying to Django: ${djangoUrl}`);

    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Django
    const response = await fetch(djangoUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      console.error(`‚ùå PUBLIC REFERENCE API: Django returned ${response.status}`);
      const errorText = await response.text();
      console.error(`‚ùå Django error: ${errorText}`);
      return NextResponse.json(
        { error: 'Backend error', success: false, details: errorText },
        { status: response.status }
      );
    }

    const data = await response.json();

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç {value, label} –¥–ª—è VirtualSelect
    let options: any[] = [];
    let rawData: any[] = [];

    // Choices endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ {results: [...]}
    const isChoicesEndpoint = djangoType.includes('/choices');

    if (isChoicesEndpoint && Array.isArray(data)) {
      // Choices endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é: [{id, name, mark}, ...]
      rawData = data;
      options = data.map((item: any) => ({
        value: String(item.id),
        label: item.name,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–≤—è–∑–µ–π
        // Choices endpoints –∏—Å–ø–æ–ª—å–∑—É—é—Ç 'mark' –≤–º–µ—Å—Ç–æ 'mark_id', 'vehicle_type' –≤–º–µ—Å—Ç–æ 'vehicle_type_id'
        ...(item.vehicle_type && { vehicle_type_id: item.vehicle_type }),
        ...(item.mark && { brand_id: item.mark }),
        ...(item.region && { region_id: item.region }),
      }));
    } else if (data.results && Array.isArray(data.results)) {
      // –û–±—ã—á–Ω—ã–µ endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç {results: [...], count, next, previous}
      rawData = data.results;
      options = data.results.map((item: any) => ({
        value: String(item.id),
        label: item.name,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–≤—è–∑–µ–π
        // Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç vehicle_type –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        ...(item.vehicle_type && { vehicle_type_id: item.vehicle_type }),
        ...(item.vehicle_type_id && { vehicle_type_id: item.vehicle_type_id }),
        // Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç mark –¥–ª—è –º–∞—Ä–æ–∫ (brands)
        ...(item.mark && { brand_id: item.mark }),
        ...(item.mark_id && { brand_id: item.mark_id }),
        ...(item.brand_id && { brand_id: item.brand_id }),
        // –†–µ–≥–∏–æ–Ω—ã
        ...(item.region && { region_id: item.region }),
        ...(item.region_id && { region_id: item.region_id }),
      }));
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const responseData = {
      success: true,
      data: rawData,
      options: options,
      pagination: isChoicesEndpoint ? {
        // Choices endpoints –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é - –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        count: rawData.length,
        page: 1,
        page_size: rawData.length,
        total_pages: 1,
        has_next: false,
        has_previous: false,
        next: null,
        previous: null,
      } : {
        count: data.count || 0,
        page: parseInt(searchParams.get('page') || '1'),
        page_size: parseInt(searchParams.get('page_size') || '20'),
        total_pages: Math.ceil((data.count || 0) / parseInt(searchParams.get('page_size') || '20')),
        has_next: !!data.next,
        has_previous: !!data.previous,
        next: data.next,
        previous: data.previous,
      }
    };

    console.log(`‚úÖ PUBLIC REFERENCE API: Returning ${options.length} items (${rawData.length} options) for type: ${type}`);

    return NextResponse.json(responseData);



  } catch (error) {
    console.error('‚ùå PUBLIC REFERENCE API: Error:', error);

    return NextResponse.json(
      {
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}