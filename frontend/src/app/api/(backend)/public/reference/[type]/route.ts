import { NextRequest, NextResponse } from 'next/server';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö reference –¥–∞–Ω–Ω—ã—Ö
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ reference –¥–∞–Ω–Ω—ã—Ö
 */

export async function GET(request: NextRequest, { params }: { params: Promise<{ type: string }> }) {
  try {
    const { type } = await params;
    const { searchParams } = new URL(request.url);

    console.log(`üìã PUBLIC REFERENCE API: GET request for type: ${type}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(searchParams.get('page') || '1');
    const pageSize = parseInt(searchParams.get('page_size') || '20');

    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    let data: any[] = [];
    let totalCount = 0;

    switch (type) {
      case 'vehicle-types':
        data = [
          { id: 1, name: '–õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', code: 'car' },
          { id: 2, name: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫', code: 'suv' },
          { id: 3, name: '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å', code: 'minivan' },
          { id: 4, name: '–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', code: 'truck' },
          { id: 5, name: '–ú–æ—Ç–æ—Ü–∏–∫–ª', code: 'motorcycle' },
          { id: 6, name: '–ê–≤—Ç–æ–±—É—Å', code: 'bus' },
          { id: 7, name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', code: 'special' }
        ];
        totalCount = 7;
        break;

      case 'regions':
        data = [
          { id: 1, name: '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'kyiv_region' },
          { id: 2, name: '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'odesa_region' },
          { id: 3, name: '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'lviv_region' },
          { id: 4, name: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'kharkiv_region' },
          { id: 5, name: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'dnipro_region' },
          { id: 6, name: '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'zaporizhzhia_region' },
          { id: 7, name: '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'vinnytsia_region' },
          { id: 8, name: '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'poltava_region' },
          { id: 9, name: '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'cherkasy_region' },
          { id: 10, name: '–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', code: 'sumy_region' }
        ];
        totalCount = 25;
        break;

      case 'colors':
        data = [
          { id: 1, name: '–ë–µ–ª—ã–π', code: 'white', hex: '#FFFFFF' },
          { id: 2, name: '–ß–µ—Ä–Ω—ã–π', code: 'black', hex: '#000000' },
          { id: 3, name: '–°–µ—Ä—ã–π', code: 'gray', hex: '#808080' },
          { id: 4, name: '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π', code: 'silver', hex: '#C0C0C0' },
          { id: 5, name: '–ö—Ä–∞—Å–Ω—ã–π', code: 'red', hex: '#FF0000' },
          { id: 6, name: '–°–∏–Ω–∏–π', code: 'blue', hex: '#0000FF' },
          { id: 7, name: '–ó–µ–ª–µ–Ω—ã–π', code: 'green', hex: '#008000' },
          { id: 8, name: '–ñ–µ–ª—Ç—ã–π', code: 'yellow', hex: '#FFFF00' },
          { id: 9, name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', code: 'orange', hex: '#FFA500' },
          { id: 10, name: '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', code: 'brown', hex: '#A52A2A' },
          { id: 11, name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', code: 'purple', hex: '#800080' },
          { id: 12, name: '–ë–µ–∂–µ–≤—ã–π', code: 'beige', hex: '#F5F5DC' },
          { id: 13, name: '–ë–æ—Ä–¥–æ–≤—ã–π', code: 'burgundy', hex: '#800020' },
          { id: 14, name: '–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π', code: 'gold', hex: '#FFD700' },
          { id: 15, name: '–ë—Ä–æ–Ω–∑–æ–≤—ã–π', code: 'bronze', hex: '#CD7F32' }
        ];
        totalCount = 15;
        break;

      case 'cities':
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        const cityRegionId = searchParams.get('region_id');
        const allCities = [
          // –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 1, name: '–ö–∏—ó–≤', code: 'kyiv', region_id: 1 },
          { id: 2, name: '–ë—Ä–æ–≤–∞—Ä–∏', code: 'brovary', region_id: 1 },
          { id: 3, name: '–ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞', code: 'bila_tserkva', region_id: 1 },
          // –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 4, name: '–û–¥–µ—Å–∞', code: 'odesa', region_id: 2 },
          { id: 5, name: '–Ü–∑–º–∞—ó–ª', code: 'izmail', region_id: 2 },
          // –õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 6, name: '–õ—å–≤—ñ–≤', code: 'lviv', region_id: 3 },
          { id: 7, name: '–î—Ä–æ–≥–æ–±–∏—á', code: 'drohobych', region_id: 3 },
          // –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 8, name: '–•–∞—Ä–∫—ñ–≤', code: 'kharkiv', region_id: 4 },
          { id: 9, name: '–õ–æ–∑–æ–≤–∞', code: 'lozova', region_id: 4 },
          // –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 10, name: '–î–Ω—ñ–ø—Ä–æ', code: 'dnipro', region_id: 5 },
          { id: 11, name: '–ö—Ä–∏–≤–∏–π –†—ñ–≥', code: 'kryvyi_rih', region_id: 5 },
          // –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 12, name: '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', code: 'zaporizhzhia', region_id: 6 },
          { id: 13, name: '–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å', code: 'melitopol', region_id: 6 },
          // –í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 14, name: '–í—ñ–Ω–Ω–∏—Ü—è', code: 'vinnytsia', region_id: 7 },
          { id: 15, name: '–•–º—ñ–ª—å–Ω–∏–∫', code: 'khmilnyk', region_id: 7 },
          // –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 16, name: '–ü–æ–ª—Ç–∞–≤–∞', code: 'poltava', region_id: 8 },
          { id: 17, name: '–ö—Ä–µ–º–µ–Ω—á—É–∫', code: 'kremenchuk', region_id: 8 },
          // –ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 18, name: '–ß–µ—Ä–∫–∞—Å–∏', code: 'cherkasy', region_id: 9 },
          { id: 19, name: '–£–º–∞–Ω—å', code: 'uman', region_id: 9 },
          // –°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
          { id: 20, name: '–°—É–º–∏', code: 'sumy', region_id: 10 },
          { id: 21, name: '–ö–æ–Ω–æ—Ç–æ–ø', code: 'konotop', region_id: 10 }
        ];

        if (cityRegionId) {
          data = allCities.filter(city => String(city.region_id) === cityRegionId);
        } else {
          data = allCities;
        }
        totalCount = data.length;
        break;

      case 'brands':
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        const vehicleTypeId = searchParams.get('vehicle_type_id');
        data = [
          { id: 1, name: 'BMW', code: 'bmw', country: 'Germany', vehicle_type_id: 1 },
          { id: 2, name: 'Mercedes-Benz', code: 'mercedes', country: 'Germany', vehicle_type_id: 1 },
          { id: 3, name: 'Audi', code: 'audi', country: 'Germany', vehicle_type_id: 1 },
          { id: 4, name: 'Volkswagen', code: 'volkswagen', country: 'Germany', vehicle_type_id: 1 },
          { id: 5, name: 'Toyota', code: 'toyota', country: 'Japan', vehicle_type_id: 1 },
          { id: 6, name: 'Honda', code: 'honda', country: 'Japan', vehicle_type_id: 1 },
          { id: 7, name: 'Nissan', code: 'nissan', country: 'Japan', vehicle_type_id: 1 },
          { id: 8, name: 'Ford', code: 'ford', country: 'USA', vehicle_type_id: 1 },
          { id: 9, name: 'Chevrolet', code: 'chevrolet', country: 'USA', vehicle_type_id: 1 },
          { id: 10, name: 'Hyundai', code: 'hyundai', country: 'South Korea', vehicle_type_id: 1 },
          { id: 11, name: 'Kia', code: 'kia', country: 'South Korea', vehicle_type_id: 1 },
          { id: 12, name: 'Renault', code: 'renault', country: 'France', vehicle_type_id: 1 },
          { id: 13, name: 'Peugeot', code: 'peugeot', country: 'France', vehicle_type_id: 1 },
          { id: 14, name: 'Fiat', code: 'fiat', country: 'Italy', vehicle_type_id: 1 },
          { id: 15, name: 'Alfa Romeo', code: 'alfa_romeo', country: 'Italy', vehicle_type_id: 1 }
        ];
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (vehicleTypeId) {
          data = data.filter(item => String(item.vehicle_type_id) === vehicleTypeId);
        }
        totalCount = data.length;
        break;

      case 'models':
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        const brandId = searchParams.get('brand_id');
        if (!brandId) {
          data = [];
          totalCount = 0;
        } else {
          // –ú–æ–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫
          const allModels = [
            // BMW models
            { id: 1, name: 'X5', code: 'x5', brand_id: 1 },
            { id: 2, name: 'X3', code: 'x3', brand_id: 1 },
            { id: 3, name: '3 Series', code: '3_series', brand_id: 1 },
            { id: 4, name: '5 Series', code: '5_series', brand_id: 1 },
            // Mercedes models
            { id: 5, name: 'C-Class', code: 'c_class', brand_id: 2 },
            { id: 6, name: 'E-Class', code: 'e_class', brand_id: 2 },
            { id: 7, name: 'GLE', code: 'gle', brand_id: 2 },
            // Audi models
            { id: 8, name: 'A4', code: 'a4', brand_id: 3 },
            { id: 9, name: 'A6', code: 'a6', brand_id: 3 },
            { id: 10, name: 'Q5', code: 'q5', brand_id: 3 },
            // Toyota models
            { id: 11, name: 'Camry', code: 'camry', brand_id: 5 },
            { id: 12, name: 'Corolla', code: 'corolla', brand_id: 5 },
            { id: 13, name: 'RAV4', code: 'rav4', brand_id: 5 },
          ];
          data = allModels.filter(model => String(model.brand_id) === brandId);
          totalCount = data.length;
        }
        break;

      case 'fuel-types':
        data = [
          { id: 1, name: '–ë–µ–Ω–∑–∏–Ω', code: 'gasoline' },
          { id: 2, name: '–î–∏–∑–µ–ª—å', code: 'diesel' },
          { id: 3, name: '–ì–∞–∑', code: 'gas' },
          { id: 4, name: '–≠–ª–µ–∫—Ç—Ä–æ', code: 'electric' },
          { id: 5, name: '–ì–∏–±—Ä–∏–¥', code: 'hybrid' },
          { id: 6, name: '–ì–∞–∑/–ë–µ–Ω–∑–∏–Ω', code: 'gas_gasoline' }
        ];
        totalCount = 6;
        break;

      case 'transmissions':
        data = [
          { id: 1, name: '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è', code: 'manual' },
          { id: 2, name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è', code: 'automatic' },
          { id: 3, name: '–†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', code: 'robotized' },
          { id: 4, name: '–í–∞—Ä–∏–∞—Ç–æ—Ä', code: 'cvt' }
        ];
        totalCount = 4;
        break;

      case 'body-types':
        data = [
          { id: 1, name: '–°–µ–¥–∞–Ω', code: 'sedan' },
          { id: 2, name: '–•—ç—Ç—á–±–µ–∫', code: 'hatchback' },
          { id: 3, name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª', code: 'wagon' },
          { id: 4, name: '–ö—É–ø–µ', code: 'coupe' },
          { id: 5, name: '–ö–∞–±—Ä–∏–æ–ª–µ—Ç', code: 'convertible' },
          { id: 6, name: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫', code: 'suv' },
          { id: 7, name: '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä', code: 'crossover' },
          { id: 8, name: '–ú–∏–Ω–∏–≤—ç–Ω', code: 'minivan' },
          { id: 9, name: '–ü–∏–∫–∞–ø', code: 'pickup' }
        ];
        totalCount = 9;
        break;

      default:
        console.warn(`‚ö†Ô∏è PUBLIC REFERENCE API: Unknown type: ${type}`);
        data = [];
        totalCount = 0;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const startIndex = (page - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const paginatedData = data.slice(startIndex, endIndex);

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç {value, label} –¥–ª—è VirtualSelect
    const options = paginatedData.map(item => ({
      value: String(item.id),
      label: item.name
    }));

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DRF —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º options
    const response = {
      success: true,
      data: paginatedData,
      options: options, // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è VirtualSelect
      pagination: {
        count: totalCount,
        page: page,
        page_size: pageSize,
        total_pages: Math.ceil(totalCount / pageSize),
        has_next: endIndex < totalCount,
        has_previous: page > 1,
        next: page < Math.ceil(totalCount / pageSize) ? page + 1 : null,
        previous: page > 1 ? page - 1 : null
      }
    };

    console.log(`‚úÖ PUBLIC REFERENCE API: Returning ${paginatedData.length} items (${options.length} options) for type: ${type}`);

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå PUBLIC REFERENCE API: Error:', error);

    return NextResponse.json(
      {
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}