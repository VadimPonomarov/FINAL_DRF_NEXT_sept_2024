import { NextRequest, NextResponse } from 'next/server';
import { fetchData } from '@/app/api/(helpers)/common';

interface RouteParams {
  params: {
    adId: string;
    action: string;
  };
}

export async function POST(request: NextRequest, { params }: RouteParams) {
  try {
    const { adId, action } = params;
    
    console.log(`[Moderation ${action.toUpperCase()} API] üì§ Processing ad ${adId}...`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    const validActions = ['approve', 'reject', 'review', 'block', 'activate'];
    if (!validActions.includes(action)) {
      return NextResponse.json({
        success: false,
        error: 'Invalid action',
        message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json().catch(() => ({}));
    const reason = body.reason || '';
    const moderatorNotes = body.moderator_notes || '';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω—É
    if ((action === 'reject' || action === 'block') && !reason) {
      const actionMessages = {
        reject: '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è',
        block: '–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏'
      };
      return NextResponse.json({
        success: false,
        error: 'Reason required',
        message: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É ${actionMessages[action as keyof typeof actionMessages]}`
      }, { status: 400 });
    }

    console.log(`[Moderation ${action.toUpperCase()} API] üîÑ Sending to backend:`, {
      endpoint: `api/ads/cars/moderation/${adId}/${action}`,
      reason,
      moderatorNotes
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend
    const result = await fetchData(`api/ads/cars/moderation/${adId}/${action}`, {
      method: 'POST',
      body: {
        reason,
        moderator_notes: moderatorNotes
      },
      redirectOnError: false
    });

    if (!result) {
      console.log(`[Moderation ${action.toUpperCase()} API] ‚ùå No result from backend`);
      return NextResponse.json({
        success: false,
        error: 'Backend error',
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
      }, { status: 500 });
    }

    console.log(`[Moderation ${action.toUpperCase()} API] ‚úÖ Action completed successfully`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      message: result.message || `–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${getActionMessage(action)}`,
      data: result.ad || result
    });

  } catch (error: any) {
    console.error(`[Moderation ${params.action.toUpperCase()} API] ‚ùå Error:`, error);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –æ—Ç backend
    if (error.response) {
      const errorData = error.response.data;
      
      if (error.response.status === 401) {
        return NextResponse.json({
          success: false,
          error: 'Authentication required',
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
        }, { status: 401 });
      }
      
      if (error.response.status === 403) {
        return NextResponse.json({
          success: false,
          error: 'Access denied',
          message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        }, { status: 403 });
      }

      if (error.response.status === 404) {
        return NextResponse.json({
          success: false,
          error: 'Ad not found',
          message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        }, { status: 404 });
      }
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return NextResponse.json({
      success: false,
      error: error.message || 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}

function getActionMessage(action: string): string {
  switch (action) {
    case 'approve':
      return '–æ–¥–æ–±—Ä–µ–Ω–æ';
    case 'reject':
      return '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
    case 'review':
      return '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É';
    default:
      return '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ';
  }
}
