import { NextRequest, NextResponse } from 'next/server';
import { fetchData } from '@/app/api/(helpers)/common';

export async function GET(request: NextRequest) {
  try {
    console.log('[Moderation Statistics API] üìä Getting moderation statistics...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const result = await fetchData('api/ads/cars/moderation/statistics', {
      redirectOnError: false
    });

    if (!result) {
      console.log('[Moderation Statistics API] ‚ùå No statistics from backend');
      return NextResponse.json({
        success: false,
        error: 'No statistics available',
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      }, { status: 404 });
    }

    console.log('[Moderation Statistics API] ‚úÖ Statistics fetched successfully:', result);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return NextResponse.json({
      success: true,
      data: {
        total_ads: result.total_ads || 0,
        pending_moderation: result.pending_moderation || 0,
        needs_review: result.needs_review || 0,
        rejected: result.rejected || 0,
        active: result.active || 0,
        today_moderated: result.today_moderated || 0
      }
    });

  } catch (error: any) {
    console.error('[Moderation Statistics API] ‚ùå Error fetching statistics:', error);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –æ—Ç backend
    if (error.response) {
      const errorData = error.response.data;
      
      if (error.response.status === 401) {
        return NextResponse.json({
          success: false,
          error: 'Authentication required',
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
        }, { status: 401 });
      }
      
      if (error.response.status === 403) {
        return NextResponse.json({
          success: false,
          error: 'Access denied',
          message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        }, { status: 403 });
      }
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return NextResponse.json({
      success: false,
      error: error.message || 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}
