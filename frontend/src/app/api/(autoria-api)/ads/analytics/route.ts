import { NextRequest, NextResponse } from 'next/server';
import { fetchData } from '@/app/api/(helpers)/common';

export async function GET(request: NextRequest) {
  try {
    console.log('[Analytics API] üìä Getting ad analytics...');

    const { searchParams } = new URL(request.url);
    const adId = searchParams.get('ad_id');

    if (!adId) {
      return NextResponse.json({
        success: false,
        error: 'Ad ID is required'
      }, { status: 400 });
    }

    console.log('[Analytics API] üîÑ Fetching analytics for ad:', adId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const result = await fetchData(`api/ads/cars/${adId}/analytics`, {
      redirectOnError: false
    });

    if (!result) {
      console.log('[Analytics API] ‚ùå No analytics data from backend');
      return NextResponse.json({
        success: false,
        error: 'No analytics available',
        message: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'
      }, { status: 404 });
    }

    console.log('[Analytics API] ‚úÖ Analytics fetched successfully:', {
      adId,
      hasViews: !!result.views,
      hasPricing: !!result.pricing,
      isPremium: result.is_premium
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return NextResponse.json({
      success: true,
      data: {
        ad_id: parseInt(adId),
        title: result.title || '–û–±—ä—è–≤–ª–µ–Ω–∏–µ',
        is_premium: result.is_premium || false,
        views: result.views || null,
        pricing: result.pricing || null,
        recommendations: result.recommendations || [],
        message: result.message || null,
        last_updated: result.last_updated || new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('[Analytics API] ‚ùå Error fetching analytics:', error);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –æ—Ç backend
    if (error.response) {
      const errorData = error.response.data;
      
      if (error.response.status === 401) {
        return NextResponse.json({
          success: false,
          error: 'Authentication required',
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
        }, { status: 401 });
      }
      
      if (error.response.status === 403) {
        return NextResponse.json({
          success: false,
          error: 'Access denied',
          message: '–û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
        }, { status: 403 });
      }

      if (error.response.status === 404) {
        return NextResponse.json({
          success: false,
          error: 'Ad not found',
          message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        }, { status: 404 });
      }
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return NextResponse.json({
      success: false,
      error: error.message || 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}
