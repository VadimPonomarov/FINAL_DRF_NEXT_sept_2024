import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    console.log('[User Analytics API] üë§ Getting REAL personal user analytics from Django...');

    const { searchParams } = new URL(request.url);
    const locale = searchParams.get('locale') || 'uk';

    console.log('[User Analytics API] üîç Locale:', locale);

    // –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å Django
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
    const url = `${backendUrl}/api/ads/statistics/user/?locale=${locale}`;

    console.log('[User Analytics API] üîç Trying Django backend:', url);

    try {
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          // TODO: Add authentication headers when user auth is implemented
        },
        signal: AbortSignal.timeout(30000)
      });

      console.log('[User Analytics API] üîç Django response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('[User Analytics API] ‚úÖ Got REAL Django user analytics:', result.source);

        return NextResponse.json({
          success: true,
          data: result.data,
          source: result.source,
          locale: locale,
          message: '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL'
        });
      } else {
        const errorText = await response.text();
        console.log('[User Analytics API] ‚ùå Django failed:', response.status, errorText);

        // FALLBACK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        console.log('[User Analytics API] üîÑ Using fallback data for stability');

        return NextResponse.json({
          success: true,
          data: {
            user_id: 1,
            overview: {
              total_ads: 0,
              active_ads: 0,
              sold_ads: 0,
              inactive_ads: 0,
              total_views: 0,
              unique_views: 0,
              conversion_rate: 0.0,
              avg_views_per_ad: 0.0
            },
            recommendations: [
              {
                type: 'info',
                title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É',
                priority: 'info'
              }
            ],
            performance_metrics: {
              ads_with_views: 0,
              view_rate: 0.0,
              engagement_score: 0,
              activity_score: 0
            },
            generated_at: new Date().toISOString(),
            locale: locale
          },
          source: 'fallback_stable',
          locale: locale,
          message: 'Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã'
        });
      }
    } catch (error) {
      console.log('[User Analytics API] ‚ùå Django connection error:', error);

      // FALLBACK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
      console.log('[User Analytics API] üîÑ Using fallback data due to connection error');

      return NextResponse.json({
        success: true,
        data: {
          user_id: 1,
          overview: {
            total_ads: 0,
            active_ads: 0,
            sold_ads: 0,
            inactive_ads: 0,
            total_views: 0,
            unique_views: 0,
            conversion_rate: 0.0,
            avg_views_per_ad: 0.0
          },
          recommendations: [
            {
              type: 'info',
              title: '–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
              description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥',
              priority: 'info'
            }
          ],
          performance_metrics: {
            ads_with_views: 0,
            view_rate: 0.0,
            engagement_score: 0,
            activity_score: 0
          },
          generated_at: new Date().toISOString(),
          locale: locale
        },
        source: 'fallback_error',
        locale: locale,
        message: 'Fallback –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
      });
    }


  } catch (error: any) {
    console.error('[User Analytics API] ‚ùå Error:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Internal server error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
    }, { status: 500 });
  }
}
