import { NextRequest, NextResponse } from 'next/server';
import { fetchData } from '@/app/api/(helpers)/common';

export async function GET(request: NextRequest) {
  try {
    console.log('[Quick Stats API] ‚ö° Getting quick statistics from backend...');

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö backend —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    try {
      console.log('[Quick Stats API] üìä Fetching data from multiple endpoints...');

      // –ó–∞–ø—Ä–æ—Å 1: –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const platformStatsPromise = fetchData('api/ads/statistics/', {
        redirectOnError: false
      });

      // –ó–∞–ø—Ä–æ—Å 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –ø—É–±–ª–∏—á–Ω–∞—è)
      const accountStatsPromise = fetchData('api/accounts/admin/stats/', {
        redirectOnError: false
      });

      // –ó–∞–ø—Ä–æ—Å 3: –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const quickStatsPromise = fetchData('api/ads/statistics/quick/', {
        redirectOnError: false
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [platformResult, accountResult, quickResult] = await Promise.allSettled([
        platformStatsPromise,
        accountStatsPromise,
        quickStatsPromise
      ]);

      console.log('[Quick Stats API] üìä Platform result:', platformResult.status);
      console.log('[Quick Stats API] üë• Account result:', accountResult.status);
      console.log('[Quick Stats API] ‚ö° Quick result:', quickResult.status);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      let formattedData = {
        total_ads: 0,
        active_ads: 0,
        total_users: 0,
        active_users: 0,
        total_views: 0,
        premium_accounts: 0,
        today_ads: 0,
        today_views: 0,
        generated_at: new Date().toISOString()
      };

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (platformResult.status === 'fulfilled' && platformResult.value?.success && platformResult.value?.data?.platform_overview) {
        const platformData = platformResult.value.data.platform_overview;
        console.log('[Quick Stats API] ‚úÖ Platform data:', platformData);

        formattedData.total_ads = platformData.total_ads || 0;
        formattedData.active_ads = platformData.active_ads || 0;
        formattedData.total_users = platformData.total_users || 0;
        formattedData.active_users = platformData.active_users || 0;
        formattedData.total_views = platformData.total_views || 0;
        formattedData.premium_accounts = platformData.premium_accounts || 0;
        formattedData.generated_at = platformResult.value.data.generated_at || formattedData.generated_at;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –ø—É–±–ª–∏—á–Ω–æ–π)
      if (accountResult.status === 'fulfilled' && accountResult.value) {
        console.log('[Quick Stats API] üìä Raw account result:', accountResult.value);

        const accountData = accountResult.value.data || accountResult.value;
        const accountTypes = accountData?.account_types;

        console.log('[Quick Stats API] ‚úÖ Account types data:', accountTypes);

        if (accountTypes) {
          const premiumCount = accountTypes.PREMIUM || accountTypes.premium || 0;
          console.log('[Quick Stats API] üë• Premium accounts found:', premiumCount);

          formattedData.premium_accounts = premiumCount;

          if (accountData?.total_accounts) {
            formattedData.total_users = accountData.total_accounts;
          }
        }
      } else {
        console.log('[Quick Stats API] ‚ö†Ô∏è Account result failed:', accountResult.status);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      if (quickResult.status === 'fulfilled' && quickResult.value?.success && quickResult.value?.data) {
        const quickData = quickResult.value.data;
        console.log('[Quick Stats API] ‚úÖ Quick data:', quickData);

        // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        formattedData.today_ads = quickData.today_ads || formattedData.today_ads;
        formattedData.today_views = quickData.today_views || formattedData.today_views;
      }

      console.log('[Quick Stats API] üéØ Final combined data:', formattedData);

      return NextResponse.json({
        success: true,
        data: formattedData,
        source: 'backend_combined_analytics',
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å backend (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)',
        sources_used: {
          platform: platformResult.status === 'fulfilled',
          accounts: accountResult.status === 'fulfilled',
          quick: quickResult.status === 'fulfilled'
        }
      });

    } catch (backendError) {
      console.log('[Quick Stats API] ‚ö†Ô∏è Backend unavailable, using fallback data:', backendError);
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    const fallbackData = {
      total_ads: 8,
      active_ads: 8,
      total_users: 50,
      active_users: 24,
      total_views: 156,
      premium_accounts: 4, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      today_ads: 0,
      today_views: 0,
      generated_at: new Date().toISOString()
    };

    console.log('[Quick Stats API] üìä Returning fallback statistics:', fallbackData);

    return NextResponse.json({
      success: true,
      data: fallbackData,
      source: 'fallback',
      message: 'Fallback –¥–∞–Ω–Ω—ã–µ (backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
    });

  } catch (error: any) {
    console.error('[Quick Stats API] ‚ùå Error fetching quick stats:', error);

    return NextResponse.json({
      success: false,
      error: 'Internal server error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    }, { status: 500 });
  }
}
