import { NextRequest, NextResponse } from 'next/server';
import '@/lib/env-loader'; // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö reference –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ Django backend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –î–£–ë–õ–ò–ö–ê–¢ route handler –∏–∑ (backend)/public/reference/[type]/route.ts
 * –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ production build
 */

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ Next.js ‚Üí Django endpoints
// –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è —Ñ–æ—Ä–º (choices)
const TYPE_MAPPING: Record<string, string> = {
  'vehicle-types': 'vehicle-types/choices',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º choices endpoint
  'brands': 'marks/choices',  // Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'marks' –≤–º–µ—Å—Ç–æ 'brands', –∏—Å–ø–æ–ª—å–∑—É–µ–º choices
  'models': 'models/choices',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º choices endpoint –¥–ª—è —Ñ–æ—Ä–º
  'regions': 'regions',
  'cities': 'cities',
  'colors': 'colors/choices',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º choices endpoint

  'transmissions': 'transmissions',
  'body-types': 'body-types',
};

export async function GET(request: NextRequest, { params }: { params: Promise<{ type: string }> }) {
  try {
    const { type } = await params;
    const { searchParams } = new URL(request.url);

    console.log(`üìã PUBLIC REFERENCE API: GET request for type: ${type}`);

    // –ü–æ–ª—É—á–∞–µ–º Django endpoint
    const djangoType = TYPE_MAPPING[type];
    if (!djangoType) {
      console.warn(`‚ö†Ô∏è PUBLIC REFERENCE API: Unknown type: ${type}`);
      return NextResponse.json(
        { error: 'Unknown reference type', success: false },
        { status: 400 }
      );
    }

    // –°—Ç—Ä–æ–∏–º URL –¥–ª—è Django backend
    // –í–ê–ñ–ù–û: NEXT_PUBLIC_BACKEND_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost/api (—á–µ—Ä–µ–∑ nginx) –∏–ª–∏ http://localhost:8000 (–Ω–∞–ø—Ä—è–º—É—é)
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || process.env.BACKEND_URL || 'http://localhost:8000';
    console.log(`üîß [PUBLIC REFERENCE API] Using backend URL: ${backendUrl}`);
    
    // –ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ Django
    const adjustedParams = new URLSearchParams(searchParams.toString());
    if (djangoType === 'cities') {
      // –ë—ç–∫–µ–Ω–¥ DRF –æ–±—ã—á–Ω–æ –∂–¥—ë—Ç 'region', –∞ —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç 'region_id'
      const regionId = adjustedParams.get('region_id');
      if (regionId && !adjustedParams.get('region')) {
        adjustedParams.set('region', regionId);
        // –£–¥–∞–ª—è–µ–º region_id –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        adjustedParams.delete('region_id');
      }
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
      if (!adjustedParams.get('page_size')) {
        adjustedParams.set('page_size', '1000');
      }
    }
    if (djangoType === 'models/choices') {
      // –î–ª—è –º–æ–¥–µ–ª–µ–π –±—ç–∫–µ–Ω–¥ –º–æ–∂–µ—Ç –∂–¥–∞—Ç—å 'mark' –≤–º–µ—Å—Ç–æ 'mark_id'
      const markId = adjustedParams.get('mark_id');
      if (markId && !adjustedParams.get('mark')) {
        adjustedParams.set('mark', markId);
      }
    }
    const queryString = adjustedParams.toString();
    // Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /api/ads/reference/ –≤–º–µ—Å—Ç–æ /api/public/reference/
    const djangoUrl = `${backendUrl}/api/ads/reference/${djangoType}/${queryString ? `?${queryString}` : ''}`;

    console.log(`üîó PUBLIC REFERENCE API: Proxying to Django: ${djangoUrl}`);

    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Django
    // 1) –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–æ—É—Ç
    let authHeader = request.headers.get('authorization') || '';
    // 2) –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ Redis —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
    if (!authHeader) {
      try {
        const tokenRes = await fetch(`${request.nextUrl.origin}/api/auth/token`, { cache: 'no-store' });
        if (tokenRes.ok) {
          const tokenData = await tokenRes.json();
          if (tokenData?.access) {
            authHeader = `Bearer ${tokenData.access}`;
          }
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è PUBLIC REFERENCE API: Failed to load auth token from Redis:', e);
      }
    }

    const doRequest = async (authorization?: string) => {
      return fetch(djangoUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...(authorization ? { 'Authorization': authorization } : {}),
        },
        cache: 'no-store'
      });
    };

    let response = await doRequest(authHeader || undefined);

    // –ü—Ä–∏ 401 –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º 1 —Ä–∞–∑
    if (response.status === 401 && authHeader) {
      console.log('üîÑ PUBLIC REFERENCE API: Got 401, attempting token refresh...');
      try {
        const refreshRes = await fetch(`${request.nextUrl.origin}/api/auth/refresh`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          cache: 'no-store'
        });

        if (refreshRes.ok) {
          const refreshData = await refreshRes.json();
          if (refreshData?.access) {
            console.log('‚úÖ PUBLIC REFERENCE API: Token refreshed, retrying request');
            response = await doRequest(`Bearer ${refreshData.access}`);
          }
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è PUBLIC REFERENCE API: Token refresh failed:', e);
      }
    }

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå PUBLIC REFERENCE API: Django returned ${response.status}: ${errorText}`);
      
      return NextResponse.json(
        {
          error: 'Failed to fetch reference data',
          details: errorText,
          status: response.status
        },
        { status: response.status }
      );
    }

    const rawData = await response.json();
    console.log(`‚úÖ PUBLIC REFERENCE API: Received data from Django for type: ${type}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let options: any[] = [];

    // Django –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    if (Array.isArray(rawData)) {
      options = rawData;
    } else if (rawData.results && Array.isArray(rawData.results)) {
      options = rawData.results;
    } else if (rawData.options && Array.isArray(rawData.options)) {
      options = rawData.options;
    } else if (rawData.data && Array.isArray(rawData.data)) {
      options = rawData.data;
    } else {
      console.warn(`‚ö†Ô∏è PUBLIC REFERENCE API: Unexpected data format for type: ${type}`, rawData);
      options = [];
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const responseData = {
      success: true,
      type,
      options,
      count: options.length,
      source: 'django_backend'
    };

    console.log(`‚úÖ PUBLIC REFERENCE API: Returning ${options.length} items (${rawData.length} options) for type: ${type}`);

    return NextResponse.json(responseData);


  } catch (error) {
    console.error('‚ùå PUBLIC REFERENCE API: Error:', error);

    return NextResponse.json(
      {
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

