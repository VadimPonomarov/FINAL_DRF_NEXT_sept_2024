import { NextRequest, NextResponse } from 'next/server';
import { CarAdsService } from '@/services/autoria/carAds.service';

export async function DELETE(request: NextRequest) {
  const startTime = Date.now();

  try {
    console.log('üóëÔ∏è API ENDPOINT: Starting test ads cleanup...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìã Fetching user ads...');
    const userAds = await CarAdsService.getMyCarAds({
      page: 1,
      limit: 1000, // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      status: 'all'
    });

    console.log(`üìä Found ${userAds.results?.length || 0} user ads`);

    if (!userAds.results || userAds.results.length === 0) {
      return NextResponse.json({
        success: true,
        deleted: 0,
        message: 'No ads found to delete',
        duration: `${((Date.now() - startTime) / 1000).toFixed(1)}s`
      });
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º)
    const testAds = userAds.results.filter(ad => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º:
      // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
      // 2. –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
      // 3. –¶–µ–Ω—ã –≤ —Ç–∏–ø–∏—á–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
      const testTitlePatterns = [
        'BMW X5 2020',
        'Mercedes-Benz E-Class 2019',
        'Toyota Camry 2021',
        'Volkswagen Golf 2018',
        'Ford Transit 2020',
        'Honda CBR600RR 2019',
        'Audi A4 2017'
      ];

      const testDescriptionPatterns = [
        '–ø—Ä–µ–º–∏—É–º –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
        '–±–∏–∑–Ω–µ—Å —Å–µ–¥–∞–Ω —Å –ø–æ–ª–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º –æ–ø—Ü–∏–π',
        '–Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π —Å–µ–¥–∞–Ω',
        '–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ö—ç—Ç—á–±–µ–∫ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
        '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ñ—É—Ä–≥–æ–Ω –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
        '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–æ—Ç–æ—Ü–∏–∫–ª –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
        '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å–µ–¥–∞–Ω –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞'
      ];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const hasTestTitle = testTitlePatterns.some(pattern => 
        ad.title?.includes(pattern)
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      const hasTestDescription = testDescriptionPatterns.some(pattern => 
        ad.description?.toLowerCase().includes(pattern.toLowerCase())
      );

      return hasTestTitle || hasTestDescription;
    });

    console.log(`üéØ Identified ${testAds.length} test ads for deletion`);

    if (testAds.length === 0) {
      return NextResponse.json({
        success: true,
        deleted: 0,
        message: 'No test ads found to delete',
        duration: `${((Date.now() - startTime) / 1000).toFixed(1)}s`
      });
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const deletionResults = [];
    let successCount = 0;
    let errorCount = 0;

    for (const ad of testAds) {
      try {
        console.log(`üóëÔ∏è Deleting test ad: ${ad.title} (ID: ${ad.id})`);
        
        await CarAdsService.deleteCarAd(ad.id);
        
        deletionResults.push({
          id: ad.id,
          title: ad.title,
          success: true
        });
        
        successCount++;
        console.log(`‚úÖ Successfully deleted: ${ad.title}`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå Failed to delete ad ${ad.id}:`, error);
        
        deletionResults.push({
          id: ad.id,
          title: ad.title,
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        });
        
        errorCount++;
      }
    }

    const duration = `${((Date.now() - startTime) / 1000).toFixed(1)}s`;
    
    console.log(`üìä Cleanup completed: ${successCount} deleted, ${errorCount} errors in ${duration}`);

    return NextResponse.json({
      success: true,
      deleted: successCount,
      errors: errorCount,
      total: testAds.length,
      duration: duration,
      message: `Successfully deleted ${successCount} test ads${errorCount > 0 ? ` (${errorCount} errors)` : ''}`,
      details: deletionResults
    });

  } catch (error) {
    console.error('‚ùå API ENDPOINT: Cleanup error:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: 'Test ads cleanup failed',
        message: error instanceof Error ? error.message : 'Unknown error',
        duration: `${((Date.now() - startTime) / 1000).toFixed(1)}s`
      },
      { status: 500 }
    );
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
export async function GET(request: NextRequest) {
  try {
    console.log('üìä API ENDPOINT: Getting test ads info...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAds = await CarAdsService.getMyCarAds({
      page: 1,
      limit: 1000,
      status: 'all'
    });

    if (!userAds.results) {
      return NextResponse.json({
        success: true,
        total: 0,
        testAds: 0,
        message: 'No ads found'
      });
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const testTitlePatterns = [
      'BMW X5 2020',
      'Mercedes-Benz E-Class 2019',
      'Toyota Camry 2021',
      'Volkswagen Golf 2018',
      'Ford Transit 2020',
      'Honda CBR600RR 2019',
      'Audi A4 2017'
    ];

    const testAdsCount = userAds.results.filter(ad => 
      testTitlePatterns.some(pattern => ad.title?.includes(pattern))
    ).length;

    return NextResponse.json({
      success: true,
      total: userAds.results.length,
      testAds: testAdsCount,
      regularAds: userAds.results.length - testAdsCount,
      message: `Found ${testAdsCount} test ads out of ${userAds.results.length} total ads`
    });

  } catch (error) {
    console.error('‚ùå API ENDPOINT: Info error:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to get test ads info',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
