import { NextRequest, NextResponse } from 'next/server';
import { getAuthorizationHeaders } from '@/common/constants/headers';

export async function GET(request: NextRequest) {
  try {
    console.log('[Cars API] üì§ Getting car advertisements...');

    const { searchParams } = new URL(request.url);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è backend API
    const params: Record<string, string> = {};

    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    searchParams.forEach((value, key) => {
      if (value) {
        params[key] = value;
      }
    });
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (params.favorites === 'true' || params.only_favorites === 'true') {
      params.favorites_only = 'true';
    }


    console.log('[Cars API] üîÑ Fetching from backend:', {
      endpoint: 'api/ads/cars/',
      params,
      ordering: params.ordering || 'not set'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend –Ω–∞–ø—Ä—è–º—É—é
    const backendUrl = process.env.BACKEND_URL || process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
    const queryString = new URLSearchParams(params).toString();
    const url = `${backendUrl}/api/ads/cars/${queryString ? `?${queryString}` : ''}`;

    console.log('[Cars API] üîó Making request to:', url);
    console.log('[Cars API] üîß Backend URL from env:', {
      BACKEND_URL: process.env.BACKEND_URL,
      NEXT_PUBLIC_BACKEND_URL: process.env.NEXT_PUBLIC_BACKEND_URL,
      finalUrl: backendUrl
    });

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º origin, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ /api/redis
    const authHeaders = await getAuthorizationHeaders(request.nextUrl.origin);

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ/–º–æ–∏) –∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –≤–µ—Ä–Ω–µ–º 401,
    // —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–æ—Å—Ç –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π –≤—ã–¥–∞—á–∏
    const needsAuth = (() => {
      const sp = searchParams;
      const truthy = (key: string) => {
        const v = sp.get(key);
        return v === 'true' || v === '1' || v === 'yes';
      };
      return truthy('favorites_only') || truthy('invert_favorites') || truthy('my_ads_only') || truthy('invert_my_ads');
    })();

    const hasAuth = !!(authHeaders as any).Authorization;
    if (needsAuth && !hasAuth) {
      console.warn('[Cars API] ‚ö†Ô∏è Auth required for personal filter but no token found');
      return NextResponse.json({
        success: false,
        error: 'AUTH_REQUIRED',
        message: 'Authorization required for this filter'
      }, { status: 401 });
    }

    const response = await fetch(url, {
      method: 'GET',
      headers: authHeaders
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[Cars API] ‚ùå Backend request failed:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText
      });

      return NextResponse.json({
        success: false,
        error: `Backend request failed: ${response.status} ${response.statusText}`,
        details: errorText
      }, { status: response.status });
    }

    const result = await response.json();

    if (!result) {
      console.error('[Cars API] ‚ùå No data received from backend');
      return NextResponse.json({
        success: false,
        error: 'No data received from backend'
      }, { status: 500 });
    }

    console.log('[Cars API] ‚úÖ Successfully fetched car ads:', {
      count: result.count || 0,
      results: result.results?.length || 0
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (result.results && result.results.length > 0) {
      const firstCar = result.results[0];
      console.log('[Cars API] üì∏ First car image structure:', {
        id: firstCar.id,
        title: firstCar.title?.substring(0, 50) + '...',
        hasImages: !!firstCar.images,
        imagesType: typeof firstCar.images,
        imagesLength: firstCar.images?.length || 0,
        firstImageKeys: firstCar.images?.[0] ? Object.keys(firstCar.images[0]) : 'no images',
        firstImageSample: firstCar.images?.[0]
      });
    }

    return NextResponse.json(result);

  } catch (error: any) {
    console.error('[Cars API] ‚ùå Error fetching car ads:', error);

    return NextResponse.json({
      success: false,
      error: error.message || 'Failed to fetch car advertisements',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}


// Proxy create to our improved endpoint
export async function POST(request: NextRequest) {
  try {
    console.log('[Cars API] üîÑ Proxying POST request to improved create endpoint...');

    const body = await request.json();
    console.log('[Cars API] üìã Received data keys:', Object.keys(body));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π endpoint –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ backend
    const createUrl = new URL('/api/autoria/cars/create', request.nextUrl.origin);
    console.log('[Cars API] üîó Proxying to:', createUrl.toString());

    const response = await fetch(createUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });

    console.log('[Cars API] üì° Proxy response status:', response.status);

    if (!response.ok) {
      const errorData = await response.json();
      console.error('[Cars API] ‚ùå Proxy error:', errorData);
      return NextResponse.json(errorData, { status: response.status });
    }

    const result = await response.json();
    console.log('[Cars API] ‚úÖ Proxy success:', result.success);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –ø–æ–ª—É—á–∞–ª —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    return NextResponse.json(result, { status: 201 });

  } catch (error: any) {
    console.error('[Cars API] ‚ùå Proxy error:', error);
    return NextResponse.json({
      success: false,
      error: error.message || 'Create failed',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}
