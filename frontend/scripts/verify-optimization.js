#!/usr/bin/env node

/**
 * Optimization Verification Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üîç Verification of Optimization Results\n');

class OptimizationVerifier {
  constructor() {
    this.projectRoot = process.cwd();
    this.results = {
      reactIcons: { status: 'unknown', details: [] },
      bundleConfig: { status: 'unknown', details: [] },
      dynamicImports: { status: 'unknown', details: [] },
      typesCleaned: { status: 'unknown', details: [] },
      typesConsolidated: { status: 'unknown', details: [] },
      buildSize: { status: 'unknown', details: [] }
    };
  }

  async verify() {
    console.log('üöÄ Starting optimization verification...\n');

    await this.verifyReactIconsOptimization();
    await this.verifyBundleConfiguration();
    await this.verifyDynamicImports();
    await this.verifyTypesCleanup();
    await this.verifyTypesConsolidation();
    await this.verifyBuildSize();

    this.displayResults();
    return this.results;
  }

  async verifyReactIconsOptimization() {
    console.log('üì¶ Checking react-icons optimization...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ç–æ—á–µ—á–Ω—ã–µ
      const menuFile = path.join(this.projectRoot, 'src/components/Menus/MenuMain/MenuMain.tsx');
      const dialogFile = path.join(this.projectRoot, 'src/components/All/DialogModal/DialogModal.tsx');
      const filterFile = path.join(this.projectRoot, 'src/components/All/FilterIcon/FilterIconView.tsx');

      let optimizedCount = 0;
      const details = [];

      if (fs.existsSync(menuFile)) {
        const content = fs.readFileSync(menuFile, 'utf-8');
        if (content.includes("import FaBook from 'react-icons/fa/FaBook'")) {
          optimizedCount++;
          details.push('‚úÖ MenuMain.tsx - —Ç–æ—á–µ—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã');
        } else {
          details.push('‚ùå MenuMain.tsx - –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }
      }

      if (fs.existsSync(dialogFile)) {
        const content = fs.readFileSync(dialogFile, 'utf-8');
        if (content.includes("import FaFilter from 'react-icons/fa/FaFilter'")) {
          optimizedCount++;
          details.push('‚úÖ DialogModal.tsx - —Ç–æ—á–µ—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã');
        } else {
          details.push('‚ùå DialogModal.tsx - –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }
      }

      if (fs.existsSync(filterFile)) {
        const content = fs.readFileSync(filterFile, 'utf-8');
        if (content.includes("import FaFilter from 'react-icons/fa/FaFilter'")) {
          optimizedCount++;
          details.push('‚úÖ FilterIconView.tsx - —Ç–æ—á–µ—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã');
        } else {
          details.push('‚ùå FilterIconView.tsx - –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }
      }

      this.results.reactIcons = {
        status: optimizedCount === 3 ? 'success' : 'partial',
        details: [`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${optimizedCount}/3`, ...details]
      };

    } catch (error) {
      this.results.reactIcons = {
        status: 'error',
        details: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
      };
    }
  }

  async verifyBundleConfiguration() {
    console.log('‚öôÔ∏è  Checking bundle configuration...');
    
    try {
      const nextConfigPath = path.join(this.projectRoot, 'next.config.js');
      
      if (fs.existsSync(nextConfigPath)) {
        const content = fs.readFileSync(nextConfigPath, 'utf-8');
        const details = [];
        
        if (content.includes('optimizePackageImports')) {
          details.push('‚úÖ optimizePackageImports –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
          details.push('‚ùå optimizePackageImports –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (content.includes('@radix-ui/react-avatar')) {
          details.push('‚úÖ Radix UI –ø–∞–∫–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        } else {
          details.push('‚ùå Radix UI –ø–∞–∫–µ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        }

        if (content.includes('react-icons')) {
          details.push('‚úÖ react-icons –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é');
        } else {
          details.push('‚ùå react-icons –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        this.results.bundleConfig = {
          status: details.filter(d => d.includes('‚úÖ')).length === 3 ? 'success' : 'partial',
          details
        };
      } else {
        this.results.bundleConfig = {
          status: 'error',
          details: ['‚ùå next.config.js –Ω–µ –Ω–∞–π–¥–µ–Ω']
        };
      }

    } catch (error) {
      this.results.bundleConfig = {
        status: 'error',
        details: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
      };
    }
  }

  async verifyDynamicImports() {
    console.log('üîÑ Checking dynamic imports...');
    
    try {
      const dynamicChartPath = path.join(this.projectRoot, 'src/components/AutoRia/Analytics/Charts/DynamicChartComponents.tsx');
      const dynamicExportPath = path.join(this.projectRoot, 'src/utils/export/DynamicExportUtils.ts');
      
      const details = [];
      let successCount = 0;

      if (fs.existsSync(dynamicChartPath)) {
        const content = fs.readFileSync(dynamicChartPath, 'utf-8');
        if (content.includes('lazy(async () => {') && content.includes("await import('chart.js/auto')")) {
          details.push('‚úÖ DynamicChartComponents.tsx —Å–æ–∑–¥–∞–Ω');
          successCount++;
        } else {
          details.push('‚ùå DynamicChartComponents.tsx –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        }
      } else {
        details.push('‚ùå DynamicChartComponents.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (fs.existsSync(dynamicExportPath)) {
        const content = fs.readFileSync(dynamicExportPath, 'utf-8');
        if (content.includes("await import('jspdf')") && content.includes("await import('xlsx')")) {
          details.push('‚úÖ DynamicExportUtils.ts —Å–æ–∑–¥–∞–Ω');
          successCount++;
        } else {
          details.push('‚ùå DynamicExportUtils.ts –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        }
      } else {
        details.push('‚ùå DynamicExportUtils.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      this.results.dynamicImports = {
        status: successCount === 2 ? 'success' : 'partial',
        details: [`–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${successCount}/2`, ...details]
      };

    } catch (error) {
      this.results.dynamicImports = {
        status: 'error',
        details: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
      };
    }
  }

  async verifyTypesCleanup() {
    console.log('üßπ Checking types cleanup...');
    
    try {
      const entitiesPath = path.join(this.projectRoot, 'src/types/entities.ts');
      const enhancedChatPath = path.join(this.projectRoot, 'src/types/enhanced-chat.ts');
      const autoriaPath = path.join(this.projectRoot, 'src/types/autoria.ts');
      
      const details = [];
      let cleanedCount = 0;

      if (fs.existsSync(entitiesPath)) {
        const content = fs.readFileSync(entitiesPath, 'utf-8');
        const lineCount = content.split('\n').length;
        if (lineCount < 100) { // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª—Å—è
          details.push(`‚úÖ entities.ts –æ—á–∏—â–µ–Ω (${lineCount} —Å—Ç—Ä–æ–∫)`);
          cleanedCount++;
        } else {
          details.push(`‚ùå entities.ts –Ω–µ –æ—á–∏—â–µ–Ω (${lineCount} —Å—Ç—Ä–æ–∫)`);
        }
      }

      if (fs.existsSync(enhancedChatPath)) {
        const content = fs.readFileSync(enhancedChatPath, 'utf-8');
        if (!content.includes('WelcomeMessage') && !content.includes('PongMessage')) {
          details.push('‚úÖ enhanced-chat.ts –æ—á–∏—â–µ–Ω');
          cleanedCount++;
        } else {
          details.push('‚ùå enhanced-chat.ts –Ω–µ –æ—á–∏—â–µ–Ω');
        }
      }

      if (fs.existsSync(autoriaPath)) {
        const content = fs.readFileSync(autoriaPath, 'utf-8');
        if (!content.includes('ContactType')) {
          details.push('‚úÖ autoria.ts –æ—á–∏—â–µ–Ω');
          cleanedCount++;
        } else {
          details.push('‚ùå autoria.ts –Ω–µ –æ—á–∏—â–µ–Ω');
        }
      }

      this.results.typesCleaned = {
        status: cleanedCount >= 2 ? 'success' : 'partial',
        details: [`–û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${cleanedCount}/3`, ...details]
      };

    } catch (error) {
      this.results.typesCleaned = {
        status: 'error',
        details: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
      };
    }
  }

  async verifyTypesConsolidation() {
    console.log('üîó Checking types consolidation...');
    
    try {
      const sharedCommonPath = path.join(this.projectRoot, 'src/types/shared/common.ts');
      const sharedIndexPath = path.join(this.projectRoot, 'src/types/shared/index.ts');
      
      const details = [];
      let consolidatedCount = 0;

      if (fs.existsSync(sharedCommonPath)) {
        const content = fs.readFileSync(sharedCommonPath, 'utf-8');
        const interfaceCount = (content.match(/export interface/g) || []).length;
        const typeCount = (content.match(/export type/g) || []).length;
        
        if (interfaceCount > 20 && typeCount > 10) {
          details.push(`‚úÖ common.ts —Å–æ–∑–¥–∞–Ω (${interfaceCount} –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, ${typeCount} —Ç–∏–ø–æ–≤)`);
          consolidatedCount++;
        } else {
          details.push(`‚ùå common.ts –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–ø–æ–≤ (${interfaceCount} –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, ${typeCount} —Ç–∏–ø–æ–≤)`);
        }
      } else {
        details.push('‚ùå common.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (fs.existsSync(sharedIndexPath)) {
        const content = fs.readFileSync(sharedIndexPath, 'utf-8');
        if (content.includes("export * from './common'") && content.includes('DeepPartial')) {
          details.push('‚úÖ index.ts —Å–æ–∑–¥–∞–Ω —Å —Ä–µ—ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏');
          consolidatedCount++;
        } else {
          details.push('‚ùå index.ts –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        }
      } else {
        details.push('‚ùå index.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      this.results.typesConsolidated = {
        status: consolidatedCount === 2 ? 'success' : 'partial',
        details: [`–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${consolidatedCount}/2`, ...details]
      };

    } catch (error) {
      this.results.typesConsolidated = {
        status: 'error',
        details: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
      };
    }
  }

  async verifyBuildSize() {
    console.log('üìè Checking build size...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ .next –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
      const nextDir = path.join(this.projectRoot, '.next');
      
      if (fs.existsSync(nextDir)) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ bundle
        try {
          execSync('node scripts/analyze-bundle-size.js', { 
            stdio: 'pipe',
            cwd: this.projectRoot 
          });
          
          // –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç
          const reportPath = path.join(this.projectRoot, 'bundle-analysis-report.json');
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf-8'));
            const totalSizeMB = (report.bundleSize.totalSize / (1024 * 1024)).toFixed(2);
            
            this.results.buildSize = {
              status: totalSizeMB < 15 ? 'success' : 'warning',
              details: [
                `üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${totalSizeMB} MB`,
                `üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${report.packageAnalysis.totalDependencies}`,
                `üèãÔ∏è  –¢—è–∂–µ–ª—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${report.packageAnalysis.heavyPackagesFound.length}`
              ]
            };
          } else {
            this.results.buildSize = {
              status: 'warning',
              details: ['‚ö†Ô∏è  –û—Ç—á–µ—Ç –æ —Ä–∞–∑–º–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω']
            };
          }
        } catch (error) {
          this.results.buildSize = {
            status: 'warning',
            details: [`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä: ${error.message}`]
          };
        }
      } else {
        this.results.buildSize = {
          status: 'warning',
          details: ['‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–±—Ä–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build']
        };
      }

    } catch (error) {
      this.results.buildSize = {
        status: 'error',
        details: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
      };
    }
  }

  displayResults() {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò\n');

    const sections = [
      { key: 'reactIcons', title: 'üì¶ React Icons –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è' },
      { key: 'bundleConfig', title: '‚öôÔ∏è  Bundle –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è' },
      { key: 'dynamicImports', title: 'üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ò–º–ø–æ—Ä—Ç—ã' },
      { key: 'typesCleaned', title: 'üßπ –û—á–∏—Å—Ç–∫–∞ –¢–∏–ø–æ–≤' },
      { key: 'typesConsolidated', title: 'üîó –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –¢–∏–ø–æ–≤' },
      { key: 'buildSize', title: 'üìè –†–∞–∑–º–µ—Ä Bundle' }
    ];

    sections.forEach(section => {
      const result = this.results[section.key];
      const statusIcon = {
        success: '‚úÖ',
        partial: '‚ö†Ô∏è ',
        warning: '‚ö†Ô∏è ',
        error: '‚ùå',
        unknown: '‚ùì'
      }[result.status];

      console.log(`${statusIcon} ${section.title}`);
      result.details.forEach(detail => {
        console.log(`   ${detail}`);
      });
      console.log('');
    });

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const successCount = Object.values(this.results).filter(r => r.status === 'success').length;
    const totalCount = Object.keys(this.results).length;
    
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${Math.round((successCount / totalCount) * 100)}%`);
    
    if (successCount === totalCount) {
      console.log('\nüéâ –í–°–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    } else if (successCount >= totalCount * 0.7) {
      console.log('\nüëç –ë–û–õ–¨–®–ò–ù–°–¢–í–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô –ü–†–ò–ú–ï–ù–ï–ù–û!');
    } else {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportPath = path.join(this.projectRoot, 'optimization-verification-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  }
}

// Main execution
async function main() {
  try {
    const verifier = new OptimizationVerifier();
    await verifier.verify();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// Run if this is the main module
main();
