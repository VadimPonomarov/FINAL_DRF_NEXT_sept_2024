/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Playwright
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—è –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –¥–µ–ª–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–±–æ—Ä—ã
 */

const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

class IntelligentMockGenerator {
  constructor(options = {}) {
    this.browser = null;
    this.page = null;
    this.baseUrl = options.baseUrl || 'http://localhost:3000';
    this.headless = options.headless || false;
    this.slowMo = options.slowMo || 200;
    this.generatedData = {};
  }

  async init() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    this.browser = await chromium.launch({ 
      headless: this.headless,
      slowMo: this.slowMo
    });
    
    this.page = await this.browser.newPage();
    await this.page.setViewportSize({ width: 1280, height: 720 });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('üî¥ Browser Error:', msg.text());
      }
    });
    
    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  }

  async navigateToForm() {
    console.log('üìù –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è...');
    await this.page.goto(`${this.baseUrl}/autoria/ads/create`);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await this.page.waitForLoadState('networkidle');
    await this.page.waitForTimeout(2000);
    
    console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  async analyzePageFields() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
    
    const fields = await this.page.evaluate(() => {
      const fieldElements = [];
      
      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
      const selectors = [
        'input[type="text"]',
        'input[type="number"]', 
        'input[type="email"]',
        'input[type="tel"]',
        'textarea',
        'select',
        '[role="combobox"]', // –î–ª—è custom —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        '[data-testid*="select"]',
        '[class*="select"]'
      ];
      
      selectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
          const field = {
            selector: selector,
            name: el.name || el.getAttribute('data-name') || el.id,
            type: el.type || el.tagName.toLowerCase(),
            placeholder: el.placeholder,
            required: el.required || el.getAttribute('aria-required') === 'true',
            value: el.value,
            options: [],
            element: el.outerHTML.substring(0, 200) // –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          };
          
          // –î–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏
          if (el.tagName.toLowerCase() === 'select') {
            field.options = Array.from(el.options).map(opt => ({
              value: opt.value,
              text: opt.textContent
            }));
          }
          
          fieldElements.push(field);
        });
      });
      
      return fieldElements;
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: ${fields.length}`);
    fields.forEach(field => {
      console.log(`  - ${field.name}: ${field.type} (${field.required ? '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ' : '–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ'})`);
    });
    
    return fields;
  }

  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
   */
  async fillTextField(field, value) {
    try {
      const selector = `[name="${field.name}"]`;
      await this.page.waitForSelector(selector, { timeout: 3000 });
      await this.page.fill(selector, value.toString());
      console.log(`  ‚úÖ ${field.name}: "${value}"`);
      return true;
    } catch (error) {
      console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å ${field.name}: ${error.message}`);
      return false;
    }
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
   */
  async selectFieldValue(field) {
    try {
      const selector = `[name="${field.name}"]`;
      await this.page.waitForSelector(selector, { timeout: 3000 });
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä
      await this.page.click(selector);
      await this.page.waitForTimeout(500);
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏–π
      await this.page.waitForSelector('[role="option"], option', { timeout: 3000 });
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
      const options = await this.page.evaluate(() => {
        const optionElements = document.querySelectorAll('[role="option"], option');
        return Array.from(optionElements).map(opt => ({
          value: opt.getAttribute('data-value') || opt.value,
          text: opt.textContent?.trim(),
          element: opt
        })).filter(opt => opt.value && opt.text);
      });
      
      if (options.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ–ø—Ü–∏—é (–Ω–æ –Ω–µ –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é)
        const validOptions = options.filter(opt => opt.value !== '' && opt.text !== '');
        if (validOptions.length > 0) {
          const randomOption = validOptions[Math.floor(Math.random() * Math.min(validOptions.length, 5))];
          
          // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
          const optionSelector = `[data-value="${randomOption.value}"], option[value="${randomOption.value}"]`;
          await this.page.click(optionSelector);
          
          console.log(`  ‚úÖ ${field.name}: "${randomOption.text}" (${randomOption.value})`);
          return randomOption.value;
        }
      }
      
      console.log(`  ‚ö†Ô∏è ${field.name}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π`);
      return null;
      
    } catch (error) {
      console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${field.name}: ${error.message}`);
      return null;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ –∏–º–µ–Ω–∏
   */
  generateFieldValue(field) {
    const fieldName = field.name?.toLowerCase() || '';
    const placeholder = field.placeholder?.toLowerCase() || '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ placeholder
    if (fieldName.includes('title') || fieldName.includes('–∑–∞–≥–æ–ª–æ–≤–æ–∫')) {
      return `–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${Date.now()}`;
    }
    
    if (fieldName.includes('description') || fieldName.includes('–æ–ø–∏—Å–∞–Ω–∏–µ')) {
      const descriptions = [
        '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –≤ –≤—ñ–¥–º—ñ–Ω–Ω–æ–º—É —Å—Ç–∞–Ω—ñ, –æ–¥–∏–Ω –≤–ª–∞—Å–Ω–∏–∫, –ø–æ–≤–Ω–∞ —Å–µ—Ä–≤—ñ—Å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è.',
        '–ú–∞—à–∏–Ω–∞ –Ω–µ –±–∏–ª–∞, –Ω–µ —Ñ–∞—Ä–±–æ–≤–∞–Ω–∞, –≤—Å—ñ –¢–û –ø—Ä–æ–π–¥–µ–Ω—ñ –≤—á–∞—Å–Ω–æ.',
        '–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.',
        '–ü–æ–≤–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è, –≤—Å—ñ –æ–ø—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –±–µ–∑–¥–æ–≥–∞–Ω–Ω–æ.'
      ];
      return descriptions[Math.floor(Math.random() * descriptions.length)];
    }
    
    if (fieldName.includes('year') || fieldName.includes('—Ä—ñ–∫')) {
      return 2020 + Math.floor(Math.random() * 4); // 2020-2023
    }
    
    if (fieldName.includes('mileage') || fieldName.includes('–ø—Ä–æ–±—ñ–≥')) {
      return Math.floor(Math.random() * 150000) + 10000; // 10k-160k
    }
    
    if (fieldName.includes('price') || fieldName.includes('—Ü—ñ–Ω–∞')) {
      return Math.floor(Math.random() * 40000) + 5000; // 5k-45k
    }
    
    if (fieldName.includes('engine_volume') || fieldName.includes('–æ–±\'—î–º')) {
      return (Math.random() * 2.5 + 1.0).toFixed(1); // 1.0-3.5
    }
    
    if (fieldName.includes('engine_power') || fieldName.includes('–ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å')) {
      return Math.floor(Math.random() * 250) + 80; // 80-330
    }
    
    if (fieldName.includes('phone') || fieldName.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
      return `+380${Math.floor(Math.random() * 900000000) + 100000000}`;
    }
    
    if (fieldName.includes('email') || fieldName.includes('–ø–æ—à—Ç–∞')) {
      return `test${Math.floor(Math.random() * 1000)}@example.com`;
    }
    
    if (fieldName.includes('license_plate') || fieldName.includes('–Ω–æ–º–µ—Ä')) {
      return `AA${Math.floor(Math.random() * 9000) + 1000}BB`;
    }
    
    if (field.type === 'number') {
      return Math.floor(Math.random() * 100) + 1;
    }
    
    return `–¢–µ—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è ${Math.floor(Math.random() * 1000)}`;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  async processCurrentPage() {
    const fields = await this.analyzePageFields();
    const pageData = {};
    
    for (const field of fields) {
      if (!field.name) continue;
      
      console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è: ${field.name} (${field.type})`);
      
      if (field.type === 'select' || field.selector.includes('select') || field.selector.includes('combobox')) {
        // –≠—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä - –≤—ã–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        const selectedValue = await this.selectFieldValue(field);
        if (selectedValue) {
          pageData[field.name] = selectedValue;
        }
      } else {
        // –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ - –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        const value = this.generateFieldValue(field);
        const success = await this.fillTextField(field, value);
        if (success) {
          pageData[field.name] = value;
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
      await this.page.waitForTimeout(300);
    }
    
    return pageData;
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∞–±—É
   */
  async goToNextTab(currentTab) {
    const tabs = ['specs', 'pricing', 'location', 'contact', 'metadata'];
    const currentIndex = tabs.indexOf(currentTab);
    
    if (currentIndex < tabs.length - 1) {
      const nextTab = tabs[currentIndex + 1];
      console.log(`üìë –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–∞–±—É: ${nextTab}`);
      
      try {
        await this.page.click(`[data-value="${nextTab}"]`);
        await this.page.waitForTimeout(1000);
        return nextTab;
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞–±—É ${nextTab}: ${error.message}`);
        return null;
      }
    }
    
    return null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async generateFullMockData() {
    console.log('üé≠ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    await this.navigateToForm();
    
    const tabs = ['specs', 'pricing', 'location', 'contact', 'metadata'];
    
    for (const tab of tabs) {
      console.log(`\nüìã === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞: ${tab.toUpperCase()} ===`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∞–±—É
      try {
        await this.page.click(`[data-value="${tab}"]`);
        await this.page.waitForTimeout(1500);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞–±—É ${tab}: ${error.message}`);
        continue;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const tabData = await this.processCurrentPage();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–∞
      this.generatedData[tab] = tabData;
      
      console.log(`‚úÖ –¢–∞–± ${tab} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–∞–Ω–Ω—ã—Ö: ${Object.keys(tabData).length}`);
    }
    
    console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    return this.generatedData;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
   */
  async saveToFile(filename = 'generated-mock-data.json') {
    const outputPath = path.join(__dirname, '../src/utils/', filename);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    fs.writeFileSync(outputPath, JSON.stringify(this.generatedData, null, 2));
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
    
    return outputPath;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }
}

module.exports = { IntelligentMockGenerator };

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    const generator = new IntelligentMockGenerator({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
      slowMo: 300      // –ó–∞–º–µ–¥–ª—è–µ–º –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    });
    
    try {
      await generator.init();
      const mockData = await generator.generateFullMockData();
      await generator.saveToFile();
      
      console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log(JSON.stringify(mockData, null, 2));
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞:', error);
    } finally {
      await generator.close();
    }
  })();
}
