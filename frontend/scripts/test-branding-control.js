/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —à–∏–ª–¥–∏–∫–∏ –º–∞—Ä–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–º –º–∞—Ä–∫–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 */

const testCases = [
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–±—Ä–µ–Ω–¥–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω)
  {
    brand: 'BMW',
    model: 'X5',
    vehicle_type: 'car',
    body_type: 'suv',
    expected_branding: true,
    description: 'BMW SUV - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è'
  },
  {
    brand: 'Mercedes-Benz',
    model: 'E-Class',
    vehicle_type: 'car',
    body_type: 'sedan',
    expected_branding: true,
    description: 'Mercedes —Å–µ–¥–∞–Ω - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è'
  },
  {
    brand: 'Caterpillar',
    model: '320D',
    vehicle_type: 'excavator',
    body_type: 'construction',
    expected_branding: true,
    description: 'Caterpillar —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è'
  },
  {
    brand: 'Atlas',
    model: 'AC 40',
    vehicle_type: 'crane',
    body_type: 'construction',
    expected_branding: true,
    description: 'Atlas –∫—Ä–∞–Ω - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è'
  },
  
  // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–±—Ä–µ–Ω–¥–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω)
  {
    brand: 'Mercedes-Benz',
    model: 'Excavator',
    vehicle_type: 'excavator',
    body_type: 'construction',
    expected_branding: false,
    description: 'Mercedes –Ω–∞ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–µ - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'
  },
  {
    brand: 'BMW',
    model: 'Crane',
    vehicle_type: 'crane',
    body_type: 'construction',
    expected_branding: false,
    description: 'BMW –Ω–∞ –∫—Ä–∞–Ω–µ - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'
  },
  {
    brand: 'Atlas',
    model: 'Sedan',
    vehicle_type: 'car',
    body_type: 'sedan',
    expected_branding: false,
    description: 'Atlas –Ω–∞ –ª–µ–≥–∫–æ–≤–æ–º –∞–≤—Ç–æ - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'
  },
  {
    brand: 'Caterpillar',
    model: 'SUV',
    vehicle_type: 'car',
    body_type: 'suv',
    expected_branding: false,
    description: 'Caterpillar –Ω–∞ SUV - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'
  },
  
  // –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
  {
    brand: '',
    model: 'Unknown',
    vehicle_type: 'car',
    body_type: 'sedan',
    expected_branding: false,
    description: '–ü—É—Å—Ç–æ–π –±—Ä–µ–Ω–¥ - –±—Ä–µ–Ω–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω'
  },
  {
    brand: 'Unknown',
    model: 'Car',
    vehicle_type: 'car',
    body_type: 'sedan',
    expected_branding: false,
    description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥ - –±—Ä–µ–Ω–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω'
  }
];

async function testBrandingControl() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞...\n');
  
  let passed = 0;
  let failed = 0;
  
  for (const testCase of testCases) {
    try {
      console.log(`üìã –¢–µ—Å—Ç: ${testCase.description}`);
      console.log(`   –ë—Ä–µ–Ω–¥: ${testCase.brand}, –ú–æ–¥–µ–ª—å: ${testCase.model}`);
      console.log(`   –¢–∏–ø –¢–°: ${testCase.vehicle_type}, –ö—É–∑–æ–≤: ${testCase.body_type}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const response = await fetch('/api/llm/generate-car-images', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          formData: {
            brand: testCase.brand,
            model: testCase.model,
            year: 2020,
            color: 'silver',
            body_type: testCase.body_type,
            vehicle_type: testCase.vehicle_type,
            vehicle_type_name: testCase.vehicle_type,
            condition: 'good'
          },
          angles: ['front'],
          style: 'realistic',
          quality: 'standard',
          useDescription: false
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –±—Ä–µ–Ω–¥–∏–Ω–≥—É
        const prompt = result.images?.[0]?.prompt || '';
        const hasBrandingDisabled = prompt.includes('CRITICAL: Do not show any brand logos') || 
                                   prompt.includes('Do not show Mercedes-Benz, BMW, Audi, Toyota');
        const hasBrandingEnabled = prompt.includes('Use ONLY authentic') && 
                                  prompt.includes(testCase.brand);
        
        const actualBranding = !hasBrandingDisabled && (hasBrandingEnabled || testCase.brand);
        
        if (actualBranding === testCase.expected_branding) {
          console.log(`   ‚úÖ –ü–†–û–®–ï–õ: –ë—Ä–µ–Ω–¥–∏–Ω–≥ ${actualBranding ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'} –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å`);
          passed++;
        } else {
          console.log(`   ‚ùå –ü–†–û–í–ê–õ–ï–ù: –û–∂–∏–¥–∞–ª—Å—è –±—Ä–µ–Ω–¥–∏–Ω–≥ ${testCase.expected_branding ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}, –ø–æ–ª—É—á–µ–Ω ${actualBranding ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
          console.log(`   üìù –ü—Ä–æ–º–ø—Ç: ${prompt.substring(0, 150)}...`);
          failed++;
        }
      } else {
        console.log(`   ‚ö†Ô∏è –û–®–ò–ë–ö–ê API: ${response.status} ${response.statusText}`);
        failed++;
      }
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
      failed++;
    }
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
  
  if (failed === 0) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (typeof window !== 'undefined') {
  // –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–∞
  window.testBrandingControl = testBrandingControl;
  console.log('üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: testBrandingControl()');
} else {
  // Node.js —Å—Ä–µ–¥–∞
  testBrandingControl().catch(console.error);
}

module.exports = { testBrandingControl, testCases };
