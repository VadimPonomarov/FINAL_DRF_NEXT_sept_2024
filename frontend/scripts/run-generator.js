#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */

const { spawn } = require('child_process');
const path = require('path');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultConfig = {
  count: 3,
  images: true,
  imageTypes: ['front', 'side'],
  headless: false
};

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const config = { ...defaultConfig };

for (let i = 0; i < args.length; i++) {
  const arg = args[i];
  
  if (arg === '--count' && args[i + 1]) {
    config.count = parseInt(args[i + 1]);
    i++;
  } else if (arg === '--no-images') {
    config.images = false;
  } else if (arg === '--headless') {
    config.headless = true;
  } else if (arg === '--image-types' && args[i + 1]) {
    config.imageTypes = args[i + 1].split(',');
    i++;
  } else if (arg === '--help') {
    console.log(`
ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π AutoRia

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/run-generator.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --count <—á–∏—Å–ª–æ>           –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)
  --no-images              –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  --headless               –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ
  --image-types <—Ç–∏–ø—ã>     –¢–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (front,side,rear,interior)
  --help                   –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/run-generator.js --count 5
  node scripts/run-generator.js --count 2 --no-images --headless
  node scripts/run-generator.js --count 3 --image-types front,side,interior
    `);
    process.exit(0);
  }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${config.count}`);
console.log(`  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${config.images ? '–¥–∞' : '–Ω–µ—Ç'}`);
if (config.images) {
  console.log(`  - –¢–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${config.imageTypes.join(', ')}`);
}
console.log(`  - –†–µ–∂–∏–º: ${config.headless ? 'headless' : '—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º'}`);
console.log('');

// –ó–∞–ø—É—Å–∫–∞–µ–º TypeScript —Å–∫—Ä–∏–ø—Ç
const tsNode = spawn('npx', [
  'ts-node',
  '--project', 'tsconfig.json',
  path.join(__dirname, 'test-ads-generator.ts')
], {
  stdio: 'inherit',
  env: {
    ...process.env,
    ADS_COUNT: config.count.toString(),
    INCLUDE_IMAGES: config.images.toString(),
    IMAGE_TYPES: config.imageTypes.join(','),
    HEADLESS: config.headless.toString()
  }
});

tsNode.on('close', (code) => {
  if (code === 0) {
    console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log(`\n‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
  }
  process.exit(code);
});

tsNode.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
  console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
  console.log('   npm install');
  console.log('   npm install -D ts-node typescript');
  process.exit(1);
});
