/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright
 * –≠–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
 */

import { chromium, Browser, Page, BrowserContext } from 'playwright';
import { generateFullMockData } from '../src/utils/mockData';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
export interface AdGeneratorConfig {
  count: number;
  imageTypes: string[];
  includeImages: boolean;
  users: UserAccount[];
  headless: boolean;
  slowMo: number;
  timeout: number;
}

export interface UserAccount {
  email: string;
  password: string;
  accountType: 'basic' | 'premium' | 'dealer';
  maxAds: number;
  currentAds?: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
export interface ApiUser {
  id: number;
  email: string;
  first_name?: string;
  last_name?: string;
  is_active: boolean;
  account?: {
    account_type: 'BASIC' | 'PREMIUM' | 'DEALER';
    ads_count: number;
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API
 */
export async function getActiveUsers(): Promise<UserAccount[]> {
  try {
    console.log('üë• Fetching active users from API...');

    // –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const loginResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'pvs.versia@gmail.com',
        password: '12345678'
      })
    });

    if (!loginResponse.ok) {
      throw new Error(`Admin login failed: ${loginResponse.status}`);
    }

    const loginData = await loginResponse.json();
    const adminToken = loginData.access;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/users/`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json',
      }
    });

    if (!usersResponse.ok) {
      throw new Error(`Failed to fetch users: ${usersResponse.status}`);
    }

    const usersData = await usersResponse.json();
    const apiUsers: ApiUser[] = usersData.results || usersData || [];

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç UserAccount
    const userAccounts: UserAccount[] = apiUsers
      .filter(user => user.is_active && user.email && user.email.includes('@'))
      .map(user => {
        const accountType = user.account?.account_type?.toLowerCase() as 'basic' | 'premium' | 'dealer' || 'basic';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞
        let maxAds = 1; // basic –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (accountType === 'premium') maxAds = 50;
        if (accountType === 'dealer') maxAds = 200;

        return {
          email: user.email,
          password: '12345678', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö
          accountType,
          maxAds,
          currentAds: user.account?.ads_count || 0
        };
      });

    console.log(`‚úÖ Found ${userAccounts.length} active users:`);
    userAccounts.forEach(user => {
      console.log(`  - ${user.email} (${user.accountType}, ${user.currentAds}/${user.maxAds} ads)`);
    });

    return userAccounts;

  } catch (error) {
    console.error('‚ùå Error fetching users:', error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    console.log('üîÑ Using fallback test users...');
    return [
      {
        email: 'pvs.versia@gmail.com',
        password: '12345678',
        accountType: 'premium',
        maxAds: 50,
        currentAds: 0
      }
    ];
  }
}

export class PlaywrightAdGenerator {
  private browser: Browser | null = null;
  private config: AdGeneratorConfig;
  private progressCallback?: (message: string, progress: number) => void;

  constructor(config: AdGeneratorConfig) {
    this.config = {
      headless: false,
      slowMo: 1000,
      timeout: 30000,
      ...config
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  setProgressCallback(callback: (message: string, progress: number) => void) {
    this.progressCallback = callback;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä
   */
  async initialize(): Promise<void> {
    console.log('üöÄ Initializing Playwright browser...');
    
    this.browser = await chromium.launch({
      headless: this.config.headless,
      slowMo: this.config.slowMo,
      args: [
        '--start-maximized',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });

    console.log('‚úÖ Browser initialized successfully');
  }

  /**
   * –õ–æ–≥–∏–Ω–∏—Ç—Å—è –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async loginAsUser(context: BrowserContext, user: UserAccount): Promise<Page> {
    const page = await context.newPage();
    
    console.log(`üîê Logging in as ${user.email}...`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    await page.goto('/login');
    await page.waitForLoadState('networkidle');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    await page.fill('input[name="email"], input[type="email"]', user.email);
    await page.fill('input[name="password"], input[type="password"]', user.password);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    await page.click('button[type="submit"], button:has-text("–í–æ–π—Ç–∏"), button:has-text("Login")');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    await page.waitForURL('**/autoria**', { timeout: this.config.timeout });
    
    console.log(`‚úÖ Successfully logged in as ${user.email}`);
    return page;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
   */
  async createSingleAd(page: Page, adIndex: number): Promise<boolean> {
    try {
      console.log(`üìù Creating ad ${adIndex + 1}...`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      await page.goto('/autoria/create-ad');
      await page.waitForLoadState('networkidle');

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
      await page.waitForSelector('form', { timeout: this.config.timeout });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const mockData = generateFullMockData();
      console.log(`üé≠ Generated mock data for ad ${adIndex + 1}:`, mockData.title);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã (–æ–Ω–∏ —É–∂–µ –∏–º–µ—é—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä)
      console.log('üéØ Looking for auto-fill buttons with random selection...');

      // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      const buttonSelectors = [
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - —ç–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        { selector: 'button:has-text("üé≠ Interactive All")', name: 'Interactive All', timeout: 8000 },
        { selector: 'button:has-text("üé≠")', name: 'Interactive', timeout: 8000 },
        { selector: 'button[title*="–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è"]', name: 'Interactive (UA)', timeout: 8000 },

        // –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        { selector: 'button:has-text("‚ö° Quick")', name: 'Quick', timeout: 3000 },
        { selector: 'button:has-text("üöÄ")', name: 'Fast', timeout: 3000 },
        { selector: 'button[title*="–®–≤–∏–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è"]', name: 'Quick (UA)', timeout: 3000 },

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–±–∞
        { selector: 'button:has-text("üéØ Current Tab")', name: 'Current Tab', timeout: 4000 },

        // –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        { selector: 'button:has-text("–≥–µ–Ω–µ—Ä–∞—Ü")', name: 'Generation', timeout: 4000 },
        { selector: 'button:has-text("mock")', name: 'Mock', timeout: 4000 }
      ];

      let buttonUsed = false;
      let usedButtonName = '';

      for (const buttonInfo of buttonSelectors) {
        const button = page.locator(buttonInfo.selector).first();

        if (await button.isVisible({ timeout: 1000 })) {
          console.log(`üé≤ Found and using ${buttonInfo.name} button (includes random selection)...`);

          try {
            await button.click();
            buttonUsed = true;
            usedButtonName = buttonInfo.name;

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤—Ä–µ–º—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏)
            console.log(`‚è≥ Waiting ${buttonInfo.timeout}ms for ${buttonInfo.name} generation to complete...`);
            await page.waitForTimeout(buttonInfo.timeout);

            break;
          } catch (error) {
            console.warn(`‚ö†Ô∏è Error clicking ${buttonInfo.name} button:`, error.message);
            continue;
          }
        }
      }

      if (!buttonUsed) {
        console.log('‚ùå No auto-fill buttons found - this may indicate form structure changes');
        throw new Error('Auto-fill buttons not found. Form may have changed structure.');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
      console.log(`‚úÖ ${usedButtonName} button used - verifying random data generation...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
      const fieldsToCheck = [
        { selector: 'input[name="title"]', name: 'Title' },
        { selector: 'textarea[name="description"]', name: 'Description' },
        { selector: 'input[name="price"]', name: 'Price' },
        { selector: 'input[name="year"]', name: 'Year' },
        { selector: 'input[name="mileage"]', name: 'Mileage' }
      ];

      let filledFields = 0;
      for (const field of fieldsToCheck) {
        try {
          const element = page.locator(field.selector).first();
          if (await element.isVisible({ timeout: 1000 })) {
            const value = await element.inputValue();
            if (value && value.trim() !== '' && value !== 'undefined') {
              filledFields++;
              console.log(`  ‚úì ${field.name}: "${value.substring(0, 30)}${value.length > 30 ? '...' : ''}"`);
            } else {
              console.log(`  ‚ö†Ô∏è ${field.name}: empty or undefined`);
            }
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è ${field.name}: not accessible`);
        }
      }

      if (filledFields >= 3) {
        console.log(`‚úÖ Auto-fill successful: ${filledFields}/${fieldsToCheck.length} key fields filled with random data`);
      } else {
        console.log(`‚ö†Ô∏è Auto-fill may be incomplete: only ${filledFields}/${fieldsToCheck.length} key fields filled`);
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (this.config.includeImages && this.config.imageTypes.length > 0) {
        await this.generateImagesUsingButtons(page);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await this.submitForm(page);
      
      console.log(`‚úÖ Ad ${adIndex + 1} created successfully`);
      return true;

    } catch (error) {
      console.error(`‚ùå Error creating ad ${adIndex + 1}:`, error);
      return false;
    }
  }

  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
   */
  private async fillFormManually(page: Page, mockData: any): Promise<void> {
    console.log('üìù Filling form manually with complete data...');

    try {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
      await page.waitForSelector('form', { timeout: 10000 });

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
      const title = mockData.title || '–ü—Ä–æ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏';
      await this.fillFieldSafely(page, 'input[name="title"]', title);

      const description = mockData.description || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.';
      await this.fillFieldSafely(page, 'textarea[name="description"]', description);

      const price = mockData.price || Math.floor(Math.random() * 50000) + 10000;
      await this.fillFieldSafely(page, 'input[name="price"]', price.toString());

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
      const brand = mockData.brand || 'Toyota';
      await this.selectFieldSafely(page, 'select[name="brand"], input[name="brand"]', brand);

      const model = mockData.model || 'Camry';
      await this.fillFieldSafely(page, 'input[name="model"]', model);

      const year = mockData.year || 2020;
      await this.fillFieldSafely(page, 'input[name="year"]', year.toString());

      const mileage = mockData.mileage || Math.floor(Math.random() * 100000) + 10000;
      await this.fillFieldSafely(page, 'input[name="mileage"]', mileage.toString());

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      await this.selectFieldSafely(page, 'select[name="fuel_type"]', mockData.fuel_type || 'petrol');
      await this.selectFieldSafely(page, 'select[name="transmission"]', mockData.transmission || 'automatic');
      await this.selectFieldSafely(page, 'select[name="body_type"]', mockData.body_type || 'sedan');
      await this.selectFieldSafely(page, 'select[name="condition"]', mockData.condition || 'good');

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const contactName = mockData.contact_name || '–í–ª–∞–¥–∏–º–∏—Ä';
      await this.fillFieldSafely(page, 'input[name="contact_name"]', contactName);

      const phone = mockData.phone || '+380501234567';
      await this.fillFieldSafely(page, 'input[name="phone"]', phone);

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      const region = mockData.region || '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å';
      await this.selectFieldSafely(page, 'select[name="region"]', region);

      const city = mockData.city || '–ö–∏—ó–≤';
      await this.selectFieldSafely(page, 'select[name="city"]', city);

      console.log('‚úÖ Form filled manually with all required fields');

    } catch (error) {
      console.error('‚ùå Error filling form manually:', error);
      throw error;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞
   */
  private async fillFieldSafely(page: Page, selector: string, value: string): Promise<void> {
    try {
      const element = page.locator(selector).first();
      if (await element.isVisible({ timeout: 2000 })) {
        await element.clear();
        await element.fill(value);
        console.log(`‚úì Filled ${selector}: ${value}`);
        await page.waitForTimeout(200); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not fill ${selector}:`, error.message);
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–ª–µ–∫—Ç–µ
   */
  private async selectFieldSafely(page: Page, selector: string, value: string): Promise<void> {
    try {
      const element = page.locator(selector).first();
      if (await element.isVisible({ timeout: 2000 })) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        try {
          await element.selectOption({ label: value });
        } catch {
          try {
            await element.selectOption({ value: value });
          } catch {
            // –ï—Å–ª–∏ —ç—Ç–æ input, –∞ –Ω–µ select
            await element.fill(value);
          }
        }
        console.log(`‚úì Selected ${selector}: ${value}`);
        await page.waitForTimeout(200);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not select ${selector}:`, error.message);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–µ
   */
  private async generateImagesUsingButtons(page: Page): Promise<void> {
    try {
      console.log('üì∏ Looking for image generation buttons...');

      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageButtons = [
        'button:has-text("üñºÔ∏è")',
        'button:has-text("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")',
        'button:has-text("Generate Images")',
        'button[title*="–∏–∑–æ–±—Ä–∞–∂–µ–Ω"]',
        'button[title*="image"]',
        '.image-generator button',
        '[data-testid="image-generator-button"]'
      ];

      let imageButtonFound = false;

      for (const selector of imageButtons) {
        const button = page.locator(selector).first();
        if (await button.isVisible({ timeout: 1000 })) {
          console.log(`üéØ Found image generation button: ${selector}`);
          await button.click();
          imageButtonFound = true;
          break;
        }
      }

      if (!imageButtonFound) {
        console.log('‚ö†Ô∏è No image generation buttons found, skipping image generation');
        return;
      }

      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      await page.waitForTimeout(2000);

      // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const modalSelectors = [
        '.modal',
        '.dialog',
        '[role="dialog"]',
        '.image-type-selector',
        '.image-generation-modal'
      ];

      let modalFound = false;
      for (const selector of modalSelectors) {
        if (await page.locator(selector).isVisible({ timeout: 1000 })) {
          console.log(`üìã Found image generation interface: ${selector}`);
          modalFound = true;
          break;
        }
      }

      if (modalFound) {
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for (const imageType of this.config.imageTypes) {
          const typeSelectors = [
            `button:has-text("${imageType}")`,
            `input[value="${imageType}"]`,
            `label:has-text("${imageType}")`,
            `[data-image-type="${imageType}"]`
          ];

          for (const selector of typeSelectors) {
            const element = page.locator(selector).first();
            if (await element.isVisible({ timeout: 1000 })) {
              await element.click();
              console.log(`‚úì Selected image type: ${imageType}`);
              break;
            }
          }
        }

        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const confirmSelectors = [
          'button:has-text("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")',
          'button:has-text("Generate")',
          'button:has-text("–°–æ–∑–¥–∞—Ç—å")',
          'button[type="submit"]',
          '.generate-button',
          '.confirm-button'
        ];

        for (const selector of confirmSelectors) {
          const button = page.locator(selector).first();
          if (await button.isVisible({ timeout: 1000 })) {
            console.log(`üöÄ Clicking generate button: ${selector}`);
            await button.click();
            break;
          }
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        console.log('‚è≥ Waiting for image generation to complete...');
        await page.waitForTimeout(8000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageElements = page.locator('img[src*="data:"], img[src*="blob:"], .generated-image, .ad-image');
        const imageCount = await imageElements.count();

        if (imageCount > 0) {
          console.log(`‚úÖ Successfully generated ${imageCount} images`);
        } else {
          console.log('‚ö†Ô∏è No images detected after generation');
        }

      } else {
        console.log('‚ö†Ô∏è No image generation interface found, images may generate automatically');
        await page.waitForTimeout(5000);
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è Error during image generation:', error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
   */
  private async submitForm(page: Page): Promise<void> {
    console.log('üì§ Submitting form with randomly generated data...');

    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
    const submitSelectors = [
      'button[type="submit"]',
      'button:has-text("–°–æ–∑–¥–∞—Ç—å")',
      'button:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")',
      'button:has-text("Create")',
      'button:has-text("Publish")',
      '.submit-button',
      '[data-testid="submit-button"]'
    ];

    let submitButton = null;
    for (const selector of submitSelectors) {
      const button = page.locator(selector).first();
      if (await button.isVisible({ timeout: 1000 })) {
        submitButton = button;
        console.log(`üì§ Found submit button: ${selector}`);
        break;
      }
    }

    if (!submitButton) {
      throw new Error('Submit button not found');
    }

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ –∏ –∫–ª–∏–∫–∞–µ–º
    await submitButton.scrollIntoViewIfNeeded();
    await submitButton.click();

    console.log('‚è≥ Waiting for form submission response...');

    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    await page.waitForTimeout(5000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
    const successSelectors = [
      '.toast-success',
      '.notification-success',
      '.alert-success',
      '.success-message',
      '[data-testid="success-toast"]',
      'text="—É—Å–ø–µ—à–Ω–æ"',
      'text="successfully"',
      'text="—Å–æ–∑–¥–∞–Ω–æ"',
      'text="created"'
    ];

    let successFound = false;
    for (const selector of successSelectors) {
      if (await page.locator(selector).isVisible({ timeout: 1000 })) {
        console.log(`‚úÖ Success indicator found: ${selector}`);
        successFound = true;
        break;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    const currentUrl = page.url();
    if (currentUrl.includes('/my-ads') || currentUrl.includes('/ads/') || currentUrl.includes('/autoria')) {
      console.log(`‚úÖ Redirected to: ${currentUrl} - likely successful`);
      successFound = true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    const errorSelectors = [
      '.toast-error',
      '.notification-error',
      '.alert-error',
      '.error-message',
      'text="–æ—à–∏–±–∫–∞"',
      'text="error"'
    ];

    for (const selector of errorSelectors) {
      if (await page.locator(selector).isVisible({ timeout: 1000 })) {
        const errorText = await page.locator(selector).textContent();
        throw new Error(`Form submission failed: ${errorText}`);
      }
    }

    if (successFound) {
      console.log('‚úÖ Form submitted successfully with random data');
    } else {
      console.log('‚ö†Ô∏è Form submitted but success confirmation unclear');
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
   */
  async generateAds(): Promise<{ success: number; failed: number; details: any[] }> {
    if (!this.browser) {
      throw new Error('Browser not initialized. Call initialize() first.');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API
    const activeUsers = await getActiveUsers();
    if (activeUsers.length === 0) {
      throw new Error('No active users found for ad generation');
    }

    console.log(`üéØ Starting generation of ${this.config.count} ads using ${activeUsers.length} active users`);

    const results = {
      success: 0,
      failed: 0,
      details: []
    };

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let adIndex = 0; adIndex < this.config.count; adIndex++) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const availableUsers = activeUsers.filter(user => {
        const currentAds = user.currentAds || 0;
        return currentAds < user.maxAds;
      });

      if (availableUsers.length === 0) {
        console.log('‚ö†Ô∏è No more users available for ad creation (all limits reached)');
        break;
      }

      // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const randomUser = availableUsers[Math.floor(Math.random() * availableUsers.length)];
      console.log(`üé≤ Selected random user: ${randomUser.email} (${randomUser.accountType}, ${randomUser.currentAds}/${randomUser.maxAds} ads)`);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const context = await this.browser.newContext();

      try {
        const progress = ((adIndex + 1) / this.config.count) * 100;

        if (this.progressCallback) {
          this.progressCallback(
            `Creating ad ${adIndex + 1}/${this.config.count} for ${randomUser.email}`,
            progress
          );
        }

        // –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const page = await this.loginAsUser(context, randomUser);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const success = await this.createSingleAd(page, adIndex);

        if (success) {
          results.success++;
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          randomUser.currentAds = (randomUser.currentAds || 0) + 1;
        } else {
          results.failed++;
        }

        results.details.push({
          adIndex: adIndex + 1,
          user: randomUser.email,
          accountType: randomUser.accountType,
          success,
          timestamp: new Date().toISOString()
        });

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
        await page.waitForTimeout(2000);

      } catch (error) {
        console.error(`‚ùå Error creating ad ${adIndex + 1} for ${randomUser.email}:`, error);
        results.failed++;

        results.details.push({
          adIndex: adIndex + 1,
          user: randomUser.email,
          accountType: randomUser.accountType,
          success: false,
          error: error.message,
          timestamp: new Date().toISOString()
        });
      } finally {
        await context.close();
      }
    }

    return results;
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä
   */
  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      console.log('üîí Browser closed');
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
export async function runAdGenerator(config: Omit<AdGeneratorConfig, 'users'>): Promise<{ success: number; failed: number; details: any[] }> {
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
  const fullConfig: AdGeneratorConfig = {
    ...config,
    users: [] // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ generateAds()
  };

  const generator = new PlaywrightAdGenerator(fullConfig);

  try {
    await generator.initialize();
    const results = await generator.generateAds();

    console.log('\nüìä Generation Results:');
    console.log(`‚úÖ Successful: ${results.success}`);
    console.log(`‚ùå Failed: ${results.failed}`);
    console.log(`üìù Total: ${results.success + results.failed}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const byAccountType = results.details.reduce((acc, detail) => {
      const type = detail.accountType || 'unknown';
      if (!acc[type]) acc[type] = { success: 0, failed: 0 };
      if (detail.success) acc[type].success++;
      else acc[type].failed++;
      return acc;
    }, {} as Record<string, { success: number; failed: number }>);

    console.log('\nüìà Results by Account Type:');
    Object.entries(byAccountType).forEach(([type, stats]) => {
      console.log(`  ${type}: ‚úÖ ${stats.success} | ‚ùå ${stats.failed}`);
    });

    return results;

  } finally {
    await generator.close();
  }
}
