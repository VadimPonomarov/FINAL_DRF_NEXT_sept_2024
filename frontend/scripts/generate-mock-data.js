/**
 * Playwright —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –≠–º—É–ª–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
 */

const { chromium } = require('playwright');

class MockDataGenerator {
  constructor() {
    this.browser = null;
    this.page = null;
    this.baseUrl = 'http://localhost:3000';
  }

  async init() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    this.browser = await chromium.launch({ 
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      slowMo: 100 // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    });
    
    this.page = await this.browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport
    await this.page.setViewportSize({ width: 1280, height: 720 });
    
    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  }

  async navigateToCreateForm() {
    console.log('üìù –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è...');
    await this.page.goto(`${this.baseUrl}/autoria/ads/create`);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await this.page.waitForSelector('[data-testid="car-ad-form"]', { timeout: 10000 });
    console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  }

  async generateSpecsData() {
    console.log('üöó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–∞–± —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    await this.page.click('[data-value="specs"]');
    await this.page.waitForTimeout(1000);

    const specsData = {};

    try {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–∞—Ä–∫—É
      console.log('  üìã –í—ã–±–æ—Ä –º–∞—Ä–∫–∏...');
      const brandSelector = '[name="brand"]';
      await this.page.waitForSelector(brandSelector, { timeout: 5000 });
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞—Ä–∫–∏
      await this.page.click(brandSelector);
      await this.page.waitForTimeout(500);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä–æ–∫
      const brandOptions = await this.page.$$eval(
        '[role="option"]', 
        options => options.map(opt => ({ value: opt.getAttribute('data-value'), text: opt.textContent }))
      );
      
      if (brandOptions.length > 0) {
        const randomBrand = brandOptions[Math.floor(Math.random() * Math.min(brandOptions.length, 10))];
        console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞: ${randomBrand.text}`);
        
        // –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ä–∫—É
        await this.page.click(`[data-value="${randomBrand.value}"]`);
        specsData.brand = randomBrand.value;
        
        await this.page.waitForTimeout(1000);
        
        // –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
        console.log('  üìã –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏...');
        const modelSelector = '[name="model"]';
        await this.page.waitForSelector(modelSelector, { timeout: 5000 });
        await this.page.click(modelSelector);
        await this.page.waitForTimeout(1000);
        
        const modelOptions = await this.page.$$eval(
          '[role="option"]', 
          options => options.map(opt => ({ value: opt.getAttribute('data-value'), text: opt.textContent }))
        );
        
        if (modelOptions.length > 0) {
          const randomModel = modelOptions[Math.floor(Math.random() * Math.min(modelOptions.length, 5))];
          console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${randomModel.text}`);
          await this.page.click(`[data-value="${randomModel.value}"]`);
          specsData.model = randomModel.value;
        }
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ–¥
      console.log('  üìÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ–¥–∞...');
      const currentYear = new Date().getFullYear();
      const randomYear = currentYear - Math.floor(Math.random() * 10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç
      await this.page.fill('[name="year"]', randomYear.toString());
      specsData.year = randomYear;

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–±–µ–≥
      console.log('  üõ£Ô∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞...');
      const randomMileage = Math.floor(Math.random() * 200000) + 10000;
      await this.page.fill('[name="mileage"]', randomMileage.toString());
      specsData.mileage = randomMileage;

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
      console.log('  üîß –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è...');
      const randomEngineVolume = (Math.random() * 3 + 1).toFixed(1); // 1.0 - 4.0
      await this.page.fill('[name="engine_volume"]', randomEngineVolume);
      specsData.engine_volume = parseFloat(randomEngineVolume);

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
      console.log('  ‚ö° –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏...');
      const randomPower = Math.floor(Math.random() * 300) + 100;
      await this.page.fill('[name="engine_power"]', randomPower.toString());
      specsData.engine_power = randomPower;

      // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
      console.log('  ‚õΩ –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞...');
      await this.selectRandomOption('[name="fuel_type"]', specsData, 'fuel_type');

      // –í—ã–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á
      console.log('  ‚öôÔ∏è –í—ã–±–æ—Ä –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á...');
      await this.selectRandomOption('[name="transmission"]', specsData, 'transmission');

      // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫—É–∑–æ–≤–∞
      console.log('  üöô –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞...');
      await this.selectRandomOption('[name="body_type"]', specsData, 'body_type');

      // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
      console.log('  üé® –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞...');
      await this.selectRandomOption('[name="color"]', specsData, 'color');

      // –í—ã–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('  üìä –í—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
      await this.selectRandomOption('[name="condition"]', specsData, 'condition');

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      console.log('  üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞...');
      const title = `${randomBrand?.text || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'} ${randomModel?.text || ''} ${randomYear}`.trim();
      await this.page.fill('[name="title"]', title);
      specsData.title = title;

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      console.log('  üìÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è...');
      const descriptions = [
        '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –≤ –≤—ñ–¥–º—ñ–Ω–Ω–æ–º—É —Å—Ç–∞–Ω—ñ, –æ–¥–∏–Ω –≤–ª–∞—Å–Ω–∏–∫, –ø–æ–≤–Ω–∞ —Å–µ—Ä–≤—ñ—Å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è.',
        '–ú–∞—à–∏–Ω–∞ –Ω–µ –±–∏–ª–∞, –Ω–µ —Ñ–∞—Ä–±–æ–≤–∞–Ω–∞, –≤—Å—ñ –¢–û –ø—Ä–æ–π–¥–µ–Ω—ñ –≤—á–∞—Å–Ω–æ.',
        '–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.',
        '–ü–æ–≤–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è, –≤—Å—ñ –æ–ø—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –±–µ–∑–¥–æ–≥–∞–Ω–Ω–æ.',
        '–Ü–¥–µ–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω, –≥–∞—Ä–∞–∂–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è, –Ω–µ–∫—É—Ä—è—â–∏–π –≤–ª–∞—Å–Ω–∏–∫.'
      ];
      const randomDescription = descriptions[Math.floor(Math.random() * descriptions.length)];
      await this.page.fill('[name="description"]', randomDescription);
      specsData.description = randomDescription;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error.message);
    }

    console.log('‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', specsData);
    return specsData;
  }

  async selectRandomOption(selector, dataObject, fieldName) {
    try {
      await this.page.click(selector);
      await this.page.waitForTimeout(500);
      
      const options = await this.page.$$eval(
        '[role="option"]', 
        options => options.map(opt => ({ value: opt.getAttribute('data-value'), text: opt.textContent }))
      );
      
      if (options.length > 0) {
        const randomOption = options[Math.floor(Math.random() * options.length)];
        await this.page.click(`[data-value="${randomOption.value}"]`);
        dataObject[fieldName] = randomOption.value;
        console.log(`    ‚úÖ ${fieldName}: ${randomOption.text}`);
      }
    } catch (error) {
      console.log(`    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å ${fieldName}: ${error.message}`);
    }
  }

  async generatePricingData() {
    console.log('üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–∞–± —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    await this.page.click('[data-value="pricing"]');
    await this.page.waitForTimeout(1000);

    const pricingData = {};

    try {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–µ–Ω—É
      console.log('  üíµ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã...');
      const randomPrice = Math.floor(Math.random() * 50000) + 5000; // 5000-55000
      await this.page.fill('[name="price"]', randomPrice.toString());
      pricingData.price = randomPrice;

      // –í—ã–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É
      console.log('  üí± –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã...');
      await this.selectRandomOption('[name="currency"]', pricingData, 'currency');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', error.message);
    }

    console.log('‚úÖ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', pricingData);
    return pricingData;
  }

  async generateLocationData() {
    console.log('üìç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–∞–± –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    await this.page.click('[data-value="location"]');
    await this.page.waitForTimeout(1000);

    const locationData = {};

    try {
      // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω
      console.log('  üó∫Ô∏è –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞...');
      const regionSelector = '[name="region"]';
      await this.page.waitForSelector(regionSelector, { timeout: 5000 });
      await this.page.click(regionSelector);
      await this.page.waitForTimeout(1000);
      
      const regionOptions = await this.page.$$eval(
        '[role="option"]', 
        options => options.map(opt => ({ value: opt.getAttribute('data-value'), text: opt.textContent }))
      );
      
      if (regionOptions.length > 0) {
        const randomRegion = regionOptions[Math.floor(Math.random() * Math.min(regionOptions.length, 5))];
        console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${randomRegion.text}`);
        await this.page.click(`[data-value="${randomRegion.value}"]`);
        locationData.region = randomRegion.value;
        
        await this.page.waitForTimeout(1000);
        
        // –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥
        console.log('  üèôÔ∏è –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞...');
        const citySelector = '[name="city"]';
        await this.page.waitForSelector(citySelector, { timeout: 5000 });
        await this.page.click(citySelector);
        await this.page.waitForTimeout(1000);
        
        const cityOptions = await this.page.$$eval(
          '[role="option"]', 
          options => options.map(opt => ({ value: opt.getAttribute('data-value'), text: opt.textContent }))
        );
        
        if (cityOptions.length > 0) {
          const randomCity = cityOptions[Math.floor(Math.random() * Math.min(cityOptions.length, 3))];
          console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: ${randomCity.text}`);
          await this.page.click(`[data-value="${randomCity.value}"]`);
          locationData.city = randomCity.value;
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error.message);
    }

    console.log('‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', locationData);
    return locationData;
  }

  async generateContactData() {
    console.log('üìû –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–∞–± –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await this.page.click('[data-value="contact"]');
    await this.page.waitForTimeout(1000);

    const contactData = {};

    try {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      console.log('  üì± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...');
      const randomPhone = `+380${Math.floor(Math.random() * 900000000) + 100000000}`;
      
      // –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneInput = await this.page.$('[name="contacts[0].value"]') || await this.page.$('[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]');
      if (phoneInput) {
        await phoneInput.fill(randomPhone);
        contactData.contacts = [{ type: 'phone', value: randomPhone, is_visible: true }];
        console.log(`  ‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: ${randomPhone}`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error.message);
    }

    console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', contactData);
    return contactData;
  }

  async generateFullMockData() {
    console.log('üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const mockData = {};
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–±–∞–º
    const specsData = await this.generateSpecsData();
    const pricingData = await this.generatePricingData();
    const locationData = await this.generateLocationData();
    const contactData = await this.generateContactData();
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    Object.assign(mockData, specsData, pricingData, locationData, contactData);
    
    console.log('üéâ –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –º–æ–∫–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', mockData);
    return mockData;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { MockDataGenerator };

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    const generator = new MockDataGenerator();
    
    try {
      await generator.init();
      await generator.navigateToCreateForm();
      const mockData = await generator.generateFullMockData();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
      const fs = require('fs');
      const path = require('path');
      
      const outputPath = path.join(__dirname, '../src/utils/generated-mock-data.json');
      fs.writeFileSync(outputPath, JSON.stringify(mockData, null, 2));
      
      console.log(`üíæ –ú–æ–∫–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞:', error);
    } finally {
      await generator.close();
    }
  })();
}
