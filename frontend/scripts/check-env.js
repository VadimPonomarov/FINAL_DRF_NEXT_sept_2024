#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Google OAuth
 * –ó–∞–ø—É—Å–∫: node scripts/check-env.js
 */

const fs = require('fs');
const path = require('path');

const envConfigDir = path.resolve(__dirname, '../../env-config');

const envFiles = [
  '.env.base',
  '.env.secrets',
  '.env.local',
  '.env.development',
  '.env.docker'
];

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Google OAuth\n');
console.log('=' .repeat(60));

const requiredVars = {
  'NEXTAUTH_SECRET': [],
  'GOOGLE_CLIENT_ID': [],
  'GOOGLE_CLIENT_SECRET': []
};

// –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
envFiles.forEach(fileName => {
  const filePath = path.join(envConfigDir, fileName);
  
  if (!fs.existsSync(filePath)) {
    console.log(`\n‚ö†Ô∏è  –§–∞–π–ª ${fileName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  console.log(`\nüìÑ ${fileName}:`);
  console.log('-'.repeat(60));
  
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  
  lines.forEach((line, index) => {
    const trimmed = line.trim();
    
    // –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    Object.keys(requiredVars).forEach(varName => {
      if (trimmed.startsWith(varName + '=')) {
        const value = trimmed.substring(varName.length + 1).trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        const isEncrypted = value.startsWith('ENC_');
        const isSet = value && value.length > 0;
        
        const status = isSet 
          ? (isEncrypted ? '‚úÖ [ENCRYPTED]' : '‚úÖ [PLAIN]')
          : '‚ùå [EMPTY]';
        
        console.log(`  ${varName}: ${status}`);
        
        if (isSet) {
          const preview = isEncrypted 
            ? value.substring(0, 30) + '...'
            : value.substring(0, Math.min(30, value.length)) + (value.length > 30 ? '...' : '');
          console.log(`    Value: ${preview}`);
          console.log(`    Length: ${value.length} chars`);
        }
        
        requiredVars[varName].push({
          file: fileName,
          value: value,
          encrypted: isEncrypted,
          set: isSet
        });
      }
    });
  });
});

// –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
console.log('\n' + '='.repeat(60));
console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:\n');

let allOk = true;

Object.keys(requiredVars).forEach(varName => {
  const entries = requiredVars[varName];
  const lastEntry = entries[entries.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  
  if (!lastEntry || !lastEntry.set) {
    console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û`);
    allOk = false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    console.log(`   –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤: .env.secrets –∏–ª–∏ .env.local`);
  } else {
    const status = lastEntry.encrypted ? '[ENCRYPTED]' : '[PLAIN TEXT]';
    console.log(`‚úÖ ${varName}: ${status} (–∏–∑ ${lastEntry.file})`);
  }
});

if (!allOk) {
  console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
  console.log('   Google OAuth –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.');
  console.log('\n   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤:');
  console.log('   - env-config/.env.secrets (–¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)');
  console.log('   - env-config/.env.local (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)');
} else {
  console.log('\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
}

console.log('\n' + '='.repeat(60));

