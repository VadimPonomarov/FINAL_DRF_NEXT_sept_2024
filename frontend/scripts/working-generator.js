/**
 * –†–ê–ë–û–ß–ò–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 */

const { chromium } = require('playwright');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  baseURL: 'http://localhost:3000',
  backendURL: 'http://localhost:8000',
  credentials: {
    email: 'pvs.versia@gmail.com',
    password: '12345678'
  },
  adsCount: 3,
  headless: false,
  slowMo: 1000
};

async function createTestAds() {
  console.log('üöÄ Starting WORKING ads generator...');
  
  let browser;
  let results = { success: 0, failed: 0, details: [] };

  try {
    // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    console.log('üåê Launching browser...');
    browser = await chromium.launch({
      headless: CONFIG.headless,
      slowMo: CONFIG.slowMo,
      args: ['--start-maximized']
    });

    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 }
    });

    const page = await context.newPage();

    // 2. –õ–æ–≥–∏–Ω–∏–º—Å—è
    console.log('üîê Logging in...');
    await page.goto(`${CONFIG.baseURL}/login`);
    await page.waitForLoadState('networkidle');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    await page.fill('input[type="email"], input[name="email"]', CONFIG.credentials.email);
    await page.fill('input[type="password"], input[name="password"]', CONFIG.credentials.password);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    await page.click('button[type="submit"], button:has-text("–í–æ–π—Ç–∏"), button:has-text("Login"), button:has-text("Sign in")');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    await page.waitForTimeout(3000);
    console.log('‚úÖ Login completed');

    // 3. –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    for (let i = 0; i < CONFIG.adsCount; i++) {
      console.log(`\nüìù Creating ad ${i + 1}/${CONFIG.adsCount}...`);
      
      try {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        await page.goto(`${CONFIG.baseURL}/autoria/create-ad`);
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(2000);

        console.log('üìã Page loaded, looking for form...');

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
        await page.waitForSelector('form, .form-container, [data-testid="ad-form"]', { timeout: 10000 });

        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        console.log('üéØ Looking for auto-fill buttons...');
        
        const buttonSelectors = [
          'button:has-text("üé≠")',
          'button:has-text("Interactive")',
          'button:has-text("‚ö°")',
          'button:has-text("Quick")',
          'button:has-text("–≥–µ–Ω–µ—Ä–∞—Ü")',
          'button:has-text("Mock")',
          'button[title*="–≥–µ–Ω–µ—Ä–∞—Ü"]'
        ];

        let buttonFound = false;
        for (const selector of buttonSelectors) {
          try {
            const button = page.locator(selector).first();
            if (await button.isVisible({ timeout: 1000 })) {
              console.log(`üé≤ Found button: ${selector}`);
              await button.click();
              buttonFound = true;
              await page.waitForTimeout(5000); // –ñ–¥–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
              break;
            }
          } catch (e) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }
        }

        if (!buttonFound) {
          console.log('‚ö†Ô∏è No auto-fill buttons found, filling manually...');
          
          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ä—É—á–Ω—É—é
          const testData = {
            title: `–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${i + 1} - ${new Date().toLocaleString()}`,
            description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã. –ù–æ–º–µ—Ä: ${i + 1}`,
            price: Math.floor(Math.random() * 50000) + 10000,
            year: 2018 + Math.floor(Math.random() * 6),
            mileage: Math.floor(Math.random() * 100000) + 10000
          };

          // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
          await fillFieldSafely(page, 'input[name="title"]', testData.title);
          await fillFieldSafely(page, 'textarea[name="description"]', testData.description);
          await fillFieldSafely(page, 'input[name="price"]', testData.price.toString());
          await fillFieldSafely(page, 'input[name="year"]', testData.year.toString());
          await fillFieldSafely(page, 'input[name="mileage"]', testData.mileage.toString());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        const titleValue = await page.inputValue('input[name="title"]').catch(() => '');
        if (!titleValue) {
          throw new Error('Form was not filled properly');
        }

        console.log(`‚úÖ Form filled: "${titleValue.substring(0, 30)}..."`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        console.log('üì§ Submitting form...');
        const submitSelectors = [
          'button[type="submit"]',
          'button:has-text("–°–æ–∑–¥–∞—Ç—å")',
          'button:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")',
          'button:has-text("Create")',
          'button:has-text("Submit")'
        ];

        let submitted = false;
        for (const selector of submitSelectors) {
          try {
            const button = page.locator(selector).first();
            if (await button.isVisible({ timeout: 1000 })) {
              await button.click();
              submitted = true;
              break;
            }
          } catch (e) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }
        }

        if (!submitted) {
          throw new Error('Submit button not found');
        }

        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await page.waitForTimeout(5000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        const currentUrl = page.url();
        const hasSuccessMessage = await page.locator('.toast-success, .notification-success, .alert-success').isVisible().catch(() => false);
        
        if (hasSuccessMessage || currentUrl.includes('/my-ads') || currentUrl.includes('/ads/')) {
          console.log('‚úÖ Ad created successfully!');
          results.success++;
        } else {
          throw new Error('No success confirmation found');
        }

        results.details.push({
          index: i + 1,
          success: true,
          title: titleValue.substring(0, 50)
        });

      } catch (error) {
        console.log(`‚ùå Failed to create ad ${i + 1}: ${error.message}`);
        results.failed++;
        results.details.push({
          index: i + 1,
          success: false,
          error: error.message
        });
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
      await page.waitForTimeout(2000);
    }

  } catch (error) {
    console.error('‚ùå Generator failed:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä RESULTS:');
  console.log(`‚úÖ Successful: ${results.success}`);
  console.log(`‚ùå Failed: ${results.failed}`);
  console.log(`üìù Total: ${results.success + results.failed}`);

  if (results.details.length > 0) {
    console.log('\nüìã Details:');
    results.details.forEach(detail => {
      const status = detail.success ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} Ad ${detail.index}: ${detail.title || detail.error}`);
    });
  }

  return results;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
async function fillFieldSafely(page, selector, value) {
  try {
    const element = page.locator(selector).first();
    if (await element.isVisible({ timeout: 2000 })) {
      await element.clear();
      await element.fill(value);
      console.log(`  ‚úì Filled ${selector}: ${value}`);
      await page.waitForTimeout(300);
    }
  } catch (error) {
    console.log(`  ‚ö†Ô∏è Could not fill ${selector}: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
if (require.main === module) {
  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);
  
  if (args.includes('--help')) {
    console.log(`
ü§ñ WORKING Ads Generator

Usage: node scripts/working-generator.js [options]

Options:
  --count <number>    Number of ads to create (default: 3)
  --headless         Run in headless mode
  --help             Show this help

Examples:
  node scripts/working-generator.js
  node scripts/working-generator.js --count 5
  node scripts/working-generator.js --count 2 --headless
    `);
    process.exit(0);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  const countIndex = args.indexOf('--count');
  if (countIndex !== -1 && args[countIndex + 1]) {
    CONFIG.adsCount = parseInt(args[countIndex + 1]) || 3;
  }

  if (args.includes('--headless')) {
    CONFIG.headless = true;
  }

  console.log(`üéØ Configuration:`);
  console.log(`  - Ads count: ${CONFIG.adsCount}`);
  console.log(`  - Headless: ${CONFIG.headless}`);
  console.log(`  - Base URL: ${CONFIG.baseURL}`);
  console.log('');

  createTestAds()
    .then((results) => {
      if (results.success > 0) {
        console.log('\nüéâ Generator completed with some success!');
        process.exit(0);
      } else {
        console.log('\nüí• Generator failed completely!');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('üí• Generator crashed:', error);
      process.exit(1);
    });
}
