/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */

import { runAdGenerator, AdGeneratorConfig } from './ads-generator';

async function testAdGenerator() {
  console.log('üß™ Starting ads generator test...');

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const config: Omit<AdGeneratorConfig, 'users'> = {
    count: parseInt(process.env.ADS_COUNT || '3'),
    imageTypes: (process.env.IMAGE_TYPES || 'front,side').split(','),
    includeImages: process.env.INCLUDE_IMAGES !== 'false',
    headless: process.env.HEADLESS === 'true',
    slowMo: 500, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    timeout: 30000 // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
  };

  console.log('üìã Test configuration:');
  console.log(`  - Count: ${config.count}`);
  console.log(`  - Images: ${config.includeImages}`);
  console.log(`  - Image types: ${config.imageTypes.join(', ')}`);
  console.log(`  - Headless: ${config.headless}`);
  console.log('');

  try {
    const results = await runAdGenerator(config);
    
    console.log('\nüéØ Test Results:');
    console.log(`‚úÖ Successful ads: ${results.success}`);
    console.log(`‚ùå Failed ads: ${results.failed}`);
    console.log(`üìä Success rate: ${((results.success / (results.success + results.failed)) * 100).toFixed(1)}%`);
    
    if (results.details.length > 0) {
      console.log('\nüìã Detailed Results:');
      results.details.forEach((detail, index) => {
        const status = detail.success ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} Ad ${detail.adIndex}: ${detail.user} (${detail.accountType}) - ${detail.timestamp}`);
        if (!detail.success && detail.error) {
          console.log(`    Error: ${detail.error}`);
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testAdGenerator()
    .then(() => {
      console.log('‚úÖ Test completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test failed:', error);
      process.exit(1);
    });
}

export { testAdGenerator };
