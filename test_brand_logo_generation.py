# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å –±–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ª–æ–≥–æ—Ç–∏–ø—ñ–≤
"""
import sys
import io
# Fix encoding for Windows console
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')

import requests
import json
import time
from pathlib import Path

# –¢–µ—Å—Ç–æ–≤—ñ –∫–µ–π—Å–∏
TEST_CASES = [
    {
        "name": "Renault Clio - French brand (—á–∞—Å—Ç–æ –º–∞—î Toyota logo)",
        "data": {
            "brand": "Renault",
            "model": "Clio",
            "year": 2019,
            "color": "blue",
            "body_type": "hatchback",
            "vehicle_type_name": "–ª–µ–≥–∫–æ–≤—ñ"
        },
        "expected_issues": ["Toyota logo", "Honda logo"],
        "expected_style": "French modern design, C-shaped LED"
    },
    {
        "name": "Great Wall H6 - Chinese brand (—á–∞—Å—Ç–æ –º–∞—î BMW/Toyota logo)",
        "data": {
            "brand": "Great Wall",
            "model": "H6",
            "year": 2021,
            "color": "white",
            "body_type": "suv",
            "vehicle_type_name": "–ª–µ–≥–∫–æ–≤—ñ"
        },
        "expected_issues": ["Toyota logo", "BMW logo", "Mercedes logo"],
        "expected_style": "Chinese SUV design, rugged character"
    },
    {
        "name": "Atlas 160W - Construction equipment (—á–∞—Å—Ç–æ –º–∞—î Mercedes/CAT logo)",
        "data": {
            "brand": "Atlas",
            "model": "160W",
            "year": 2020,
            "color": "yellow",
            "body_type": "excavator",
            "vehicle_type_name": "—Å–ø–µ—Ü—Ç–µ—Ö–Ω—ñ–∫–∞"
        },
        "expected_issues": ["Mercedes logo", "Caterpillar logo", "CAT logo"],
        "expected_style": "German construction, industrial yellow"
    },
    {
        "name": "Peugeot 308 - French brand (—á–∞—Å—Ç–æ –º–∞—î Honda logo)",
        "data": {
            "brand": "Peugeot",
            "model": "308",
            "year": 2020,
            "color": "black",
            "body_type": "sedan",
            "vehicle_type_name": "–ª–µ–≥–∫–æ–≤—ñ"
        },
        "expected_issues": ["Honda logo", "Hyundai logo"],
        "expected_style": "French elegant sporty, fang-shaped LED"
    }
]

def test_image_generation(test_case):
    """–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–µ–π—Å—É"""
    print(f"\n{'='*80}")
    print(f"üß™ –¢–ï–°–¢: {test_case['name']}")
    print(f"{'='*80}")
    
    url = "http://localhost:8000/api/chat/generate-car-images/"
    payload = {
        "car_data": test_case["data"],
        "angles": ["front"],
        "style": "realistic"
    }
    
    print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É...")
    print(f"   Brand: {test_case['data']['brand']}")
    print(f"   Model: {test_case['data']['model']}")
    print(f"   Year: {test_case['data']['year']}")
    print(f"   Type: {test_case['data']['vehicle_type_name']}")
    
    try:
        response = requests.post(url, json=payload, timeout=60)
        
        print(f"\nüì• –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('success'):
                images = result.get('images', [])
                print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
                
                for i, img in enumerate(images):
                    print(f"\n   üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}:")
                    print(f"      URL: {img.get('url', 'N/A')[:80]}...")
                    print(f"      Angle: {img.get('angle', 'N/A')}")
                    
                    prompt = img.get('prompt', '')
                    if prompt:
                        print(f"\n      üìù –ü—Ä–æ–º–ø—Ç (–ø–µ—Ä—à—ñ 300 —Å–∏–º–≤–æ–ª—ñ–≤):")
                        print(f"      {prompt[:300]}...")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –±—Ä–µ–Ω–¥—É –≤ –ø—Ä–æ–º–ø—Ç—ñ
                        brand_name = test_case['data']['brand']
                        if brand_name.lower() in prompt.lower():
                            print(f"      ‚ö†Ô∏è WARNING: –ù–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É '{brand_name}' –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–º–ø—Ç—ñ!")
                            print(f"      ‚ùå FAILED: Brand-agnostic –ø—ñ–¥—Ö—ñ–¥ –ù–ï –ø—Ä–∞—Ü—é—î")
                        else:
                            print(f"      ‚úÖ PASSED: –ù–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É –ù–ï –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–º–ø—Ç—ñ (brand-agnostic ‚úì)")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ñ–≤
                        logo_keywords = ['NO logo', 'BLANK', 'no emblem', 'no badge', 'unmarked', 'clean grille']
                        has_logo_prevention = any(keyword.lower() in prompt.lower() for keyword in logo_keywords)
                        
                        if has_logo_prevention:
                            print(f"      ‚úÖ PASSED: –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ñ–≤ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
                        else:
                            print(f"      ‚ö†Ô∏è WARNING: –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ñ–≤ –ù–ï –∑–Ω–∞–π–¥–µ–Ω—ñ")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                        style_keywords = test_case['expected_style'].split(',')
                        style_found = []
                        for keyword in style_keywords:
                            keyword = keyword.strip().lower()
                            if keyword in prompt.lower():
                                style_found.append(keyword)
                        
                        if style_found:
                            print(f"      ‚úÖ PASSED: –í—ñ–∑—É–∞–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ: {', '.join(style_found)}")
                        else:
                            print(f"      ‚ö†Ô∏è WARNING: –í—ñ–∑—É–∞–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ù–ï –∑–Ω–∞–π–¥–µ–Ω—ñ")
                
                return {
                    "success": True,
                    "images": images,
                    "prompt": images[0].get('prompt') if images else ''
                }
            else:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {result.get('error', 'Unknown error')}")
                return {"success": False, "error": result.get('error')}
        else:
            print(f"   ‚ùå HTTP Error: {response.status_code}")
            print(f"   Response: {response.text[:500]}")
            return {"success": False, "error": f"HTTP {response.status_code}"}
            
    except requests.exceptions.Timeout:
        print(f"   ‚ùå Timeout: –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (60 —Å–µ–∫)")
        return {"success": False, "error": "Timeout"}
    except Exception as e:
        print(f"   ‚ùå Exception: {str(e)}")
        return {"success": False, "error": str(e)}


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("=" * 80)
    print("  –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–Ü–®–ï–ù–ù–Ø –ü–†–û–ë–õ–ï–ú–ò –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ò–• –õ–û–ì–û–¢–ò–ü–Ü–í")
    print("=" * 80)
    
    print("üéØ –ú–µ—Ç–∞: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ AI –ù–ï –≥–µ–Ω–µ—Ä—É—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ª–æ–≥–æ—Ç–∏–ø–∏ –±—Ä–µ–Ω–¥—ñ–≤")
    print("üìã –ú–µ—Ç–æ–¥: Brand-agnostic –ø—Ä–æ–º–ø—Ç–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)")
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤: {len(TEST_CASES)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ backend...")
    try:
        health_response = requests.get("http://localhost:8000/health/", timeout=5)
        if health_response.status_code == 200:
            print("   ‚úÖ Backend –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        else:
            print(f"   ‚ö†Ô∏è Backend –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –∞–ª–µ —Å—Ç–∞—Ç—É—Å: {health_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        print("   üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ backend –∑–∞–ø—É—â–µ–Ω–∏–π: python manage.py runserver")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    results = []
    for i, test_case in enumerate(TEST_CASES, 1):
        print(f"\n\n{'#'*80}")
        print(f"–¢–ï–°–¢ {i}/{len(TEST_CASES)}")
        print(f"{'#'*80}")
        
        result = test_image_generation(test_case)
        results.append({
            "name": test_case["name"],
            "result": result
        })
        
        # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        if i < len(TEST_CASES):
            print("\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ç–µ—Å—Ç–æ–º...")
            time.sleep(2)
    
    # –ü—ñ–¥—Å—É–º–∫–∏
    print(f"\n\n{'='*80}")
    print("üìä –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print(f"{'='*80}")
    
    passed = sum(1 for r in results if r['result'].get('success'))
    total = len(results)
    
    print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {passed}/{total} ({passed/total*100:.1f}%)")
    
    for i, result in enumerate(results, 1):
        status = "‚úÖ PASSED" if result['result'].get('success') else "‚ùå FAILED"
        print(f"{i}. {status} - {result['name']}")
        if not result['result'].get('success'):
            print(f"   –ü–æ–º–∏–ª–∫–∞: {result['result'].get('error', 'Unknown')}")
    
    print(f"\n{'='*80}")
    if passed == total:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
        print("‚úÖ Brand-agnostic –ø—ñ–¥—Ö—ñ–¥ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ª–æ–≥–æ—Ç–∏–ø–∏ –±—ñ–ª—å—à–µ –ù–ï –∑'—è–≤–ª—è—é—Ç—å—Å—è")
    else:
        print(f"‚ö†Ô∏è –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò: {total - passed} –∑ {total}")
        print("üîß –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print(f"{'='*80}\n")


if __name__ == "__main__":
    main()

