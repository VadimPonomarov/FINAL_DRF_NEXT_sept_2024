#!/usr/bin/env python3
"""
üê≥ –ü–û–õ–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –í DOCKER - AutoRia Clone
===============================================

–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –í–°–ï–• —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö.
- Backend –∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã: –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
- Frontend: –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ (–ù–ï —Ç—Ä–µ–±—É–µ—Ç Node.js/npm –Ω–∞ —Ö–æ—Å—Ç–µ)

üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python deploy-frontend-docker.py                    # ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    python deploy-frontend-docker.py --skip-docker      # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å docker-compose up --build
    python deploy-frontend-docker.py --rebuild         # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã

üöÄ –ß–¢–û –î–ï–õ–ê–ï–¢ –°–ö–†–ò–ü–¢:
‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ Docker)
‚úÖ –ó–∞–ø—É—Å–∫–∞–µ—Ç docker-compose.docker.yml up --build
‚úÖ –û–∂–∏–¥–∞–µ—Ç healthy —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è frontend)
‚úÖ –í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
"""

import os
import sys
import subprocess
import time
import argparse
from pathlib import Path

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_step(step, message):
    """–í—ã–≤–æ–¥–∏—Ç —à–∞–≥ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"{Colors.OKBLUE}[–®–ê–ì {step}]{Colors.ENDC} {Colors.BOLD}{message}{Colors.ENDC}")

def print_success(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"{Colors.OKGREEN}[OK] {message}{Colors.ENDC}")

def print_warning(message):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"{Colors.WARNING}[WARNING] {message}{Colors.ENDC}")

def print_error(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    print(f"{Colors.FAIL}[ERROR] {message}{Colors.ENDC}")

def wait_for_all_containers_healthy(timeout=600, compose_file="docker-compose.docker.yml"):
    """–û–∂–∏–¥–∞–µ—Ç –ø–æ–∫–∞ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å healthcheck —Å—Ç–∞–Ω—É—Ç healthy"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ healthy —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å healthcheck –∏–∑ docker-compose.deploy.yml
    service_to_container = {}
    
    try:
        result = subprocess.run(
            ["docker-compose", "-f", compose_file, "ps", "--format", "json"],
            capture_output=True,
            text=True,
            timeout=10
        )
        if result.returncode == 0:
            import json
            containers_json = result.stdout.strip()
            if containers_json:
                if containers_json.startswith('['):
                    containers = json.loads(containers_json)
                else:
                    containers = []
                    for line in containers_json.split('\n'):
                        line = line.strip()
                        if line:
                            try:
                                containers.append(json.loads(line))
                            except:
                                pass
                
                for container in containers:
                    service_name = container.get("Service", "")
                    container_name = container.get("Name", "")
                    if service_name and container_name:
                        service_to_container[service_name] = container_name
                        print(f"   –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {service_name} -> {container_name}")
    except Exception as e:
        print_warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ container_name
    default_container_names = {
        "pg": "pg",
        "redis": "redis",
        "rabbitmq": "rabbitmq",
        "celery-worker": "celery-worker",
        "mailing": "mailing",
        "nginx": "nginx",
        "frontend": "frontend",
        "app": "app"  # Backend Django
    }
    
    # –°–µ—Ä–≤–∏—Å—ã —Å healthcheck –∏–∑ docker-compose.docker.yml
    services_with_healthcheck = [
        "pg",           # PostgreSQL
        "redis",        # Redis
        "rabbitmq",     # RabbitMQ
        "app",          # Django Backend
        "celery-worker", # Celery Worker
        "mailing",      # Mailing Service
        "nginx",        # Nginx
        "frontend"      # Frontend Next.js
    ]
    
    # –°–µ—Ä–≤–∏—Å—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö running –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    services_optional_health = {"mailing", "nginx"}
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ –ª–∏ —É–∂–µ healthy
    print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    all_already_healthy = True
    initial_status = {}
    
    for service in services_with_healthcheck:
        container_name = service_to_container.get(service) or default_container_names.get(service) or service
        
        try:
            result = subprocess.run(
                ["docker", "inspect", "--format", "{{.State.Health.Status}}", container_name],
                capture_output=True,
                text=True,
                timeout=3
            )
            
            if result.returncode == 0:
                health_status = result.stdout.strip().lower()
                
                if not health_status:
                    status_result = subprocess.run(
                        ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                        capture_output=True,
                        text=True,
                        timeout=3
                    )
                    if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                        initial_status[service] = "‚úÖ –ó–∞–ø—É—â–µ–Ω (–±–µ–∑ healthcheck)"
                        continue
                    else:
                        all_already_healthy = False
                        initial_status[service] = "‚è≥ –ù–µ –∑–∞–ø—É—â–µ–Ω"
                        continue
                
                if health_status == "healthy":
                    initial_status[service] = "‚úÖ Healthy"
                elif health_status == "unhealthy":
                    if service in services_optional_health:
                        status_result = subprocess.run(
                            ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                            capture_output=True,
                            text=True,
                            timeout=3
                        )
                        if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                            initial_status[service] = "‚úÖ Running (healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –Ω–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç)"
                        else:
                            all_already_healthy = False
                            initial_status[service] = "‚ùå Unhealthy"
                    else:
                        all_already_healthy = False
                        initial_status[service] = "‚ùå Unhealthy"
                else:
                    all_already_healthy = False
                    initial_status[service] = f"‚è≥ {health_status}"
            else:
                all_already_healthy = False
                initial_status[service] = "‚è≥ –ù–µ –Ω–∞–π–¥–µ–Ω"
        except:
            all_already_healthy = False
            initial_status[service] = "‚è≥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
    for service, status in initial_status.items():
        print(f"   {status} - {service}")
    
    if all_already_healthy:
        print_success("\n‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ healthy! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ.")
        return True
    
    # –ò–Ω–∞—á–µ –∂–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ —Å—Ç–∞–Ω—É—Ç healthy
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—Ç–∞–Ω—É—Ç healthy...")
    start_time = time.time()
    checked_services = set()
    
    while time.time() - start_time < timeout:
        all_healthy = True
        current_status = {}
        
        for service in services_with_healthcheck:
            container_name = service_to_container.get(service) or default_container_names.get(service) or service
            
            try:
                result = subprocess.run(
                    ["docker", "inspect", "--format", "{{.State.Health.Status}}", container_name],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                
                if result.returncode == 0:
                    health_status = result.stdout.strip().lower()
                    
                    if not health_status:
                        status_result = subprocess.run(
                            ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                            capture_output=True,
                            text=True,
                            timeout=5
                        )
                        if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                            current_status[service] = "‚úÖ –ó–∞–ø—É—â–µ–Ω (–±–µ–∑ healthcheck)"
                            continue
                        else:
                            all_healthy = False
                            current_status[service] = "‚è≥ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
                            continue
                    
                    if health_status == "healthy":
                        if service not in checked_services:
                            print_success(f"‚úÖ {service}: —Å—Ç–∞–ª healthy")
                            checked_services.add(service)
                        current_status[service] = "‚úÖ Healthy"
                    elif health_status == "unhealthy":
                        if service in services_optional_health:
                            status_result = subprocess.run(
                                ["docker", "inspect", "--format", "{{.State.Status}}", container_name],
                                capture_output=True,
                                text=True,
                                timeout=5
                            )
                            if status_result.returncode == 0 and "running" in status_result.stdout.lower():
                                if service not in checked_services:
                                    print_warning(f"‚ö†Ô∏è {service}: running, –Ω–æ healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)")
                                    checked_services.add(service)
                                current_status[service] = "‚úÖ Running (healthcheck –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç)"
                            else:
                                all_healthy = False
                                current_status[service] = "‚ùå Unhealthy"
                        else:
                            all_healthy = False
                            current_status[service] = "‚ùå Unhealthy"
                    elif health_status in ["starting", ""]:
                        all_healthy = False
                        current_status[service] = "‚è≥ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
                    else:
                        all_healthy = False
                        current_status[service] = f"‚è≥ {health_status}"
                else:
                    all_healthy = False
                    current_status[service] = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
                    
            except subprocess.TimeoutExpired:
                all_healthy = False
                current_status[service] = "‚è≥ –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
            except Exception as e:
                all_healthy = False
                current_status[service] = f"‚è≥ –û—à–∏–±–∫–∞: {str(e)[:20]}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        elapsed = int(time.time() - start_time)
        waiting_services = [f"{k}" for k, v in current_status.items() if "‚è≥" in v or "‚ùå" in v]
        if waiting_services:
            print(f"\r‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ({elapsed}/{timeout}—Å): {', '.join(waiting_services[:3])}", end="", flush=True)
        else:
            print(f"\r‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ({elapsed}/{timeout}—Å)...", end="", flush=True)
        
        if all_healthy:
            print(f"\n‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã healthy! (–∑–∞ {elapsed} —Å–µ–∫—É–Ω–¥)")
            return True
        
        time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    print(f"\n‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ({timeout}—Å). –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤—ã.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
    for service in services_with_healthcheck:
        container_name = service_to_container.get(service) or default_container_names.get(service) or service
        try:
            result = subprocess.run(
                ["docker", "inspect", "--format", "{{.State.Health.Status}}", container_name],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                health_status = result.stdout.strip()
                status_icon = "‚úÖ" if health_status.lower() == "healthy" else "‚ùå" if health_status.lower() == "unhealthy" else "‚è≥"
                print(f"   {status_icon} {service}: {health_status or '–±–µ–∑ healthcheck'}")
        except:
            print(f"   ‚ùì {service}: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
    
    return False

def run_command(command, cwd=None, check=True, capture_output=False):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if capture_output:
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check,
                capture_output=True,
                text=True
            )
        else:
            print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
            result = subprocess.run(
                command,
                shell=True,
                cwd=cwd,
                check=check
            )
        return result
    except subprocess.CalledProcessError as e:
        print_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        print_error(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if capture_output:
            print_error(f"–í—ã–≤–æ–¥: {e.stdout}")
            print_error(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return None

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    result = run_command("docker --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"Docker: {result.stdout.strip()}")
    else:
        print_error("Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
    result = run_command("docker-compose --version", check=False, capture_output=True)
    if result and result.returncode == 0:
        print_success(f"docker-compose: {result.stdout.strip()}")
    else:
        print_error("docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ docker-compose")
        return False
    
    print_success("–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Docker"""
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        parser = argparse.ArgumentParser(description='AutoRia Clone Docker Deploy Script')
        parser.add_argument('--skip-docker', action='store_true',
                          help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å docker-compose up --build (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')
        parser.add_argument('--rebuild', action='store_true',
                          help='–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã (--build)')

        args = parser.parse_args()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
        if sys.platform == "win32":
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

        compose_file = "docker-compose.docker.yml"

        print(f"{Colors.HEADER}{Colors.BOLD}")
        print("=" * 70)
        print("–ü–û–õ–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –í DOCKER - AutoRia Clone")
        print("=" * 70)
        print("üê≥ –í–°–ï –°–ï–†–í–ò–°–´ –í DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–ê–•")
        print(f"{Colors.ENDC}")
        print()

        print("üìã –ü–ª–∞–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print("   1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        print("   2Ô∏è‚É£  docker-compose.docker.yml up --build")
        print("   3Ô∏è‚É£  –û–∂–∏–¥–∞–Ω–∏–µ healthy —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        print("   4Ô∏è‚É£  –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
        print()

        # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        if not check_requirements():
            print_error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            sys.exit(1)

        # –≠–¢–ê–ü 2: docker-compose up --build (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if not args.skip_docker:
            print_step(2, "–ó–∞–ø—É—Å–∫ docker-compose.docker.yml up --build")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
            try:
                result = subprocess.run(
                    ["docker-compose", "-f", compose_file, "ps", "-q"],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                has_containers = bool(result.stdout.strip())
                
                if has_containers:
                    if wait_for_all_containers_healthy(timeout=30, compose_file=compose_file):
                        print_success("‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –∏ healthy! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º docker-compose up --build")
                        skip_docker_build = True
                    else:
                        print_warning("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ healthy, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É...")
                        skip_docker_build = False
                else:
                    skip_docker_build = False
            except:
                skip_docker_build = False
            
            if not skip_docker_build:
                print("üî® –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
                print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-15 –º–∏–Ω—É—Ç (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–µ—Ä–≤–∞—è —Å–±–æ—Ä–∫–∞ frontend)...")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
                if args.rebuild:
                    compose_cmd = ["docker-compose", "-f", compose_file, "up", "--build", "-d", "--force-recreate"]
                else:
                    compose_cmd = ["docker-compose", "-f", compose_file, "up", "--build", "-d"]
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º docker-compose up --build
                process = subprocess.Popen(
                    compose_cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                for line in iter(process.stdout.readline, ''):
                    if line:
                        print(f"   {line.rstrip()}")
                
                return_code = process.wait()
                
                if return_code != 0:
                    print_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ docker-compose up --build (–∫–æ–¥: {return_code})")
                    sys.exit(1)
                
                print_success("‚úÖ docker-compose up --build –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print_warning("‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ docker-compose up --build (--skip-docker)")

        # –≠–¢–ê–ü 3: –û–∂–∏–¥–∞–Ω–∏–µ healthy —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        print_step(3, "–û–∂–∏–¥–∞–Ω–∏–µ healthy —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        if not wait_for_all_containers_healthy(timeout=600, compose_file=compose_file):  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            print_warning("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ —Å—Ç–∞–ª–∏ healthy, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # –≠–¢–ê–ü 4: –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        print_step(4, "–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
        
        print()
        print("="*70)
        print(f"{Colors.OKGREEN}{Colors.BOLD}üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!{Colors.ENDC}")
        print("="*70)
        print()
        print(f"{Colors.BOLD}üåê AutoRia Clone –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}üåü –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏:{Colors.ENDC}")
        print(f"   üîó –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—á–µ—Ä–µ–∑ Nginx): {Colors.OKBLUE}http://localhost{Colors.ENDC}")
        print(f"   üîó Frontend (–Ω–∞–ø—Ä—è–º—É—é): {Colors.OKBLUE}http://localhost:3000{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}üìã Backend —Å–µ—Ä–≤–∏—Å—ã:{Colors.ENDC}")
        print(f"   üîó Backend API: {Colors.OKBLUE}http://localhost:8000/api/{Colors.ENDC}")
        print(f"   üîó API Docs (Swagger): {Colors.OKBLUE}http://localhost:8000/api/docs/{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}‚öôÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:{Colors.ENDC}")
        print(f"   üîó RabbitMQ Management: {Colors.OKBLUE}http://localhost:15672{Colors.ENDC}")
        print(f"   üîó Celery Flower: {Colors.OKBLUE}http://localhost:5555{Colors.ENDC}")
        print(f"   üîó Redis Insight: {Colors.OKBLUE}http://localhost:5540{Colors.ENDC}")
        print(f"   üîó Mailing Service: {Colors.OKBLUE}http://localhost:8001{Colors.ENDC}")
        print()
        print(f"{Colors.OKCYAN}üí° –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:{Colors.ENDC}")
        print(f"   ‚úÖ Frontend: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–ø–æ—Ä—Ç 3000)")
        print(f"   ‚úÖ Backend: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–ø–æ—Ä—Ç 8000)")
        print(f"   ‚úÖ Nginx: reverse proxy (–ø–æ—Ä—Ç 80)")
        print()
        print("="*70)
        print()
        print(f"{Colors.WARNING}üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:{Colors.ENDC}")
        print(f"   - –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö")
        print(f"   - Frontend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤ Docker (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç Node.js –Ω–∞ —Ö–æ—Å—Ç–µ)")
        print(f"   - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: docker-compose -f {compose_file} logs -f [service]")
        print(f"   - –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker-compose -f {compose_file} down")
        print(f"   - –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: docker-compose -f {compose_file} restart [service]")
        print()

    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(130)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è Ctrl+C
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()

