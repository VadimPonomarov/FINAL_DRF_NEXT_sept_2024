#!/usr/bin/env node
/**
 * Interactive OAuth Keys Update Script
 * –ü–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å Google OAuth –∫–ª—é—á–∏ –≤ env-config/.env.secrets
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function encryptValue(text) {
  if (!text) return text;
  const encoded = Buffer.from(text).toString('base64');
  const reversed = encoded.split('').reverse().join('');
  return 'ENC_' + reversed;
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîê Google OAuth Keys Update');
console.log('=' .repeat(60));
console.log('');
console.log('–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å Google OAuth credentials.');
console.log('');
console.log('üìù –í–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:');
console.log('  1. GOOGLE_CLIENT_ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123...xyz.apps.googleusercontent.com)');
console.log('  2. GOOGLE_CLIENT_SECRET (–Ω–∞–ø—Ä–∏–º–µ—Ä: GOCSPX-...)');
console.log('');
console.log('‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ OAUTH_SETUP_GUIDE.md');
console.log('');

// –°–ø—Ä–∞—à–∏–≤–∞–µ–º Client ID
rl.question('–í–≤–µ–¥–∏—Ç–µ GOOGLE_CLIENT_ID: ', (clientId) => {
  if (!clientId || clientId.trim() === '') {
    console.log('‚ùå Client ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    rl.close();
    return;
  }

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º Client Secret
  rl.question('–í–≤–µ–¥–∏—Ç–µ GOOGLE_CLIENT_SECRET: ', (clientSecret) => {
    if (!clientSecret || clientSecret.trim() === '') {
      console.log('‚ùå Client Secret –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      rl.close();
      return;
    }

    // –®–∏—Ñ—Ä—É–µ–º
    const encryptedClientId = encryptValue(clientId.trim());
    const encryptedClientSecret = encryptValue(clientSecret.trim());

    console.log('');
    console.log('‚úÖ –ö–ª—é—á–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:');
    console.log(`  Client ID: ${encryptedClientId.substring(0, 40)}...`);
    console.log(`  Client Secret: ${encryptedClientSecret.substring(0, 40)}...`);
    console.log('');

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env.secrets
    const secretsPath = path.join(__dirname, 'env-config', '.env.secrets');
    let content = '';
    
    if (fs.existsSync(secretsPath)) {
      content = fs.readFileSync(secretsPath, 'utf8');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏
      content = content.replace(
        /GOOGLE_CLIENT_ID=.*/,
        `GOOGLE_CLIENT_ID=${encryptedClientId}`
      );
      content = content.replace(
        /GOOGLE_CLIENT_SECRET=.*/,
        `GOOGLE_CLIENT_SECRET=${encryptedClientSecret}`
      );
      content = content.replace(
        /NEXT_PUBLIC_GOOGLE_CLIENT_ID=.*/,
        `NEXT_PUBLIC_GOOGLE_CLIENT_ID=${encryptedClientId}`
      );
    } else {
      console.log('‚ùå –§–∞–π–ª env-config/.env.secrets –Ω–µ –Ω–∞–π–¥–µ–Ω');
      rl.close();
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    fs.writeFileSync(secretsPath, content, 'utf8');

    console.log('‚úÖ –§–∞–π–ª env-config/.env.secrets –æ–±–Ω–æ–≤–ª–µ–Ω!');
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Next.js dev server');
    console.log('  2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000');
    console.log('  3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google');
    console.log('');

    rl.close();
  });
});

