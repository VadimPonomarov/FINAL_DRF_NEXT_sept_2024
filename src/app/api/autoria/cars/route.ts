import { NextRequest, NextResponse } from 'next/server';
import { getAuthorizationHeaders } from '@/common/constants/headers';

/**
 * API route –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * GET /api/autoria/cars - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * POST /api/autoria/cars - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
 */

const getDRFBaseUrl = () => {
  return process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';
};

async function handleRequest(req: NextRequest) {
  const method = req.method;
  
  console.log(`[Cars API] üöÄ ${method} request received`);
  
  try {
    console.log(`[Cars API] üìã ${method} /api/autoria/cars`);
    console.log(`[Cars API] üìç Request URL:`, req.url);
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –∫ DRF API
    const baseUrl = getDRFBaseUrl();
    let apiUrl: string;
    
    switch (method) {
      case 'GET':
        apiUrl = `${baseUrl}/api/ads/cars`;
        break;
      case 'POST':
        apiUrl = `${baseUrl}/api/ads/cars/create/`;
        break;
      default:
        return NextResponse.json(
          { error: `Method ${method} not allowed` },
          { status: 405 }
        );
    }
    
    console.log(`[Cars API] üì§ Proxying to: ${apiUrl}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeaders = await getAuthorizationHeaders();
    console.log(`[Cars API] üîê Auth headers keys:`, Object.keys(authHeaders));
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const requestHeaders: Record<string, string> = {
      ...authHeaders,
    };
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST
    let body: string | undefined;
    if (method === 'POST') {
      const formData = await req.json();
      body = JSON.stringify(formData);
      requestHeaders['Content-Type'] = 'application/json';
      
      console.log(`[Cars API] üìù Form data:`, {
        title: formData.title,
        price: formData.price,
        fieldsCount: Object.keys(formData).length
      });
      console.log(`[Cars API] üì§ Request body size:`, body.length, 'chars');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
    let finalUrl = apiUrl;
    if (method === 'GET') {
      const { searchParams } = new URL(req.url);
      if (searchParams.toString()) {
        finalUrl += `?${searchParams.toString()}`;
        console.log(`[Cars API] üîç Query params:`, searchParams.toString());
      }
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ DRF API
    const response = await fetch(finalUrl, {
      method,
      headers: requestHeaders,
      body: body,
      credentials: 'include'
    });
    
    console.log(`[Cars API] üì° DRF response status: ${response.status}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const contentType = response.headers.get('content-type');
    let responseData: any;
    
    if (contentType && contentType.includes('application/json')) {
      responseData = await response.json();
    } else {
      responseData = await response.text();
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    if (!response.ok) {
      console.error(`[Cars API] ‚ùå DRF error:`, response.status, responseData);
      return NextResponse.json(
        { 
          error: 'Backend request failed', 
          details: responseData,
          status: response.status 
        },
        { status: response.status }
      );
    }
    
    console.log(`[Cars API] ‚úÖ Success:`, typeof responseData === 'object' ? `Object with ${Object.keys(responseData).length} keys` : 'text response');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    return NextResponse.json(responseData, {
      status: response.status,
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
  } catch (error) {
    console.error(`[Cars API] ‚ùå Error:`, error);
    return NextResponse.json(
      { 
        error: 'Internal server error', 
        details: error instanceof Error ? error.message : 'Unknown error' 
      },
      { status: 500 }
    );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è HTTP –º–µ—Ç–æ–¥–æ–≤
export async function GET(req: NextRequest) {
  return handleRequest(req);
}

export async function POST(req: NextRequest) {
  return handleRequest(req);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';
