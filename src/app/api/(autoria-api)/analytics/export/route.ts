import { NextRequest, NextResponse } from 'next/server';
import { exportAnalyticsReport, ExportOptions, ExportData, ExportUtils } from '@/lib/analytics/export';
import { analyticsCache } from '@/lib/analytics/cache';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const {
      format,
      title = '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç AutoRia',
      period,
      includeCharts = false,
      includeRawData = true,
      filters = {},
      data
    } = body;

    console.log('[Export API] üìÑ Processing export request:', { format, title, period });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!format || !['pdf', 'excel', 'csv'].includes(format)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: pdf, excel, csv'
      }, { status: 400 });
    }

    if (!data || !ExportUtils.validateExportData(data)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
      }, { status: 400 });
    }

    const exportOptions: ExportOptions = {
      format: format as 'pdf' | 'excel' | 'csv',
      title,
      period: period || '–ù–µ —É–∫–∞–∑–∞–Ω',
      includeCharts,
      includeRawData,
      filters
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const reportBlob = await exportAnalyticsReport(data, exportOptions);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const mimeTypes = {
      csv: 'text/csv',
      excel: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      pdf: 'application/pdf'
    };

    const mimeType = mimeTypes[format as keyof typeof mimeTypes];
    const filename = ExportUtils.generateFilename(exportOptions);

    console.log('[Export API] ‚úÖ Report generated successfully:', { filename, size: reportBlob.size });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
    return new NextResponse(reportBlob, {
      status: 200,
      headers: {
        'Content-Type': mimeType,
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': reportBlob.size.toString(),
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

  } catch (error: any) {
    console.error('[Export API] ‚ùå Error:', error);

    return NextResponse.json({
      success: false,
      error: error.message || 'Unknown error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞'
    }, { status: 500 });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
export async function GET(request: NextRequest) {
  try {
    const formats = [
      {
        id: 'csv',
        name: 'CSV',
        description: 'Comma-separated values –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏',
        extension: 'csv',
        mimeType: 'text/csv',
        features: ['raw_data', 'kpi_metrics', 'time_series']
      },
      {
        id: 'excel',
        name: 'Excel',
        description: 'Microsoft Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏',
        extension: 'xlsx',
        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        features: ['raw_data', 'kpi_metrics', 'time_series', 'charts', 'formatting']
      },
      {
        id: 'pdf',
        name: 'PDF',
        description: 'Portable Document Format –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
        extension: 'pdf',
        mimeType: 'application/pdf',
        features: ['formatted_report', 'charts', 'summary']
      }
    ];

    return NextResponse.json({
      success: true,
      data: {
        formats,
        default_options: {
          includeCharts: false,
          includeRawData: true,
          title: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç AutoRia'
        },
        limits: {
          max_data_points: 10000,
          max_file_size: '50MB'
        }
      }
    });

  } catch (error: any) {
    console.error('[Export API] ‚ùå Error getting formats:', error);

    return NextResponse.json({
      success: false,
      error: error.message || 'Unknown error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞'
    }, { status: 500 });
  }
}
